(function(global) {
    /**
     * Copyright (c) 2015-present, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     *
     * This pipes all of our console logging functions to native logging so that
     * JavaScript errors in required modules show up in Xcode via NSLog.
     *
     * Object.es6
     * @polyfill
     */

    // WARNING: This is an optimized version that fails on hasOwnProperty checks
    // and non objects. It's not spec-compliant. It's a perf optimization.
    /* eslint strict:0 */
    Object.assign = function(target, sources) {

        for (var nextIndex = 1; nextIndex < arguments.length; nextIndex++) {
            var nextSource = arguments[nextIndex];
            if (nextSource == null) {
                continue;
            }

            // We don't currently support accessors nor proxies. Therefore this
            // copy cannot throw. If we ever supported this then we must handle
            // exceptions and side-effects.

            for (var key in nextSource) {
                target[key] = nextSource[key];
            }
        }

        return target;
    };

    /**
     * String.prototype.es6
     * @polyfill
     */

    /*eslint global-strict:0, no-extend-native:0, no-bitwise:0 */
    /*jshint bitwise:false*/

    /*
     * NOTE: We use (Number(x) || 0) to replace NaN values with zero.
     */

    if (!String.prototype.startsWith) {
        String.prototype.startsWith = function(search) {
            'use strict';
            if (this == null) {
                throw TypeError();
            }
            var string = String(this);
            var pos = arguments.length > 1 ?
                (Number(arguments[1]) || 0) : 0;
            var start = Math.min(Math.max(pos, 0), string.length);
            return string.indexOf(String(search), pos) === start;
        };
    }

    if (!String.prototype.endsWith) {
        String.prototype.endsWith = function(search) {
            'use strict';
            if (this == null) {
                throw TypeError();
            }
            var string = String(this);
            var stringLength = string.length;
            var searchString = String(search);
            var pos = arguments.length > 1 ?
                (Number(arguments[1]) || 0) : stringLength;
            var end = Math.min(Math.max(pos, 0), stringLength);
            var start = end - searchString.length;
            if (start < 0) {
                return false;
            }
            return string.lastIndexOf(searchString, start) === start;
        };
    }

    if (!String.prototype.contains) {
        String.prototype.contains = function(search) {
            'use strict';
            if (this == null) {
                throw TypeError();
            }
            var string = String(this);
            var pos = arguments.length > 1 ?
                (Number(arguments[1]) || 0) : 0;
            return string.indexOf(String(search), pos) !== -1;
        };
    }

    if (!String.prototype.repeat) {
        String.prototype.repeat = function(count) {
            'use strict';
            if (this == null) {
                throw TypeError();
            }
            var string = String(this);
            count = Number(count) || 0;
            if (count < 0 || count === Infinity) {
                throw RangeError();
            }
            if (count === 1) {
                return string;
            }
            var result = '';
            while (count) {
                if (count & 1) {
                    result += string;
                }
                if ((count >>= 1)) {
                    string += string;
                }
            }
            return result;
        };
    }

    /**
     * Copyright 2004-present Facebook. All Rights Reserved.
     *
     * Array.prototype.es6
     * @polyfill
     */

    /* eslint-disable */

    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex
    function findIndex(predicate, context) {
        if (this == null) {
            throw new TypeError(
                'Array.prototype.findIndex called on null or undefined'
            );
        }
        if (typeof predicate !== 'function') {
            throw new TypeError('predicate must be a function');
        }
        var list = Object(this);
        var length = list.length >>> 0;
        for (var i = 0; i < length; i++) {
            if (predicate.call(context, list[i], i, list)) {
                return i;
            }
        }
        return -1;
    }

    if (!Array.prototype.findIndex) {
        Object.defineProperty(Array.prototype, 'findIndex', {
            enumerable: false,
            writable: true,
            configurable: true,
            value: findIndex
        });
    }

    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find
    if (!Array.prototype.find) {
        Object.defineProperty(Array.prototype, 'find', {
            enumerable: false,
            writable: true,
            configurable: true,
            value: function(predicate, context) {
                if (this == null) {
                    throw new TypeError(
                        'Array.prototype.find called on null or undefined'
                    );
                }
                var index = findIndex.call(this, predicate, context);
                return index === -1 ? undefined : this[index];
            }
        });
    }

    /**
     * Copyright 2013-2014 Facebook, Inc.
     * Array.es6
     * @polyfill
     */

    /*eslint-disable */

    /**
     * Creates an array from array like objects.
     *
     * https://people.mozilla.org/~jorendorff/es6-draft.html#sec-array.from
     */
    if (!Array.from) {
        Array.from = function(arrayLike /*, mapFn, thisArg */ ) {
            if (arrayLike == null) {
                throw new TypeError('Object is null or undefined');
            }

            // Optional args.
            var mapFn = arguments[1];
            var thisArg = arguments[2];

            var C = this;
            var items = Object(arrayLike);
            var symbolIterator = typeof Symbol === 'function' ? Symbol.iterator : '@@iterator';
            var mapping = typeof mapFn === 'function';
            var usingIterator = typeof items[symbolIterator] === 'function';
            var key = 0;
            var ret;
            var value;

            if (usingIterator) {
                ret = typeof C === 'function' ? new C() : [];
                var it = items[symbolIterator]();
                var next;

                while (!(next = it.next()).done) {
                    value = next.value;

                    if (mapping) {
                        value = mapFn.call(thisArg, value, key);
                    }

                    ret[key] = value;
                    key += 1;
                }

                ret.length = key;
                return ret;
            }

            var len = items.length;
            if (isNaN(len) || len < 0) {
                len = 0;
            }

            ret = typeof C === 'function' ? new C(len) : new Array(len);

            while (key < len) {
                value = items[key];

                if (mapping) {
                    value = mapFn.call(thisArg, value, key);
                }

                ret[key] = value;

                key += 1;
            }

            ret.length = key;
            return ret;
        };
    }

    /**
     * Copyright 2004-present Facebook. All Rights Reserved.
     *
     * Object.es7
     * @polyfill
     */

    (function() {

        const hasOwnProperty = Object.prototype.hasOwnProperty;

        /**
         * Returns an array of the given object's own enumerable entries.
         * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/entries
         *
         */
        if (typeof Object.entries !== 'function') {
            Object.entries = function(object) {
                // `null` and `undefined` values are not allowed.
                if (object == null) {
                    throw new TypeError('Object.entries called on non-object');
                }

                var entries = [];
                for (var key in object) {
                    if (hasOwnProperty.call(object, key)) {
                        entries.push([key, object[key]]);
                    }
                }
                return entries;
            };
        }

        /**
         * Returns an array of the given object's own enumerable entries.
         * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/values
         *
         */
        if (typeof Object.values !== 'function') {
            Object.values = function(object) {
                // `null` and `undefined` values are not allowed.
                if (object == null) {
                    throw new TypeError('Object.values called on non-object');
                }

                var values = [];
                for (var key in object) {
                    if (hasOwnProperty.call(object, key)) {
                        values.push(object[key]);
                    }
                }
                return values;
            };
        }

    })();
    /**
     * Copyright (c) 2015-present, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     */

    /* eslint-disable */

    // Created by running:
    // require('babel-core').buildExternalHelpers('_extends classCallCheck createClass createRawReactElement defineProperty get inherits  interopRequireDefault interopRequireWildcard objectWithoutProperties possibleConstructorReturn slicedToArray taggedTemplateLiteral toArray toConsumableArray '.split(' '))
    // then replacing the `global` reference in the last line to also use `this`.
    //
    // actually, that's a lie, because babel6 omits _extends and createRawReactElement

    var babelHelpers = global.babelHelpers = {};

    babelHelpers.createRawReactElement = (function() {
        var REACT_ELEMENT_TYPE = typeof Symbol === "function" && Symbol.for && Symbol.for("react.element") || 0xeac7;
        return function createRawReactElement(type, key, props) {
            return {
                $$typeof: REACT_ELEMENT_TYPE,
                type: type,
                key: key,
                ref: null,
                props: props,
                _owner: null
            };
        };
    })();

    babelHelpers.classCallCheck = function(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    };

    babelHelpers.createClass = (function() {
        function defineProperties(target, props) {
            for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor) descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
            }
        }

        return function(Constructor, protoProps, staticProps) {
            if (protoProps) defineProperties(Constructor.prototype, protoProps);
            if (staticProps) defineProperties(Constructor, staticProps);
            return Constructor;
        };
    })();

    babelHelpers.defineProperty = function(obj, key, value) {
        if (key in obj) {
            Object.defineProperty(obj, key, {
                value: value,
                enumerable: true,
                configurable: true,
                writable: true
            });
        } else {
            obj[key] = value;
        }

        return obj;
    };

    babelHelpers._extends = babelHelpers.extends = Object.assign || function(target) {
        for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i];

            for (var key in source) {
                if (Object.prototype.hasOwnProperty.call(source, key)) {
                    target[key] = source[key];
                }
            }
        }

        return target;
    };

    babelHelpers.get = function get(object, property, receiver) {
        if (object === null) object = Function.prototype;
        var desc = Object.getOwnPropertyDescriptor(object, property);

        if (desc === undefined) {
            var parent = Object.getPrototypeOf(object);

            if (parent === null) {
                return undefined;
            } else {
                return get(parent, property, receiver);
            }
        } else if ("value" in desc) {
            return desc.value;
        } else {
            var getter = desc.get;

            if (getter === undefined) {
                return undefined;
            }

            return getter.call(receiver);
        }
    };

    babelHelpers.inherits = function(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
        }

        subClass.prototype = Object.create(superClass && superClass.prototype, {
            constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true
            }
        });
        if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    };

    babelHelpers.interopRequireDefault = function(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    };

    babelHelpers.interopRequireWildcard = function(obj) {
        if (obj && obj.__esModule) {
            return obj;
        } else {
            var newObj = {};

            if (obj != null) {
                for (var key in obj) {
                    if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
                }
            }

            newObj.default = obj;
            return newObj;
        }
    };

    babelHelpers.objectWithoutProperties = function(obj, keys) {
        var target = {};

        for (var i in obj) {
            if (keys.indexOf(i) >= 0) continue;
            if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;
            target[i] = obj[i];
        }

        return target;
    };

    babelHelpers.possibleConstructorReturn = function(self, call) {
        if (!self) {
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }

        return call && (typeof call === "object" || typeof call === "function") ? call : self;
    };

    babelHelpers.slicedToArray = (function() {
        function sliceIterator(arr, i) {
            var _arr = [];
            var _n = true;
            var _d = false;
            var _e = undefined;

            try {
                for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
                    _arr.push(_s.value);

                    if (i && _arr.length === i) break;
                }
            } catch (err) {
                _d = true;
                _e = err;
            } finally {
                try {
                    if (!_n && _i["return"]) _i["return"]();
                } finally {
                    if (_d) throw _e;
                }
            }

            return _arr;
        }

        return function(arr, i) {
            if (Array.isArray(arr)) {
                return arr;
            } else if (Symbol.iterator in Object(arr)) {
                return sliceIterator(arr, i);
            } else {
                throw new TypeError("Invalid attempt to destructure non-iterable instance");
            }
        };
    })();

    babelHelpers.taggedTemplateLiteral = function(strings, raw) {
        return Object.freeze(Object.defineProperties(strings, {
            raw: {
                value: Object.freeze(raw)
            }
        }));
    };

    babelHelpers.toArray = function(arr) {
        return Array.isArray(arr) ? arr : Array.from(arr);
    };

    babelHelpers.toConsumableArray = function(arr) {
        if (Array.isArray(arr)) {
            for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];

            return arr2;
        } else {
            return Array.from(arr);
        }
    };
})(window);; /******/
(function(modules) { // webpackBootstrap
    /******/ // The module cache
    /******/
    var installedModules = {};

    /******/ // The require function
    /******/
    function __webpack_require__(moduleId) {

        /******/ // Check if module is in cache
        /******/
        if (installedModules[moduleId])
        /******/
            return installedModules[moduleId].exports;

        /******/ // Create a new module (and put it into the cache)
        /******/
        var module = installedModules[moduleId] = {
            /******/
            exports: {},
            /******/
            id: moduleId,
            /******/
            loaded: false
                /******/
        };

        /******/ // Execute the module function
        /******/
        modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

        /******/ // Flag the module as loaded
        /******/
        module.loaded = true;

        /******/ // Return the exports of the module
        /******/
        return module.exports;
        /******/
    }


    /******/ // expose the modules object (__webpack_modules__)
    /******/
    __webpack_require__.m = modules;

    /******/ // expose the module cache
    /******/
    __webpack_require__.c = installedModules;

    /******/ // __webpack_public_path__
    /******/
    __webpack_require__.p = "/examples/flux/js/";

    /******/ // Load entry module and return exports
    /******/
    return __webpack_require__(0);
    /******/
})
/************************************************************************/
/******/
([
    /* 0 */
    /***/
    function(module, exports, __webpack_require__) {

        /* WEBPACK VAR INJECTION */
        (function(global) {



            __webpack_require__(1);
            __webpack_require__(2);

            module.exports = global.ReactWeb = __webpack_require__(6);
            /* WEBPACK VAR INJECTION */
        }.call(exports, (function() {
            return this;
        }())))

        /***/
    },
    /* 1 */
    /***/
    function(module, exports, __webpack_require__) {

        /* WEBPACK VAR INJECTION */
        (function(global) {



            var pro = global.process = global.process || typeof(process) !== 'undefined' && (process) || {
                browser: true,
                env: {
                    NODE_ENV: 'production'
                }
            };


            if (pro.browser) pro.iosSafari = !!navigator.userAgent.match(/(iPhone|iPad)[\s\S]*(Safari)/gi);

            module.exports = pro;
            /* WEBPACK VAR INJECTION */
        }.call(exports, (function() {
            return this;
        }())))

        /***/
    },
    /* 2 */
    /***/
    function(module, exports, __webpack_require__) {

        /* WEBPACK VAR INJECTION */
        (function(global) {


            'use strict';



            var Promise = global.Promise = global.Promise || __webpack_require__(3);
            var prototype = Promise.prototype;
            [
                [
                    'done',
                    function(cb) {
                        return this.then(cb);
                    }
                ],

                [
                    'always',
                    function(cb) {
                        return this.then(cb, cb);
                    }
                ],

                [
                    'fail',
                    function(cb) {
                        return this.then(null, cb);
                    }
                ]
            ].

            forEach(function(fill) {
                prototype[fill[0]] = prototype[fill[0]] || fill[1];
            });

            module.exports = Promise;
            /* WEBPACK VAR INJECTION */
        }.call(exports, (function() {
            return this;
        }())))

        /***/
    },
    /* 3 */
    /***/
    function(module, exports, __webpack_require__) {

        'use strict';



        var Promise = __webpack_require__(4);

        module.exports = Promise;



        var TRUE = valuePromise(true);
        var FALSE = valuePromise(false);
        var NULL = valuePromise(null);
        var UNDEFINED = valuePromise(undefined);
        var ZERO = valuePromise(0);
        var EMPTYSTRING = valuePromise('');

        function valuePromise(value) {
            var p = new Promise(Promise._61);
            p._81 = 1;
            p._65 = value;
            return p;
        }
        Promise.resolve = function(value) {
            if (value instanceof Promise) return value;

            if (value === null) return NULL;
            if (value === undefined) return UNDEFINED;
            if (value === true) return TRUE;
            if (value === false) return FALSE;
            if (value === 0) return ZERO;
            if (value === '') return EMPTYSTRING;

            if (typeof value === 'object' || typeof value === 'function') {
                try {
                    var then = value.then;
                    if (typeof then === 'function') {
                        return new Promise(then.bind(value));
                    }
                } catch (ex) {
                    return new Promise(function(resolve, reject) {
                        reject(ex);
                    });
                }
            }
            return valuePromise(value);
        };

        Promise.all = function(arr) {
            var args = Array.prototype.slice.call(arr);

            return new Promise(function(resolve, reject) {
                if (args.length === 0) return resolve([]);
                var remaining = args.length;

                function res(i, val) {
                    if (val && (typeof val === 'object' || typeof val === 'function')) {
                        if (val instanceof Promise && val.then === Promise.prototype.then) {
                            while (val._81 === 3) {
                                val = val._65;
                            }
                            if (val._81 === 1) return res(i, val._65);
                            if (val._81 === 2) reject(val._65);
                            val.then(function(val) {
                                res(i, val);
                            }, reject);
                            return;
                        } else {
                            var then = val.then;
                            if (typeof then === 'function') {
                                var p = new Promise(then.bind(val));
                                p.then(function(val) {
                                    res(i, val);
                                }, reject);
                                return;
                            }
                        }
                    }
                    args[i] = val;
                    if (--remaining === 0) {
                        resolve(args);
                    }
                }
                for (var i = 0; i < args.length; i++) {
                    res(i, args[i]);
                }
            });
        };

        Promise.reject = function(value) {
            return new Promise(function(resolve, reject) {
                reject(value);
            });
        };

        Promise.race = function(values) {
            return new Promise(function(resolve, reject) {
                values.forEach(function(value) {
                    Promise.resolve(value).then(resolve, reject);
                });
            });
        };



        Promise.prototype['catch'] = function(onRejected) {
            return this.then(null, onRejected);
        };

        /***/
    },
    /* 4 */
    /***/
    function(module, exports, __webpack_require__) {

        'use strict';

        var asap = __webpack_require__(5);

        function noop() {}



        var LAST_ERROR = null;
        var IS_ERROR = {};

        function getThen(obj) {
            try {
                return obj.then;
            } catch (ex) {
                LAST_ERROR = ex;
                return IS_ERROR;
            }
        }

        function tryCallOne(fn, a) {
            try {
                return fn(a);
            } catch (ex) {
                LAST_ERROR = ex;
                return IS_ERROR;
            }
        }

        function tryCallTwo(fn, a, b) {
            try {
                fn(a, b);
            } catch (ex) {
                LAST_ERROR = ex;
                return IS_ERROR;
            }
        }

        module.exports = Promise;

        function Promise(fn) {
            if (typeof this !== 'object') {
                throw new TypeError('Promises must be constructed via new');
            }
            if (typeof fn !== 'function') {
                throw new TypeError('not a function');
            }
            this._45 = 0;
            this._81 = 0;
            this._65 = null;
            this._54 = null;
            this.cancel = noop;
            if (fn === noop) return;
            var resolve, reject,
                fac = function fac(rs, rj) {
                    resolve = rs;
                    reject = rj;
                    fn(rs, rj);
                },
                me = this;
            this.cancel = function(err) {
                reject && reject(err);
            };
            doResolve(fac, this);
        }
        Promise._10 = null;
        Promise._97 = null;
        Promise._61 = noop;

        Promise.prototype.then = function(onFulfilled, onRejected) {
            if (this.constructor !== Promise) {
                return safeThen(this, onFulfilled, onRejected);
            }
            var res = new Promise(noop),
                me = this;
            handle(this, new Handler(onFulfilled, onRejected, res));

            if (this.cancel && this.cancel != noop) {
                if (res._cancel) {
                    var me = this;
                    res.cancel = function(err) {
                        me.cancel && me.cancel(err);
                        res._cancel && res._cancel(err);
                        me = res = null;
                    };
                } else {
                    res.cancel = this.cancel;
                }
            } else {
                res.cancel = res._cancel || noop;
            }
            return res;
        };

        function safeThen(self, onFulfilled, onRejected) {
            return new self.constructor(function(resolve, reject) {
                var res = new Promise(noop);
                res.then(resolve, reject);
                handle(self, new Handler(onFulfilled, onRejected, res));
            });
        };

        function handle(self, deferred) {
            while (self._81 === 3) {
                self = self._65;
            }
            if (Promise._10) {
                Promise._10(self);
            }
            if (self._81 === 0) {
                if (self._45 === 0) {
                    self._45 = 1;
                    self._54 = deferred;
                    return;
                }
                if (self._45 === 1) {
                    self._45 = 2;
                    self._54 = [self._54, deferred];
                    return;
                }
                self._54.push(deferred);
                return;
            }
            handleResolved(self, deferred);
        }

        function handleResolved(self, deferred) {
            asap(function() {
                var cb = self._81 === 1 ? deferred.onFulfilled : deferred.onRejected;
                if (cb === null) {
                    if (self._81 === 1) {
                        resolve(deferred.promise, self._65);
                    } else {
                        reject(deferred.promise, self._65);
                    }
                    return;
                }
                var ret = tryCallOne(cb, self._65);
                if (ret === IS_ERROR) {
                    reject(deferred.promise, LAST_ERROR);
                } else {
                    resolve(deferred.promise, ret);
                }
            });
        }

        function resolve(self, newValue) {

            if (newValue === self) {
                return reject(
                    self,
                    new TypeError('A promise cannot be resolved with itself.'));

            }
            if (
                newValue && (
                    typeof newValue === 'object' || typeof newValue === 'function')) {
                var then = getThen(newValue);
                if (then === IS_ERROR) {
                    return reject(self, LAST_ERROR);
                }
                if (
                    then === self.then &&
                    newValue instanceof Promise) {
                    if (newValue.cancel) self._cancel = newValue.cancel;
                    self._81 = 3;
                    self._65 = newValue;
                    finale(self);
                    return;
                } else if (typeof then === 'function') {
                    doResolve(then.bind(newValue), self);
                    return;
                }
            }
            self._81 = 1;
            self._65 = newValue;
            finale(self);
        }

        function reject(self, newValue) {
            self._81 = 2;
            self._65 = newValue;
            if (Promise._97) {
                Promise._97(self, newValue);
            }
            finale(self);
        }

        function finale(self) {
            self.cancel = noop;
            if (self._45 === 1) {
                handle(self, self._54);
                self._54 = null;
            }
            if (self._45 === 2) {
                for (var i = 0; i < self._54.length; i++) {
                    handle(self, self._54[i]);
                }
                self._54 = null;
            }
        }

        function Handler(onFulfilled, onRejected, promise) {
            this.onFulfilled = typeof onFulfilled === 'function' ? onFulfilled : null;
            this.onRejected = typeof onRejected === 'function' ? onRejected : null;
            this.promise = promise;
        }



        function doResolve(fn, promise) {
            var done = false;
            var res = tryCallTwo(fn, function(value) {
                if (done) return;
                done = true;
                resolve(promise, value);
            }, function(reason) {
                if (done) return;
                done = true;
                reject(promise, reason);
            });
            if (!done && res === IS_ERROR) {
                done = true;
                reject(promise, LAST_ERROR);
            }
        }

        /***/
    },
    /* 5 */
    /***/
    function(module, exports, __webpack_require__) {

        "use strict";

        module.exports = rawAsap;

        function rawAsap(task) {
            if (!queue.length) {
                requestFlush();
            }

            queue[queue.length] = task;
        }

        var queue = [];
        var index = 0;
        var capacity = 1024;

        function flush() {
            while (index < queue.length) {
                var currentIndex = index;
                index = index + 1;
                queue[currentIndex].call();
                if (index > capacity) {
                    for (var scan = 0, newLength = queue.length - index; scan < newLength; scan++) {
                        queue[scan] = queue[scan + index];
                    }
                    queue.length -= index;
                    index = 0;
                }
            }
            queue.length = 0;
            index = 0;
        }

        rawAsap.requestFlush = requestFlush;

        function requestFlush() {
            (setImmediate)(flush);
        }

        /***/
    },
    /* 6 */
    /***/
    function(module, exports, __webpack_require__) {



        __webpack_require__(7);
        __webpack_require__(2);


        __webpack_require__(8);
        __webpack_require__(24);

        var ReactWeb = {
            findNodeHandle: __webpack_require__(188),



            ActivityIndicator: __webpack_require__(191),
            ActivityIndicatorIOS: __webpack_require__(191),
            DatePicker: __webpack_require__(192),
            DatePickerIOS: __webpack_require__(192),
            Image: __webpack_require__(202),


            get ListView() {
                return __webpack_require__(203);
            },

            Modal: __webpack_require__(231),
            Navigator: __webpack_require__(232),
            NavigatorIOS: __webpack_require__(232),
            Picker: __webpack_require__(194),
            PickerIOS: __webpack_require__(194),
            ProgressBar: __webpack_require__(319),
            ProgressBarAndroid: __webpack_require__(319),
            ProgressView: __webpack_require__(324),
            ProgressViewIOS: __webpack_require__(324),
            get TabBar() {
                return __webpack_require__(325);
            },
            get Button() {
                return __webpack_require__(327);
            },
            get TabBarItem() {
                return __webpack_require__(326);
            },

            get RefreshControl() {
                return __webpack_require__(328);
            },
            ScrollView: __webpack_require__(329),
            Slider: __webpack_require__(333),
            SliderIOS: __webpack_require__(333),
            SegmentedControlIOS: __webpack_require__(334),


            Switch: __webpack_require__(335),
            SwitchAndroid: __webpack_require__(335),
            SwitchIOS: __webpack_require__(335),


            Text: __webpack_require__(67),
            TextInput: __webpack_require__(331),

            TouchableHighlight: __webpack_require__(185),

            TouchableOpacity: __webpack_require__(336),
            TouchableWithoutFeedback: __webpack_require__(187),
            View: __webpack_require__(27),
            ViewPager: __webpack_require__(349),
            ViewPagerAndroid: __webpack_require__(349),
            WebView: __webpack_require__(350),



            ActionSheet: __webpack_require__(352),
            ActionSheetIOS: __webpack_require__(352),

            Alert: __webpack_require__(26),
            AlertIOS: __webpack_require__(26),
            Animated: __webpack_require__(337),
            AppRegistry: __webpack_require__(74),
            AppState: __webpack_require__(353),
            AsyncStorage: __webpack_require__(354),

            CameraRoll: __webpack_require__(355),
            Clipboard: __webpack_require__(358),

            Dimensions: __webpack_require__(52),
            Easing: __webpack_require__(339),
            Geolocation: __webpack_require__(360),
            ImageEditor: __webpack_require__(361),
            ImagePicker: __webpack_require__(356),
            ImagePickerIOS: __webpack_require__(356),
            ImageStore: __webpack_require__(357),
            InteractionManager: __webpack_require__(342),


            LayoutAnimation: __webpack_require__(362),
            Linking: __webpack_require__(363),
            LinkingIOS: __webpack_require__(363),
            NativeMethodsMixin: __webpack_require__(54),
            NativeModules: __webpack_require__(320),
            NetInfo: __webpack_require__(364),
            PanResponder: __webpack_require__(195),
            PixelRatio: __webpack_require__(51),



            StyleSheet: __webpack_require__(39),

            TimePicker: __webpack_require__(192),
            TimePickerAndroid: __webpack_require__(192),
            Toast: __webpack_require__(359),
            ToastAndroid: __webpack_require__(359),
            Vibration: __webpack_require__(365),
            VibrationIOS: __webpack_require__(365),


            PickerView: __webpack_require__(193),
            AssetRegistry: __webpack_require__(366),
            EventEmitter: __webpack_require__(76),
            DeviceEventEmitter: __webpack_require__(75),
            Platform: __webpack_require__(311),
            processColor: __webpack_require__(367),
            FontLoader: __webpack_require__(82),
            fetch: __webpack_require__(351),
            BackAndroid: __webpack_require__(368),
            UIManager: __webpack_require__(55)
        };



        var ReactNative = __webpack_require__(10);
        for (var key in ReactNative) {
            ReactWeb[key] = ReactNative[key];
        }



        module.exports = ReactWeb;

        /***/
    },
    /* 7 */
    /***/
    function(module, exports, __webpack_require__) {

        /* WEBPACK VAR INJECTION */
        (function(global) {



            if (!Array.prototype.fill) {
                var fill = function fill(value) {
                    var start;
                    if (arguments.length > 1) {
                        start = arguments[1];
                    }
                    var end;
                    if (arguments.length > 2) {
                        end = arguments[2];
                    }
                    var len = this.length;
                    start = typeof start === 'undefined' ? 0 : start;
                    end = typeof end === 'undefined' ? len : end;

                    var relativeStart = start < 0 ? Math.max(len + start, 0) : Math.min(start, len);
                    var relativeEnd = end < 0 ? len + end : end;

                    for (var i = relativeStart; i < len && i < relativeEnd; ++i) {
                        this[i] = value;
                    }
                    return this;
                };

                Object.defineProperty(Array.prototype, 'fill', {
                    enumerable: false,
                    writable: true,
                    configurable: true,
                    value: fill
                });

            }

            (function(win) {
                if (!win.setImmediate) {
                    win.setImmediate = function(cb) {
                        return setTimeout(cb, 0);
                    };
                    win.clearImmediate = clearTimeout;
                }
                (process).nextTick = (process).nextTick || win.setImmediate;
                var lastTime = 0;
                var vendors = ['webkit', 'ms', 'moz', 'o'];
                for (var x = 0; x < vendors.length && !win.requestAnimationFrame; ++x) {
                    win.requestAnimationFrame = win[vendors[x] + 'RequestAnimationFrame'];
                    win.cancelAnimationFrame = win[vendors[x] + 'CancelAnimationFrame'] || win[vendors[x] + 'CancelRequestAnimationFrame'];
                }
                if (!win.requestAnimationFrame) {
                    win.requestAnimationFrame = function(callback, element) {
                        var currTime = new Date().getTime();
                        var timeToCall = Math.max(0, 16 - (currTime - lastTime));
                        var id = win.setTimeout(function() {
                            callback(currTime + timeToCall);
                        }, timeToCall);
                        lastTime = currTime + timeToCall;
                        return id;
                    };
                    win.cancelAnimationFrame = clearTimeout;
                }
            })(global);
            /* WEBPACK VAR INJECTION */
        }.call(exports, (function() {
            return this;
        }())))

        /***/
    },
    /* 8 */
    /***/
    function(module, exports, __webpack_require__) {


        var EventConstants = __webpack_require__(9);
        var EventPluginRegistry = __webpack_require__(11);
        var ResponderEventPlugin = __webpack_require__(12);
        var ResponderTouchHistoryStore = __webpack_require__(17);
        var normalizeNativeEvent = __webpack_require__(23);
        var _EventConstants$topLe =



            EventConstants.topLevelTypes,
            topMouseMove = _EventConstants$topLe.topMouseMove,
            topMouseUp = _EventConstants$topLe.topMouseUp,
            topMouseDown = _EventConstants$topLe.topMouseDown,
            topScroll = _EventConstants$topLe.topScroll,
            topSelectionChange = _EventConstants$topLe.topSelectionChange,
            topTouchCancel = _EventConstants$topLe.topTouchCancel,
            topTouchEnd = _EventConstants$topLe.topTouchEnd,
            topTouchMove = _EventConstants$topLe.topTouchMove,
            topTouchStart = _EventConstants$topLe.topTouchStart;

        var touchSupport = EventConstants.touchSupport;
        var endDependencies = touchSupport ? [topTouchCancel, topTouchEnd] : [topMouseUp];
        var moveDependencies = touchSupport ? [topTouchMove] : [topMouseMove];
        var startDependencies = touchSupport ? [topTouchStart] : [topMouseDown];



        ResponderEventPlugin.eventTypes.responderMove.dependencies = moveDependencies;
        ResponderEventPlugin.eventTypes.responderEnd.dependencies = endDependencies;
        ResponderEventPlugin.eventTypes.responderStart.dependencies = startDependencies;
        ResponderEventPlugin.eventTypes.responderRelease.dependencies = endDependencies;
        ResponderEventPlugin.eventTypes.responderTerminationRequest.dependencies = [];
        ResponderEventPlugin.eventTypes.responderGrant.dependencies = [];
        ResponderEventPlugin.eventTypes.responderReject.dependencies = [];
        ResponderEventPlugin.eventTypes.responderTerminate.dependencies = [];
        ResponderEventPlugin.eventTypes.moveShouldSetResponder.dependencies = moveDependencies;
        ResponderEventPlugin.eventTypes.selectionChangeShouldSetResponder.dependencies = [topSelectionChange];
        ResponderEventPlugin.eventTypes.scrollShouldSetResponder.dependencies = [topScroll];
        ResponderEventPlugin.eventTypes.startShouldSetResponder.dependencies = startDependencies;

        var originalRecordTouchTrack = ResponderTouchHistoryStore.recordTouchTrack;

        ResponderTouchHistoryStore.recordTouchTrack = function(topLevelType, nativeEvent) {

            if (topLevelType === topMouseMove && !ResponderEventPlugin.isMouseDown) {
                return;
            }
            originalRecordTouchTrack.call(ResponderTouchHistoryStore, topLevelType, normalizeNativeEvent(nativeEvent));
        };

        EventPluginRegistry.injectEventPluginsByName({
            ResponderEventPlugin: ResponderEventPlugin
        });

        /***/
    },
    /* 9 */
    /***/
    function(module, exports, __webpack_require__) {



        module.exports = __webpack_require__(10).EventConstants;

        /***/
    },
    /* 10 */
    /***/
    function(module, exports) {

        module.exports = qreact;

        /***/
    },
    /* 11 */
    /***/
    function(module, exports, __webpack_require__) {



        module.exports = __webpack_require__(10).EventPluginRegistry;

        /***/
    },
    /* 12 */
    /***/
    function(module, exports, __webpack_require__) {



        'use strict';

        var EventConstants = __webpack_require__(9);
        var _EventConstants$topLe =



            EventConstants.topLevelTypes,
            topMouseMove = _EventConstants$topLe.topMouseMove,
            topMouseUp = _EventConstants$topLe.topMouseUp,
            topMouseDown = _EventConstants$topLe.topMouseDown;
        var touchSupport = EventConstants.touchSupport;

        var EventPluginUtils = __webpack_require__(13);
        var EventPropagators = __webpack_require__(14);
        var ResponderSyntheticEvent = __webpack_require__(15);
        var ResponderTouchHistoryStore = __webpack_require__(17);

        var accumulate = __webpack_require__(22);

        var isStartish = EventPluginUtils.isStartish;
        var isMoveish = EventPluginUtils.isMoveish;
        var isEndish = EventPluginUtils.isEndish;
        var executeDirectDispatch = EventPluginUtils.executeDirectDispatch;
        var hasDispatches = EventPluginUtils.hasDispatches;
        var executeDispatchesInOrderStopAtTrue = EventPluginUtils.executeDispatchesInOrderStopAtTrue;



        var responderInst = null;



        var trackedTouchCount = 0;



        var previousActiveTouches = 0;

        var changeResponder = function changeResponder(nextResponderInst, blockHostResponder) {
            var oldResponderInst = responderInst;
            responderInst = nextResponderInst;
            if (ResponderEventPlugin.GlobalResponderHandler !== null) {
                ResponderEventPlugin.GlobalResponderHandler.onChange(oldResponderInst, nextResponderInst, blockHostResponder);
            }
        };

        var eventTypes = {



            startShouldSetResponder: {
                phasedRegistrationNames: {
                    bubbled: 'onStartShouldSetResponder',
                    captured: 'onStartShouldSetResponderCapture'
                }
            },



            scrollShouldSetResponder: {
                phasedRegistrationNames: {
                    bubbled: 'onScrollShouldSetResponder',
                    captured: 'onScrollShouldSetResponderCapture'
                }
            },



            selectionChangeShouldSetResponder: {
                phasedRegistrationNames: {
                    bubbled: 'onSelectionChangeShouldSetResponder',
                    captured: 'onSelectionChangeShouldSetResponderCapture'
                }
            },



            moveShouldSetResponder: {
                phasedRegistrationNames: {
                    bubbled: 'onMoveShouldSetResponder',
                    captured: 'onMoveShouldSetResponderCapture'
                }
            },



            responderStart: {
                registrationName: 'onResponderStart'
            },
            responderMove: {
                registrationName: 'onResponderMove'
            },
            responderEnd: {
                registrationName: 'onResponderEnd'
            },
            responderRelease: {
                registrationName: 'onResponderRelease'
            },
            responderTerminationRequest: {
                registrationName: 'onResponderTerminationRequest'
            },

            responderGrant: {
                registrationName: 'onResponderGrant'
            },
            responderReject: {
                registrationName: 'onResponderReject'
            },
            responderTerminate: {
                registrationName: 'onResponderTerminate'
            }
        };



        function setResponderAndExtractTransfer(topLevelType, targetInst, nativeEvent, nativeEventTarget) {

            if (topLevelType === topMouseMove && !ResponderEventPlugin.isMouseDown) return null;
            var shouldSetEventType = isStartish(topLevelType) ? eventTypes.startShouldSetResponder : isMoveish(topLevelType) ? eventTypes.moveShouldSetResponder : topLevelType === 'topSelectionChange' ?
                eventTypes.selectionChangeShouldSetResponder : eventTypes.scrollShouldSetResponder;


            var bubbleShouldSetFrom = !responderInst ? targetInst : EventPluginUtils.getLowestCommonAncestor(responderInst, targetInst);



            var skipOverBubbleShouldSetFrom = bubbleShouldSetFrom === responderInst;
            var shouldSetEvent = ResponderSyntheticEvent.getPooled(shouldSetEventType, bubbleShouldSetFrom, nativeEvent, nativeEventTarget);
            shouldSetEvent.touchHistory = ResponderTouchHistoryStore.touchHistory;
            if (skipOverBubbleShouldSetFrom) {
                EventPropagators.accumulateTwoPhaseDispatchesSkipTarget(shouldSetEvent);
            } else {
                EventPropagators.accumulateTwoPhaseDispatches(shouldSetEvent);
            }
            var wantsResponderInst = executeDispatchesInOrderStopAtTrue(shouldSetEvent);
            if (!shouldSetEvent.isPersistent()) {
                shouldSetEvent.constructor.release(shouldSetEvent);
            }

            if (!wantsResponderInst || wantsResponderInst === responderInst) {
                return null;
            }
            var extracted;
            var grantEvent = ResponderSyntheticEvent.getPooled(eventTypes.responderGrant, wantsResponderInst, nativeEvent, nativeEventTarget);
            grantEvent.touchHistory = ResponderTouchHistoryStore.touchHistory;

            EventPropagators.accumulateDirectDispatches(grantEvent);
            var blockHostResponder = executeDirectDispatch(grantEvent) === true;
            if (responderInst) {

                var terminationRequestEvent = ResponderSyntheticEvent.getPooled(eventTypes.responderTerminationRequest, responderInst, nativeEvent, nativeEventTarget);
                terminationRequestEvent.touchHistory = ResponderTouchHistoryStore.touchHistory;
                EventPropagators.accumulateDirectDispatches(terminationRequestEvent);
                var shouldSwitch = !hasDispatches(terminationRequestEvent) || executeDirectDispatch(terminationRequestEvent);
                if (!terminationRequestEvent.isPersistent()) {
                    terminationRequestEvent.constructor.release(terminationRequestEvent);
                }

                if (shouldSwitch) {
                    var terminateEvent = ResponderSyntheticEvent.getPooled(eventTypes.responderTerminate, responderInst, nativeEvent, nativeEventTarget);
                    terminateEvent.touchHistory = ResponderTouchHistoryStore.touchHistory;
                    EventPropagators.accumulateDirectDispatches(terminateEvent);
                    extracted = accumulate(extracted, [grantEvent, terminateEvent]);
                    changeResponder(wantsResponderInst, blockHostResponder);
                } else {
                    var rejectEvent = ResponderSyntheticEvent.getPooled(eventTypes.responderReject, wantsResponderInst, nativeEvent, nativeEventTarget);
                    rejectEvent.touchHistory = ResponderTouchHistoryStore.touchHistory;
                    EventPropagators.accumulateDirectDispatches(rejectEvent);
                    extracted = accumulate(extracted, rejectEvent);
                }
            } else {
                extracted = accumulate(extracted, grantEvent);
                changeResponder(wantsResponderInst, blockHostResponder);
            }
            return extracted;
        }



        function canTriggerTransfer(topLevelType, topLevelInst, nativeEvent) {
            return topLevelInst && (



                topLevelType === 'topScroll' && !nativeEvent.responderIgnoreScroll || trackedTouchCount > 0 && topLevelType === 'topSelectionChange' || isStartish(topLevelType) || isMoveish(topLevelType));
        }



        function noResponderTouches(nativeEvent) {
            var touches = nativeEvent.touches;
            if (!touches || touches.length === 0) {
                return true;
            }
            for (var i = 0; i < touches.length; i++) {
                var activeTouch = touches[i];
                var target = activeTouch.target;
                if (target !== null && target !== undefined && target !== 0) {

                    var targetInst = EventPluginUtils.getInstanceFromNode(target);
                    if (EventPluginUtils.isAncestor(responderInst, targetInst)) {
                        return false;
                    }
                }
            }
            return true;
        }
        var ResponderEventPlugin = {
            isMouseDown: touchSupport,

            _getResponderID: function _getResponderID() {
                return responderInst ? responderInst._rootNodeID : null;
            },

            eventTypes: eventTypes,



            extractEvents: function extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
                switch (topLevelType) {
                    case topMouseDown:
                        ResponderEventPlugin.isMouseDown = true;
                        break;

                    case topMouseUp:
                        if (!ResponderEventPlugin.isMouseDown) return null;
                        ResponderEventPlugin.isMouseDown = false;
                        break;
                }

                if (isStartish(topLevelType)) {
                    trackedTouchCount += 1;
                } else if (isEndish(topLevelType)) {
                    if (trackedTouchCount >= 0) {
                        trackedTouchCount -= 1;
                    } else {
                        console.error('Ended a touch event which was not counted in `trackedTouchCount`.');
                        return null;
                    }
                }
                ResponderTouchHistoryStore.recordTouchTrack(topLevelType, nativeEvent);

                var extracted = canTriggerTransfer(topLevelType, targetInst, nativeEvent) ? setResponderAndExtractTransfer(topLevelType, targetInst, nativeEvent, nativeEventTarget) : null;



                var isResponderTouchStart = responderInst && isStartish(topLevelType);
                var isResponderTouchMove = responderInst && isMoveish(topLevelType) && ResponderEventPlugin.isMouseDown;
                var isResponderTouchEnd = responderInst && isEndish(topLevelType);
                var incrementalTouch = isResponderTouchStart ? eventTypes.responderStart : isResponderTouchMove ? eventTypes.responderMove : isResponderTouchEnd ? eventTypes.responderEnd : null;

                if (incrementalTouch) {
                    var gesture = ResponderSyntheticEvent.getPooled(incrementalTouch, responderInst, nativeEvent, nativeEventTarget);
                    gesture.touchHistory = ResponderTouchHistoryStore.touchHistory;
                    EventPropagators.accumulateDirectDispatches(gesture);
                    extracted = accumulate(extracted, gesture);
                }

                var isResponderTerminate = responderInst && topLevelType === 'topTouchCancel';
                var isResponderRelease = responderInst && !isResponderTerminate && isEndish(topLevelType) && noResponderTouches(nativeEvent);
                var finalTouch = isResponderTerminate ? eventTypes.responderTerminate : isResponderRelease ? eventTypes.responderRelease : null;
                if (finalTouch) {
                    var finalEvent = ResponderSyntheticEvent.getPooled(finalTouch, responderInst, nativeEvent, nativeEventTarget);
                    finalEvent.touchHistory = ResponderTouchHistoryStore.touchHistory;
                    EventPropagators.accumulateDirectDispatches(finalEvent);
                    extracted = accumulate(extracted, finalEvent);
                    changeResponder(null);
                }

                var numberActiveTouches = ResponderTouchHistoryStore.touchHistory.numberActiveTouches;
                if (ResponderEventPlugin.GlobalInteractionHandler && numberActiveTouches !== previousActiveTouches) {
                    ResponderEventPlugin.GlobalInteractionHandler.onChange(numberActiveTouches);
                }
                previousActiveTouches = numberActiveTouches;

                return extracted;
            },

            GlobalResponderHandler: null,
            GlobalInteractionHandler: null,

            injection: {



                injectGlobalResponderHandler: function injectGlobalResponderHandler(GlobalResponderHandler) {
                    ResponderEventPlugin.GlobalResponderHandler = GlobalResponderHandler;
                },



                injectGlobalInteractionHandler: function injectGlobalInteractionHandler(GlobalInteractionHandler) {
                    ResponderEventPlugin.GlobalInteractionHandler = GlobalInteractionHandler;
                }
            }
        };



        module.exports = __webpack_require__(10).ResponderEventPlugin = ResponderEventPlugin;

        /***/
    },
    /* 13 */
    /***/
    function(module, exports, __webpack_require__) {



        module.exports = __webpack_require__(10).EventPluginUtils;

        /***/
    },
    /* 14 */
    /***/
    function(module, exports, __webpack_require__) {



        module.exports = __webpack_require__(10).EventPropagators;

        /***/
    },
    /* 15 */
    /***/
    function(module, exports, __webpack_require__) {



        'use strict';

        var SyntheticEvent = __webpack_require__(16);



        var ResponderEventInterface = {
            touchHistory: function touchHistory(nativeEvent) {
                return null;
            }
        };



        function ResponderSyntheticEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
            return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
        }

        SyntheticEvent.augmentClass(ResponderSyntheticEvent, ResponderEventInterface);

        module.exports = __webpack_require__(10).ResponderSyntheticEvent = ResponderSyntheticEvent;

        /***/
    },
    /* 16 */
    /***/
    function(module, exports, __webpack_require__) {

        module.exports = __webpack_require__(10).SyntheticEvent;

        /***/
    },
    /* 17 */
    /***/
    function(module, exports, __webpack_require__) {



        'use strict';

        var _prodInvariant = __webpack_require__(18);

        var EventPluginUtils = __webpack_require__(13);

        var invariant = __webpack_require__(19);
        var warning = __webpack_require__(20);

        var isEndish = EventPluginUtils.isEndish;
        var isMoveish = EventPluginUtils.isMoveish;
        var isStartish = EventPluginUtils.isStartish;



        var MAX_TOUCH_BANK = 20;
        var touchBank = [];
        var touchHistory = {
            touchBank: touchBank,
            numberActiveTouches: 0,



            indexOfSingleActiveTouch: -1,
            mostRecentTimeStamp: 0
        };


        function timestampForTouch(touch) {



            return touch.timeStamp || touch.timestamp;
        }



        function createTouchRecord(touch) {
            return {
                touchActive: true,
                startPageX: touch.pageX,
                startPageY: touch.pageY,
                startTimeStamp: timestampForTouch(touch),
                currentPageX: touch.pageX,
                currentPageY: touch.pageY,
                currentTimeStamp: timestampForTouch(touch),
                previousPageX: touch.pageX,
                previousPageY: touch.pageY,
                previousTimeStamp: timestampForTouch(touch)
            };

        }

        function resetTouchRecord(touchRecord, touch) {
            touchRecord.touchActive = true;
            touchRecord.startPageX = touch.pageX;
            touchRecord.startPageY = touch.pageY;
            touchRecord.startTimeStamp = timestampForTouch(touch);
            touchRecord.currentPageX = touch.pageX;
            touchRecord.currentPageY = touch.pageY;
            touchRecord.currentTimeStamp = timestampForTouch(touch);
            touchRecord.previousPageX = touch.pageX;
            touchRecord.previousPageY = touch.pageY;
            touchRecord.previousTimeStamp = timestampForTouch(touch);
        }

        function getTouchIdentifier(_ref) {
            var identifier = _ref.identifier;

            !(identifier != null) ? false ? invariant(false, 'Touch object is missing identifier.') : _prodInvariant('138'): void 0;
            false ? warning(identifier <= MAX_TOUCH_BANK, 'Touch identifier %s is greater than maximum supported %s which causes ' + 'performance issues backfilling array locations for all of the indices.', identifier, MAX_TOUCH_BANK) : void 0;
            return identifier;
        }

        function recordTouchStart(touch) {
            var identifier = getTouchIdentifier(touch);
            var touchRecord = touchBank[identifier];
            if (touchRecord) {
                resetTouchRecord(touchRecord, touch);
            } else {
                touchBank[identifier] = createTouchRecord(touch);
            }
            touchHistory.mostRecentTimeStamp = timestampForTouch(touch);
        }

        function recordTouchMove(touch) {
            var touchRecord = touchBank[getTouchIdentifier(touch)];
            if (touchRecord) {
                touchRecord.touchActive = true;
                touchRecord.previousPageX = touchRecord.currentPageX;
                touchRecord.previousPageY = touchRecord.currentPageY;
                touchRecord.previousTimeStamp = touchRecord.currentTimeStamp;
                touchRecord.currentPageX = touch.pageX;
                touchRecord.currentPageY = touch.pageY;
                touchRecord.currentTimeStamp = timestampForTouch(touch);
                touchHistory.mostRecentTimeStamp = timestampForTouch(touch);
            } else {
                console.error('Cannot record touch move without a touch start.\n' + 'Touch Move: %s\n', 'Touch Bank: %s', printTouch(touch), printTouchBank());
            }
        }

        function recordTouchEnd(touch) {
            var touchRecord = touchBank[getTouchIdentifier(touch)];
            if (touchRecord) {
                touchRecord.touchActive = false;
                touchRecord.previousPageX = touchRecord.currentPageX;
                touchRecord.previousPageY = touchRecord.currentPageY;
                touchRecord.previousTimeStamp = touchRecord.currentTimeStamp;
                touchRecord.currentPageX = touch.pageX;
                touchRecord.currentPageY = touch.pageY;
                touchRecord.currentTimeStamp = timestampForTouch(touch);
                touchHistory.mostRecentTimeStamp = timestampForTouch(touch);
            } else {
                console.error('Cannot record touch end without a touch start.\n' + 'Touch End: %s\n', 'Touch Bank: %s', printTouch(touch), printTouchBank());
            }
        }

        function printTouch(touch) {
            return JSON.stringify({
                identifier: touch.identifier,
                pageX: touch.pageX,
                pageY: touch.pageY,
                timestamp: timestampForTouch(touch)
            });

        }

        function printTouchBank() {
            var printed = JSON.stringify(touchBank.slice(0, MAX_TOUCH_BANK));
            if (touchBank.length > MAX_TOUCH_BANK) {
                printed += ' (original size: ' + touchBank.length + ')';
            }
            return printed;
        }

        var ResponderTouchHistoryStore = {
            recordTouchTrack: function recordTouchTrack(topLevelType, nativeEvent) {
                if (isMoveish(topLevelType)) {
                    nativeEvent.changedTouches.forEach(recordTouchMove);
                } else if (isStartish(topLevelType)) {
                    nativeEvent.changedTouches.forEach(recordTouchStart);
                    touchHistory.numberActiveTouches = nativeEvent.touches.length;
                    if (touchHistory.numberActiveTouches === 1) {
                        touchHistory.indexOfSingleActiveTouch = nativeEvent.touches[0].identifier;
                    }
                } else if (isEndish(topLevelType)) {
                    nativeEvent.changedTouches.forEach(recordTouchEnd);
                    touchHistory.numberActiveTouches = nativeEvent.touches.length;
                    if (touchHistory.numberActiveTouches === 1) {
                        for (var i = 0; i < touchBank.length; i++) {
                            var touchTrackToCheck = touchBank[i];
                            if (touchTrackToCheck != null && touchTrackToCheck.touchActive) {
                                touchHistory.indexOfSingleActiveTouch = i;
                                break;
                            }
                        }
                        if (false) {
                            var activeRecord = touchBank[touchHistory.indexOfSingleActiveTouch];
                            process.env.NODE_ENV !== 'production' ? warning(activeRecord != null && activeRecord.touchActive, 'Cannot find single active touch.') : void 0;
                        }
                    }
                }
            },


            touchHistory: touchHistory
        };


        module.exports = __webpack_require__(10).ResponderTouchHistoryStore = ResponderTouchHistoryStore;

        /***/
    },
    /* 18 */
    /***/
    function(module, exports, __webpack_require__) {



        module.exports = __webpack_require__(10).reactProdInvariant;

        /***/
    },
    /* 19 */
    /***/
    function(module, exports, __webpack_require__) {



        'use strict';



        var validateFormat = function validateFormat(format) {};

        if (false) {
            validateFormat = function validateFormat(format) {
                if (format === undefined) {
                    throw new Error('invariant requires an error message argument');
                }
            };
        }

        function invariant(condition, format, a, b, c, d, e, f) {
            validateFormat(format);

            if (!condition) {
                var error;
                if (format === undefined) {
                    error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
                } else {
                    var args = [a, b, c, d, e, f];
                    var argIndex = 0;
                    error = new Error(format.replace(/%s/g, function() {
                        return args[argIndex++];
                    }));
                    error.name = 'Invariant Violation';
                }

                error.framesToPop = 1;
                throw error;
            }
        }

        module.exports = invariant;

        /***/
    },
    /* 20 */
    /***/
    function(module, exports, __webpack_require__) {



        'use strict';

        var emptyFunction = __webpack_require__(21);



        var warning = emptyFunction;

        if (false) {
            (function() {
                var printWarning = function printWarning(format) {
                    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                        args[_key - 1] = arguments[_key];
                    }

                    var argIndex = 0;
                    var message = 'Warning: ' + format.replace(/%s/g, function() {
                        return args[argIndex++];
                    });
                    if (typeof console !== 'undefined') {
                        console.error(message);
                    }
                    try {



                        throw new Error(message);
                    } catch (x) {}
                };

                warning = function warning(condition, format) {
                    if (format === undefined) {
                        throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
                    }

                    if (format.indexOf('Failed Composite propType: ') === 0) {
                        return;
                    }

                    if (!condition) {
                        for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
                            args[_key2 - 2] = arguments[_key2];
                        }

                        printWarning.apply(undefined, [format].concat(args));
                    }
                };
            })();
        }

        module.exports = warning;

        /***/
    },
    /* 21 */
    /***/
    function(module, exports) {

        "use strict";



        function makeEmptyFunction(arg) {
            return function() {
                return arg;
            };
        }



        var emptyFunction = function emptyFunction() {};

        emptyFunction.thatReturns = makeEmptyFunction;
        emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
        emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
        emptyFunction.thatReturnsNull = makeEmptyFunction(null);
        emptyFunction.thatReturnsThis = function() {
            return this;
        };
        emptyFunction.thatReturnsArgument = function(arg) {
            return arg;
        };

        module.exports = emptyFunction;

        /***/
    },
    /* 22 */
    /***/
    function(module, exports, __webpack_require__) {



        module.exports = __webpack_require__(10).accumulate;

        /***/
    },
    /* 23 */
    /***/
    function(module, exports, __webpack_require__) {



        var normalizeTouches = function normalizeTouches() {
            var touches = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
            return Array.prototype.slice.call(touches).map(function(touch) {
                var identifier = touch.identifier > 20 ? touch.identifier % 20 : touch.identifier;

                var rect = touch.target && touch.target.getBoundingClientRect();
                var locationX = touch.pageX - rect.left;
                var locationY = touch.pageY - rect.top;

                return {
                    clientX: touch.clientX,
                    clientY: touch.clientY,
                    force: touch.force,
                    locationX: locationX,
                    locationY: locationY,
                    identifier: identifier,
                    pageX: touch.pageX,
                    pageY: touch.pageY,
                    radiusX: touch.radiusX,
                    radiusY: touch.radiusY,
                    rotationAngle: touch.rotationAngle,
                    screenX: touch.screenX,
                    screenY: touch.screenY,
                    target: touch.target,


                    timestamp: Date.now()
                };

            });
        };

        function normalizeTouchEvent(nativeEvent) {
            var changedTouches = normalizeTouches(nativeEvent.changedTouches);
            var touches = normalizeTouches(nativeEvent.touches);

            var event = {
                changedTouches: changedTouches,
                type: nativeEvent.type,
                pageX: nativeEvent.pageX,
                pageY: nativeEvent.pageY,
                target: nativeEvent.target,


                timestamp: Date.now(),
                touches: touches
            };


            if (changedTouches[0]) {
                event.identifier = changedTouches[0].identifier;
                event.pageX = changedTouches[0].pageX;
                event.pageY = changedTouches[0].pageY;
                event.locationX = changedTouches[0].locationX;
                event.locationY = changedTouches[0].locationY;
            }

            return event;
        }

        function normalizeMouseEvent(nativeEvent) {
            var touches = [{
                clientX: nativeEvent.clientX,
                clientY: nativeEvent.clientY,
                force: nativeEvent.force,
                locationX: nativeEvent.clientX,
                locationY: nativeEvent.clientY,
                identifier: 0,
                pageX: nativeEvent.pageX,
                pageY: nativeEvent.pageY,
                screenX: nativeEvent.screenX,
                screenY: nativeEvent.screenY,
                target: nativeEvent.target,
                timestamp: nativeEvent.timestamp || Date.now()
            }];

            return {
                type: nativeEvent.type,
                changedTouches: touches,
                identifier: touches[0].identifier,
                locationX: nativeEvent.offsetX,
                locationY: nativeEvent.offsetY,
                pageX: nativeEvent.pageX,
                pageY: nativeEvent.pageY,
                target: nativeEvent.target,
                timestamp: touches[0].timestamp,
                touches: nativeEvent.type === 'mouseup' ? [] : touches
            };

        }

        function normalizeNativeEvent(nativeEvent) {
            var mouse = nativeEvent.type.indexOf('mouse') >= 0;
            return mouse ? normalizeMouseEvent(nativeEvent) : normalizeTouchEvent(nativeEvent);
        }

        module.exports = __webpack_require__(10).normalizeNativeEvent = normalizeNativeEvent;

        /***/
    },
    /* 24 */
    /***/
    function(module, exports, __webpack_require__) {

        /* WEBPACK VAR INJECTION */
        (function(global) {


            __webpack_require__(25);


            global.__OriginAlert = global.alert;
            global.__OriginPrompt = global.prompt;


            setTimeout(function() {
                global.alert = function(content) {
                    __webpack_require__(26).alert('Alert', content, [{
                        text: '确定',
                        onPress: function onPress() {
                            return true;
                        }
                    }]);

                };

                global.prompt = function(title, value, buttons, callback) {
                    __webpack_require__(26).prompt(title, value, buttons, callback);
                };
            });
            /* WEBPACK VAR INJECTION */
        }.call(exports, (function() {
            return this;
        }())))

        /***/
    },
    /* 25 */
    /***/
    function(module, exports, __webpack_require__) {

        /* WEBPACK VAR INJECTION */
        (function(global) {



            ! function(global) {
                "use strict";

                var hasOwn = Object.prototype.hasOwnProperty;
                var undefined;
                var $Symbol = typeof Symbol === "function" ? Symbol : {};
                var iteratorSymbol = $Symbol.iterator || "@@iterator";
                var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

                var inModule = typeof module === "object";
                var runtime = global.regeneratorRuntime;
                if (runtime) {
                    if (inModule) {


                        module.exports = runtime;
                    }


                    return;
                }



                runtime = global.regeneratorRuntime = inModule ? module.exports : {};

                function wrap(innerFn, outerFn, self, tryLocsList) {

                    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
                    var generator = Object.create(protoGenerator.prototype);
                    var context = new Context(tryLocsList || []);



                    generator._invoke = makeInvokeMethod(innerFn, self, context);

                    return generator;
                }
                runtime.wrap = wrap;



                function tryCatch(fn, obj, arg) {
                    try {
                        return {
                            type: "normal",
                            arg: fn.call(obj, arg)
                        };
                    } catch (err) {
                        return {
                            type: "throw",
                            arg: err
                        };
                    }
                }

                var GenStateSuspendedStart = "suspendedStart";
                var GenStateSuspendedYield = "suspendedYield";
                var GenStateExecuting = "executing";
                var GenStateCompleted = "completed";



                var ContinueSentinel = {};



                function Generator() {}

                function GeneratorFunction() {}

                function GeneratorFunctionPrototype() {}

                var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype;
                GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
                GeneratorFunctionPrototype.constructor = GeneratorFunction;
                GeneratorFunctionPrototype[toStringTagSymbol] = GeneratorFunction.displayName = "GeneratorFunction";



                function defineIteratorMethods(prototype) {
                    ["next", "throw", "return"].forEach(function(method) {
                        prototype[method] = function(arg) {
                            return this._invoke(method, arg);
                        };
                    });
                }

                runtime.isGeneratorFunction = function(genFun) {
                    var ctor = typeof genFun === "function" && genFun.constructor;
                    return ctor ?
                        ctor === GeneratorFunction ||


                        (ctor.displayName || ctor.name) === "GeneratorFunction" :
                        false;
                };

                runtime.mark = function(genFun) {
                    if (Object.setPrototypeOf) {
                        Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
                    } else {
                        genFun.__proto__ = GeneratorFunctionPrototype;
                        if (!(toStringTagSymbol in genFun)) {
                            genFun[toStringTagSymbol] = "GeneratorFunction";
                        }
                    }
                    genFun.prototype = Object.create(Gp);
                    return genFun;
                };



                runtime.awrap = function(arg) {
                    return new AwaitArgument(arg);
                };

                function AwaitArgument(arg) {
                    this.arg = arg;
                }

                function AsyncIterator(generator) {
                    function invoke(method, arg, resolve, reject) {
                        var record = tryCatch(generator[method], generator, arg);
                        if (record.type === "throw") {
                            reject(record.arg);
                        } else {
                            var result = record.arg;
                            var value = result.value;
                            if (value instanceof AwaitArgument) {
                                return Promise.resolve(value.arg).then(function(value) {
                                    invoke("next", value, resolve, reject);
                                }, function(err) {
                                    invoke("throw", err, resolve, reject);
                                });
                            }

                            return Promise.resolve(value).then(function(unwrapped) {



                                result.value = unwrapped;
                                resolve(result);
                            }, reject);
                        }
                    }

                    if (typeof(process) === "object" && (process).domain) {
                        invoke = (process).domain.bind(invoke);
                    }

                    var previousPromise;

                    function enqueue(method, arg) {
                        function callInvokeWithMethodAndArg() {
                            return new Promise(function(resolve, reject) {
                                invoke(method, arg, resolve, reject);
                            });
                        }

                        return previousPromise =



                            previousPromise ? previousPromise.then(
                                callInvokeWithMethodAndArg,


                                callInvokeWithMethodAndArg) :
                            callInvokeWithMethodAndArg();
                    }



                    this._invoke = enqueue;
                }

                defineIteratorMethods(AsyncIterator.prototype);



                runtime.async = function(innerFn, outerFn, self, tryLocsList) {
                    var iter = new AsyncIterator(
                        wrap(innerFn, outerFn, self, tryLocsList));


                    return runtime.isGeneratorFunction(outerFn) ?
                        iter :
                        iter.next().then(function(result) {
                            return result.done ? result.value : iter.next();
                        });
                };

                function makeInvokeMethod(innerFn, self, context) {
                    var state = GenStateSuspendedStart;

                    return function invoke(method, arg) {
                        if (state === GenStateExecuting) {
                            throw new Error("Generator is already running");
                        }

                        if (state === GenStateCompleted) {
                            if (method === "throw") {
                                throw arg;
                            }



                            return doneResult();
                        }

                        while (true) {
                            var delegate = context.delegate;
                            if (delegate) {
                                if (method === "return" ||
                                    method === "throw" && delegate.iterator[method] === undefined) {


                                    context.delegate = null;



                                    var returnMethod = delegate.iterator["return"];
                                    if (returnMethod) {
                                        var record = tryCatch(returnMethod, delegate.iterator, arg);
                                        if (record.type === "throw") {


                                            method = "throw";
                                            arg = record.arg;
                                            continue;
                                        }
                                    }

                                    if (method === "return") {


                                        continue;
                                    }
                                }

                                var record = tryCatch(
                                    delegate.iterator[method],
                                    delegate.iterator,
                                    arg);


                                if (record.type === "throw") {
                                    context.delegate = null;



                                    method = "throw";
                                    arg = record.arg;
                                    continue;
                                }



                                method = "next";
                                arg = undefined;

                                var info = record.arg;
                                if (info.done) {
                                    context[delegate.resultName] = info.value;
                                    context.next = delegate.nextLoc;
                                } else {
                                    state = GenStateSuspendedYield;
                                    return info;
                                }

                                context.delegate = null;
                            }

                            if (method === "next") {


                                context.sent = context._sent = arg;

                            } else if (method === "throw") {
                                if (state === GenStateSuspendedStart) {
                                    state = GenStateCompleted;
                                    throw arg;
                                }

                                if (context.dispatchException(arg)) {


                                    method = "next";
                                    arg = undefined;
                                }

                            } else if (method === "return") {
                                context.abrupt("return", arg);
                            }

                            state = GenStateExecuting;

                            var record = tryCatch(innerFn, self, context);
                            if (record.type === "normal") {


                                state = context.done ?
                                    GenStateCompleted :
                                    GenStateSuspendedYield;

                                var info = {
                                    value: record.arg,
                                    done: context.done
                                };


                                if (record.arg === ContinueSentinel) {
                                    if (context.delegate && method === "next") {


                                        arg = undefined;
                                    }
                                } else {
                                    return info;
                                }

                            } else if (record.type === "throw") {
                                state = GenStateCompleted;


                                method = "throw";
                                arg = record.arg;
                            }
                        }
                    };
                }



                defineIteratorMethods(Gp);

                Gp[iteratorSymbol] = function() {
                    return this;
                };

                Gp[toStringTagSymbol] = "Generator";

                Gp.toString = function() {
                    return "[object Generator]";
                };

                function pushTryEntry(locs) {
                    var entry = {
                        tryLoc: locs[0]
                    };

                    if (1 in locs) {
                        entry.catchLoc = locs[1];
                    }

                    if (2 in locs) {
                        entry.finallyLoc = locs[2];
                        entry.afterLoc = locs[3];
                    }

                    this.tryEntries.push(entry);
                }

                function resetTryEntry(entry) {
                    var record = entry.completion || {};
                    record.type = "normal";
                    delete record.arg;
                    entry.completion = record;
                }

                function Context(tryLocsList) {



                    this.tryEntries = [{
                        tryLoc: "root"
                    }];
                    tryLocsList.forEach(pushTryEntry, this);
                    this.reset(true);
                }

                runtime.keys = function(object) {
                    var keys = [];
                    for (var key in object) {
                        keys.push(key);
                    }
                    keys.reverse();



                    return function next() {
                        while (keys.length) {
                            var key = keys.pop();
                            if (key in object) {
                                next.value = key;
                                next.done = false;
                                return next;
                            }
                        }



                        next.done = true;
                        return next;
                    };
                };

                function values(iterable) {
                    if (iterable) {
                        var iteratorMethod = iterable[iteratorSymbol];
                        if (iteratorMethod) {
                            return iteratorMethod.call(iterable);
                        }

                        if (typeof iterable.next === "function") {
                            return iterable;
                        }

                        if (!isNaN(iterable.length)) {
                            var i = -1,
                                next = function next() {
                                    while (++i < iterable.length) {
                                        if (hasOwn.call(iterable, i)) {
                                            next.value = iterable[i];
                                            next.done = false;
                                            return next;
                                        }
                                    }

                                    next.value = undefined;
                                    next.done = true;

                                    return next;
                                };

                            return next.next = next;
                        }
                    }


                    return {
                        next: doneResult
                    };
                }
                runtime.values = values;

                function doneResult() {
                    return {
                        value: undefined,
                        done: true
                    };
                }

                Context.prototype = {
                    constructor: Context,

                    reset: function reset(skipTempReset) {
                        this.prev = 0;
                        this.next = 0;


                        this.sent = this._sent = undefined;
                        this.done = false;
                        this.delegate = null;

                        this.tryEntries.forEach(resetTryEntry);

                        if (!skipTempReset) {
                            for (var name in this) {

                                if (name.charAt(0) === "t" &&
                                    hasOwn.call(this, name) &&
                                    !isNaN(+name.slice(1))) {
                                    this[name] = undefined;
                                }
                            }
                        }
                    },

                    stop: function stop() {
                        this.done = true;

                        var rootEntry = this.tryEntries[0];
                        var rootRecord = rootEntry.completion;
                        if (rootRecord.type === "throw") {
                            throw rootRecord.arg;
                        }

                        return this.rval;
                    },

                    dispatchException: function dispatchException(exception) {
                        if (this.done) {
                            throw exception;
                        }

                        var context = this;

                        function handle(loc, caught) {
                            record.type = "throw";
                            record.arg = exception;
                            context.next = loc;
                            return !!caught;
                        }

                        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
                            var entry = this.tryEntries[i];
                            var record = entry.completion;

                            if (entry.tryLoc === "root") {



                                return handle("end");
                            }

                            if (entry.tryLoc <= this.prev) {
                                var hasCatch = hasOwn.call(entry, "catchLoc");
                                var hasFinally = hasOwn.call(entry, "finallyLoc");

                                if (hasCatch && hasFinally) {
                                    if (this.prev < entry.catchLoc) {
                                        return handle(entry.catchLoc, true);
                                    } else if (this.prev < entry.finallyLoc) {
                                        return handle(entry.finallyLoc);
                                    }

                                } else if (hasCatch) {
                                    if (this.prev < entry.catchLoc) {
                                        return handle(entry.catchLoc, true);
                                    }

                                } else if (hasFinally) {
                                    if (this.prev < entry.finallyLoc) {
                                        return handle(entry.finallyLoc);
                                    }

                                } else {
                                    throw new Error("try statement without catch or finally");
                                }
                            }
                        }
                    },

                    abrupt: function abrupt(type, arg) {
                        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
                            var entry = this.tryEntries[i];
                            if (entry.tryLoc <= this.prev &&
                                hasOwn.call(entry, "finallyLoc") &&
                                this.prev < entry.finallyLoc) {
                                var finallyEntry = entry;
                                break;
                            }
                        }

                        if (finallyEntry && (
                                type === "break" ||
                                type === "continue") &&
                            finallyEntry.tryLoc <= arg &&
                            arg <= finallyEntry.finallyLoc) {


                            finallyEntry = null;
                        }

                        var record = finallyEntry ? finallyEntry.completion : {};
                        record.type = type;
                        record.arg = arg;

                        if (finallyEntry) {
                            this.next = finallyEntry.finallyLoc;
                        } else {
                            this.complete(record);
                        }

                        return ContinueSentinel;
                    },

                    complete: function complete(record, afterLoc) {
                        if (record.type === "throw") {
                            throw record.arg;
                        }

                        if (record.type === "break" ||
                            record.type === "continue") {
                            this.next = record.arg;
                        } else if (record.type === "return") {
                            this.rval = record.arg;
                            this.next = "end";
                        } else if (record.type === "normal" && afterLoc) {
                            this.next = afterLoc;
                        }
                    },

                    finish: function finish(finallyLoc) {
                        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
                            var entry = this.tryEntries[i];
                            if (entry.finallyLoc === finallyLoc) {
                                this.complete(entry.completion, entry.afterLoc);
                                resetTryEntry(entry);
                                return ContinueSentinel;
                            }
                        }
                    },

                    "catch": function _catch(tryLoc) {
                        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
                            var entry = this.tryEntries[i];
                            if (entry.tryLoc === tryLoc) {
                                var record = entry.completion;
                                if (record.type === "throw") {
                                    var thrown = record.arg;
                                    resetTryEntry(entry);
                                }
                                return thrown;
                            }
                        }



                        throw new Error("illegal catch attempt");
                    },

                    delegateYield: function delegateYield(iterable, resultName, nextLoc) {
                        this.delegate = {
                            iterator: values(iterable),
                            resultName: resultName,
                            nextLoc: nextLoc
                        };


                        return ContinueSentinel;
                    }
                };

            }(



                typeof global === "object" ? global :
                typeof window === "object" ? window :
                typeof self === "object" ? self : this);
            /* WEBPACK VAR INJECTION */
        }.call(exports, (function() {
            return this;
        }())))

        /***/
    },
    /* 26 */
    /***/
    function(module, exports, __webpack_require__) {



        'use strict';
        var _extends = Object.assign || function(target) {
            for (var i = 1; i < arguments.length; i++) {
                var source = arguments[i];
                for (var key in source) {
                    if (Object.prototype.hasOwnProperty.call(source, key)) {
                        target[key] = source[key];
                    }
                }
            }
            return target;
        };
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor;
            };
        }();
        var _react = __webpack_require__(10);
        var _react2 = _interopRequireDefault(_react);
        var _View = __webpack_require__(27);
        var _View2 = _interopRequireDefault(_View);
        var _StyleSheet = __webpack_require__(39);
        var _StyleSheet2 = _interopRequireDefault(_StyleSheet);
        var _Text = __webpack_require__(67);
        var _Text2 = _interopRequireDefault(_Text);
        var _modalControl = __webpack_require__(84);
        var _modalControl2 = _interopRequireDefault(_modalControl);
        var _TouchableHighlight = __webpack_require__(185);
        var _TouchableHighlight2 = _interopRequireDefault(_TouchableHighlight);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
            }
        }

        function _possibleConstructorReturn(self, call) {
            if (!self) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            }
            return call && (typeof call === "object" || typeof call === "function") ? call : self;
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
        }


        var themeColor = '#007aff';
        var



            AlertView = function(_Component) {
            _inherits(AlertView, _Component);



            function AlertView(props) {
                _classCallCheck(this, AlertView);
                return _possibleConstructorReturn(this, (AlertView.__proto__ || Object.getPrototypeOf(AlertView)).call(this,
                    props));
            }
            _createClass(AlertView, [{
                key: 'render',
                value: function render()

                {
                    var props = this.props;
                    var _content = props.content;
                    if (typeof _content === 'string' || typeof _content === 'number') {
                        _content =
                            (this && this.createElement || _react2.default.createElement)(_Text2.default, {
                                style: [styles.contentText]
                            }, props.content);

                    }
                    var buttons = props.buttons;
                    var buttonsLength = buttons.length;
                    return (
                        (this && this.createElement || _react2.default.createElement)(_View2.default, {
                                style: [styles.dialogLayout]
                            },
                            (this && this.createElement || _react2.default.createElement)(_View2.default, {
                                    style: [styles.dialog]
                                },

                                props.title !== '' ? (this && this.createElement || _react2.default.createElement)(_View2.default, {
                                        style: [styles.title]
                                    },
                                    (this && this.createElement || _react2.default.createElement)(_Text2.default, {
                                        style: [styles.titleText]
                                    }, props.title)) :
                                null,


                                props.content !== '' ?
                                (this && this.createElement || _react2.default.createElement)(_View2.default, {
                                        style: [styles.content]
                                    },
                                    _content) :

                                null,

                                (this && this.createElement || _react2.default.createElement)(_View2.default, {
                                        style: [styles.footer, buttonsLength > 2 ? {
                                            flexDirection: 'column'
                                        } : {
                                            flexDirection: 'row'
                                        }]
                                    },

                                    buttons.map(function(item, index) {
                                        var itemStyle = styles[index || buttonsLength !== 2 ? 'buttonRight' : 'buttonLeft'];
                                        return (
                                            (this && this.createElement || _react2.default.createElement)(_TouchableHighlight2.default, {
                                                    key: index,
                                                    underlayColor: '#f9f9f9',
                                                    style: [styles.button, itemStyle],
                                                    onPress: function onPress(event) {
                                                        props.onClose();
                                                        item.onPress && item.onPress();
                                                    }
                                                },

                                                (this && this.createElement || _react2.default.createElement)(_Text2.default, {
                                                    style: [styles.buttonText]
                                                }, item.text)));


                                    })))));



                }
            }]);
            return AlertView;
        }(_react.Component);
        AlertView.defaultProps = {
            title: '',
            content: '',
            buttons: [{
                text: '确认'
            }],
            style: {}
        };



        AlertView.propTypes = {
            title: _react.PropTypes.string,
            content: _react.PropTypes.oneOfType([_react.PropTypes.string, _react.PropTypes.element]),
            buttons: _react.PropTypes.array
        };



        var styles = _StyleSheet2.default.create({
            dialogLayout: {
                backgroundColor: 'rgba(0, 0, 0, 0.2)',
                justifyContent: 'center',
                alignItems: 'center',
                overflow: 'hidden',
                position: 'absolute',
                left: 0,
                right: 0,
                top: 0,
                bottom: 0
            },

            dialog: {
                backgroundColor: '#fff',
                borderWidth: 1,
                borderStyle: 'solid',
                borderColor: '#ccc',
                flexDirection: 'column',
                borderRadius: 15,
                alignSelf: 'center',
                width: 280,
                overflow: 'hidden',
                textAlign: 'center'
            },

            title: {
                backgroundColor: 'transparent',
                height: 44,
                overflow: 'hidden',
                position: 'relative',
                justifyContent: 'center'
            },

            titleText: {
                fontSize: 16,
                marginVertical: 0,
                marginHorizontal: 20,
                fontWeight: 'bold',
                textAlign: 'center'
            },


            content: {
                flex: 1,
                paddingBottom: 10,
                overflow: 'visible'
            },


            contentText: {
                fontSize: 16
            },


            button: {
                backgroundColor: 'transparent',
                height: 44,
                flex: 1,
                justifyContent: 'center',
                borderTopWidth: 1,
                borderTopColor: '#cccccc'
            },

            buttonActive: {
                backgroundColor: '#f9f9f9'
            },

            buttonLeft: {
                borderRightWidth: 1,
                borderStyle: 'solid',
                borderRightColor: '#ccc'
            },

            buttonRight: {},
            buttonText: {
                textAlign: 'center',
                color: themeColor,
                fontSize: 16
            }
        });



        var Alert = {};



        Alert.alert = function(title, content, buttons) {
            var gid = 'upper-' + _modalControl2.default.getGid(),
                props = {
                    title: String(!title ? '' : title),
                    content: String(!content ? '' : content),
                    buttons: buttons
                };

            _modalControl2.default.mount((this && this.createElement || _react2.default.createElement)(AlertView, _extends({},
                props, {
                    onClose: function onClose() {
                        _modalControl2.default.destory(gid);
                    },
                    key: gid
                })));

        };


        module.exports = Alert;

        /***/
    },
    /* 27 */
    /***/
    function(module, exports, __webpack_require__) {

        var _extends = Object.assign || function(target) {
            for (var i = 1; i < arguments.length; i++) {
                var source = arguments[i];
                for (var key in source) {
                    if (Object.prototype.hasOwnProperty.call(source, key)) {
                        target[key] = source[key];
                    }
                }
            }
            return target;
        };



        var React = __webpack_require__(10);
        var LayoutMixin = __webpack_require__(28);
        var StyleSheet = __webpack_require__(39);
        var PropTypes = React.PropTypes;
        var NativeMethodsMixin = __webpack_require__(54);



        var View = React.createClass({
            displayName: 'View',
            mixins: [LayoutMixin, NativeMethodsMixin],
            getDefaultProps: function getDefaultProps() {
                return {
                    style: {}
                };

            },
            getChildContext: function getChildContext() {
                return {
                    parent: this
                };

            },
            childContextTypes: {
                parent: React.PropTypes.object
            },

            contextTypes: {
                parent: React.PropTypes.object
            },

            render: function render() {
                var props = this.props;
                var style = StyleSheet.fix(this.props.style, this, this.context.parent);

                var className = props.className;

                if (!className || className.indexOf('noflexbox') === -1 && className.indexOf('rn-view') === -1) {
                    className = (className ? className + ' ' : '') + 'rn-view';
                }

                if (props.pointerEvents) {
                    className = className + ' pointer-events-' + props.pointerEvents;
                }

                return (
                    (this && this.createElement || React.createElement)('div', _extends({},
                            props, {
                                style: style,
                                className: className
                            }),

                        this.props.children));


            }
        });


        View.propTypes = {
            onMoveShouldSetResponder: PropTypes.func,
            onResponderGrant: PropTypes.func,
            onResponderMove: PropTypes.func,
            onResponderReject: PropTypes.func,
            onResponderRelease: PropTypes.func,
            onResponderTerminate: PropTypes.func,
            onResponderTerminationRequest: PropTypes.func,
            onStartShouldSetResponder: PropTypes.func,
            onStartShouldSetResponderCapture: PropTypes.func,



            onLayout: PropTypes.func,



            pointerEvents: PropTypes.oneOf(['box-none', 'none', 'box-only', 'auto']),



            style: PropTypes.oneOfType([PropTypes.object, PropTypes.array])
        };



        module.exports = View;

        /***/
    },
    /* 28 */
    /***/
    function(module, exports, __webpack_require__) {



        'use strict';

        var React = __webpack_require__(10);
        var ReactDOM = __webpack_require__(10);
        var getLayout = __webpack_require__(29);
        var fastdom = __webpack_require__(30);
        var throttle = __webpack_require__(31);


        var LayoutMixin = {
            getInitialState: function getInitialState() {
                this.layoutHandle = throttle(this.layoutHandle, 100, {
                    trailing: true
                });
                return {
                    layout: {}
                };

            },
            layout_mixin_unmounted: false,
            componentDidMount: function componentDidMount() {
                if (this.props.onLayout) {
                    this.layoutHandle();
                }
            },

            componentDidUpdate: function componentDidUpdate() {
                if (this.props.onLayout) {
                    this.layoutHandle();
                }
            },
            componentWillUnmount: function componentWillUnmount() {

                this.layout_mixin_unmounted = true;
            },
            layoutHandle: function layoutHandle() {
                var _this = this;
                fastdom.measure(function() {
                    if (_this.layout_mixin_unmounted) {
                        return;
                    }
                    var domNode = ReactDOM.findDOMNode(_this);
                    var layout = getLayout(domNode);
                    fastdom.mutate(function() {
                        var stateLayout = _this.state.layout;
                        if (stateLayout.x !== layout.x || stateLayout.y !== layout.y || stateLayout.width !== layout.width || stateLayout.height !== layout.height) {
                            _this.props.onLayout && _this.props.onLayout({
                                nativeEvent: {
                                    layout: layout
                                }
                            });
                            _this.setState({
                                layout: layout
                            });
                        }
                    });
                });
            }
        };



        module.exports = LayoutMixin;

        /***/
    },
    /* 29 */
    /***/
    function(module, exports) {


        function getCumulativeOffset(obj) {
            var left = obj.offsetLeft,
                top = obj.offsetTop;

            obj = obj.offsetParent;
            while (obj) {
                left += obj.offsetLeft;
                top += obj.offsetTop;
                obj = obj.offsetParent;
            }
            return {
                x: left,
                y: top
            };

        }


        function getLayout(element) {
            var rect = getCumulativeOffset(element);
            return {
                x: rect.x,
                y: rect.y,
                width: element.offsetWidth,
                height: element.offsetHeight
            };

        }

        module.exports = getLayout;

        /***/
    },
    /* 30 */
    /***/
    function(module, exports, __webpack_require__) {

        var __WEBPACK_AMD_DEFINE_RESULT__;
        ! function(win) {



            'use strict';



            var debug = 0 ? console.log.bind(console, '[fastdom]') : function() {};



            var raf = win.requestAnimationFrame ||
                win.webkitRequestAnimationFrame ||
                win.mozRequestAnimationFrame ||
                win.msRequestAnimationFrame ||
                function(cb) {
                    return setTimeout(cb, 16);
                };



            function FastDom() {
                var self = this;
                self.reads = [];
                self.writes = [];
                self.raf = raf.bind(win);
                debug('initialized', self);
            }

            FastDom.prototype = {
                constructor: FastDom,



                measure: function measure(fn, ctx) {
                    debug('measure');
                    var task = !ctx ? fn : fn.bind(ctx);
                    this.reads.push(task);
                    scheduleFlush(this);
                    return task;
                },



                mutate: function mutate(fn, ctx) {
                    debug('mutate');
                    var task = !ctx ? fn : fn.bind(ctx);
                    this.writes.push(task);
                    scheduleFlush(this);
                    return task;
                },



                clear: function clear(task) {
                    debug('clear', task);
                    return remove(this.reads, task) || remove(this.writes, task);
                },



                extend: function extend(props) {
                    debug('extend', props);
                    if (typeof props != 'object') throw new Error('expected object');

                    var child = Object.create(this);
                    mixin(child, props);
                    child.fastdom = this;


                    if (child.initialize) child.initialize();

                    return child;
                },



                catch: null
            };



            function scheduleFlush(fastdom) {
                if (!fastdom.scheduled) {
                    fastdom.scheduled = true;
                    fastdom.raf(flush.bind(null, fastdom));
                    debug('flush scheduled');
                }
            }



            function flush(fastdom) {
                debug('flush');

                var writes = fastdom.writes;
                var reads = fastdom.reads;
                var error;

                try {
                    debug('flushing reads', reads.length);
                    runTasks(reads);
                    debug('flushing writes', writes.length);
                    runTasks(writes);
                } catch (e) {
                    error = e;
                }

                fastdom.scheduled = false;


                if (reads.length || writes.length) scheduleFlush(fastdom);

                if (error) {
                    debug('task errored', error.message);
                    if (fastdom.catch) fastdom.catch(error);
                    else
                        throw error;
                }
            }



            function runTasks(tasks) {
                debug('run tasks');
                var task;
                while (task = tasks.shift()) {
                    task();
                }
            }



            function remove(array, item) {
                var index = array.indexOf(item);
                return !!~index && !!array.splice(index, 1);
            }



            function mixin(target, source) {
                for (var key in source) {
                    if (source.hasOwnProperty(key)) target[key] = source[key];
                }
            }



            var exports = win.fastdom = win.fastdom || new FastDom();


            if (("function")[0] == 'f') !(__WEBPACK_AMD_DEFINE_RESULT__ = function() {
                return exports;
            }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
            else
            if ((typeof module)[0] == 'o') module.exports = exports;

        }(typeof window !== 'undefined' ? window : this);

        /***/
    },
    /* 31 */
    /***/
    function(module, exports, __webpack_require__) {

        var debounce = __webpack_require__(32),
            isObject = __webpack_require__(33);


        var FUNC_ERROR_TEXT = 'Expected a function';



        function throttle(func, wait, options) {
            var leading = true,
                trailing = true;

            if (typeof func != 'function') {
                throw new TypeError(FUNC_ERROR_TEXT);
            }
            if (isObject(options)) {
                leading = 'leading' in options ? !!options.leading : leading;
                trailing = 'trailing' in options ? !!options.trailing : trailing;
            }
            return debounce(func, wait, {
                'leading': leading,
                'maxWait': wait,
                'trailing': trailing
            });

        }

        module.exports = throttle;

        /***/
    },
    /* 32 */
    /***/
    function(module, exports, __webpack_require__) {

        var isObject = __webpack_require__(33),
            now = __webpack_require__(34),
            toNumber = __webpack_require__(35);


        var FUNC_ERROR_TEXT = 'Expected a function';


        var nativeMax = Math.max,
            nativeMin = Math.min;



        function debounce(func, wait, options) {
            var lastArgs,
                lastThis,
                maxWait,
                result,
                timerId,
                lastCallTime,
                lastInvokeTime = 0,
                leading = false,
                maxing = false,
                trailing = true;

            if (typeof func != 'function') {
                throw new TypeError(FUNC_ERROR_TEXT);
            }
            wait = toNumber(wait) || 0;
            if (isObject(options)) {
                leading = !!options.leading;
                maxing = 'maxWait' in options;
                maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
                trailing = 'trailing' in options ? !!options.trailing : trailing;
            }

            function invokeFunc(time) {
                var args = lastArgs,
                    thisArg = lastThis;

                lastArgs = lastThis = undefined;
                lastInvokeTime = time;
                result = func.apply(thisArg, args);
                return result;
            }

            function leadingEdge(time) {

                lastInvokeTime = time;

                timerId = setTimeout(timerExpired, wait);

                return leading ? invokeFunc(time) : result;
            }

            function remainingWait(time) {
                var timeSinceLastCall = time - lastCallTime,
                    timeSinceLastInvoke = time - lastInvokeTime,
                    result = wait - timeSinceLastCall;

                return maxing ? nativeMin(result, maxWait - timeSinceLastInvoke) : result;
            }

            function shouldInvoke(time) {
                var timeSinceLastCall = time - lastCallTime,
                    timeSinceLastInvoke = time - lastInvokeTime;



                return lastCallTime === undefined || timeSinceLastCall >= wait ||
                    timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
            }

            function timerExpired() {
                var time = now();
                if (shouldInvoke(time)) {
                    return trailingEdge(time);
                }

                timerId = setTimeout(timerExpired, remainingWait(time));
            }

            function trailingEdge(time) {
                timerId = undefined;



                if (trailing && lastArgs) {
                    return invokeFunc(time);
                }
                lastArgs = lastThis = undefined;
                return result;
            }

            function cancel() {
                lastInvokeTime = 0;
                lastArgs = lastCallTime = lastThis = timerId = undefined;
            }

            function flush() {
                return timerId === undefined ? result : trailingEdge(now());
            }

            function debounced() {
                var time = now(),
                    isInvoking = shouldInvoke(time);

                lastArgs = arguments;
                lastThis = this;
                lastCallTime = time;

                if (isInvoking) {
                    if (timerId === undefined) {
                        return leadingEdge(lastCallTime);
                    }
                    if (maxing) {

                        timerId = setTimeout(timerExpired, wait);
                        return invokeFunc(lastCallTime);
                    }
                }
                if (timerId === undefined) {
                    timerId = setTimeout(timerExpired, wait);
                }
                return result;
            }
            debounced.cancel = cancel;
            debounced.flush = flush;
            return debounced;
        }

        module.exports = debounce;

        /***/
    },
    /* 33 */
    /***/
    function(module, exports) {



        function isObject(value) {
            var type = typeof value;
            return !!value && (type == 'object' || type == 'function');
        }

        module.exports = isObject;

        /***/
    },
    /* 34 */
    /***/
    function(module, exports) {



        function now() {
            return Date.now();
        }

        module.exports = now;

        /***/
    },
    /* 35 */
    /***/
    function(module, exports, __webpack_require__) {

        var isFunction = __webpack_require__(36),
            isObject = __webpack_require__(33),
            isSymbol = __webpack_require__(37);


        var NAN = 0 / 0;


        var reTrim = /^\s+|\s+$/g;


        var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;


        var reIsBinary = /^0b[01]+$/i;


        var reIsOctal = /^0o[0-7]+$/i;


        var freeParseInt = parseInt;



        function toNumber(value) {
            if (typeof value == 'number') {
                return value;
            }
            if (isSymbol(value)) {
                return NAN;
            }
            if (isObject(value)) {
                var other = isFunction(value.valueOf) ? value.valueOf() : value;
                value = isObject(other) ? other + '' : other;
            }
            if (typeof value != 'string') {
                return value === 0 ? value : +value;
            }
            value = value.replace(reTrim, '');
            var isBinary = reIsBinary.test(value);
            return isBinary || reIsOctal.test(value) ?
                freeParseInt(value.slice(2), isBinary ? 2 : 8) :
                reIsBadHex.test(value) ? NAN : +value;
        }

        module.exports = toNumber;

        /***/
    },
    /* 36 */
    /***/
    function(module, exports, __webpack_require__) {

        var isObject = __webpack_require__(33);


        var funcTag = '[object Function]',
            genTag = '[object GeneratorFunction]';


        var objectProto = Object.prototype;



        var objectToString = objectProto.toString;



        function isFunction(value) {



            var tag = isObject(value) ? objectToString.call(value) : '';
            return tag == funcTag || tag == genTag;
        }

        module.exports = isFunction;

        /***/
    },
    /* 37 */
    /***/
    function(module, exports, __webpack_require__) {

        var isObjectLike = __webpack_require__(38);


        var symbolTag = '[object Symbol]';


        var objectProto = Object.prototype;



        var objectToString = objectProto.toString;



        function isSymbol(value) {
            return typeof value == 'symbol' ||
                isObjectLike(value) && objectToString.call(value) == symbolTag;
        }

        module.exports = isSymbol;

        /***/
    },
    /* 38 */
    /***/
    function(module, exports) {



        function isObjectLike(value) {
            return !!value && typeof value == 'object';
        }

        module.exports = isObjectLike;

        /***/
    },
    /* 39 */
    /***/
    function(module, exports, __webpack_require__) {

        /* WEBPACK VAR INJECTION */
        (function(global) {



            var fixStyleSheet = __webpack_require__(40);
            var flattenStyle = __webpack_require__(50);
            var PixelRatio = __webpack_require__(51);
            var extraFixFlexBox = __webpack_require__(53);

            var absoluteFillObject = {
                position: 'absolute',
                left: 0,
                right: 0,
                top: 0,
                bottom: 0
            };


            var absoluteFill = absoluteFillObject;

            var fixAndFlatten = function fixAndFlatten(style) {
                if (!style) {
                    return {};
                }
                if (!Array.isArray(style)) {
                    if (!style.hasFixed) {
                        style = fixStyleSheet.fixSingleStyleSheet(style);
                    }
                    return style;
                }
                var result = {};
                for (var i = 0; i < style.length; ++i) {
                    var computedStyle = fixAndFlatten(style[i]);
                    if (computedStyle) {
                        for (var key in computedStyle) {
                            result[key] = computedStyle[key];
                        }
                    }
                }
                return result;
            };

            var StyleSheet = {



                hairlineWidth: 1 / PixelRatio.get(),



                flatten: flattenStyle,



                absoluteFill: absoluteFill,



                absoluteFillObject: absoluteFillObject,



                transformKey: __webpack_require__(41)('transform', document.body.style),



                create: function create(obj) {
                    for (var className in obj) {
                        obj[className] = fixStyleSheet.fixSingleStyleSheet(obj[className]);
                        obj[className].hasFixed = true;
                    }
                    return obj;
                },


                fix: function fix(style, component, parent) {

                    style = fixAndFlatten(style);
                    style = fixStyleSheet.fixMultiStyleSheet(style, component, parent);
                    var props = component && component.props;
                    if (style.useFlexbox && props) {
                        if (props.className && props.className.indexOf('rn-flex') === -1) {
                            props.className += ' rn-flex';
                        } else if (!props.className) {
                            props.className = 'rn-flex';
                        }
                        delete style.useFlexbox;
                    }
                    return style;
                },



                inject: function inject(css) {
                    if ((process).browser) {
                        var style = document.createElement('style');
                        style.innerHTML = css;
                        document.head.appendChild(style);
                    } else {
                        global.__css__.push(css);
                    }
                }
            };


            module.exports = StyleSheet;
            /* WEBPACK VAR INJECTION */
        }.call(exports, (function() {
            return this;
        }())))

        /***/
    },
    /* 40 */
    /***/
    function(module, exports, __webpack_require__) {

        var cssName = __webpack_require__(41);


        var fixUnit = __webpack_require__(42);

        var fixFlexBox = __webpack_require__(44);
        var fixTransform = __webpack_require__(46);
        var fixBoxShadow = __webpack_require__(47);
        var fixTextShadow = __webpack_require__(48);
        var fixPaddingMargin = __webpack_require__(49);



        function isValidValue(value) {
            return value !== '' && value !== true && value !== undefined;
        }

        function fixSingleStyleSheet(style) {
            var result = {};
            for (var name in style) {
                var value = style[name];
                if (isValidValue(value)) {

                    if (fixFlexBox.names[name]) {
                        fixFlexBox.handle(name, value, result);
                    } else if (fixPaddingMargin.names[name]) {
                        fixPaddingMargin.handle(name, value, result);
                    } else if (fixTransform.names[name]) {
                        fixTransform.handle(style, result);
                    } else {
                        value = fixUnit(value, name);
                        name = cssName(name) || name;
                        result[name] = value;
                    }
                }
            }
            return result;
        }

        function fixMultiStyleSheet(style, component, parent) {
            fixBoxShadow.handle(style);
            fixTextShadow.handle(style);

            return style;
        }

        module.exports = {
            fixSingleStyleSheet: fixSingleStyleSheet,
            fixMultiStyleSheet: fixMultiStyleSheet
        };

        /***/
    },
    /* 41 */
    /***/
    function(module, exports) {

        /* WEBPACK VAR INJECTION */
        (function(global) {



            var prefixes = ['', '-webkit-', '-o-', '-moz-', '-ms-'];
            var cssMap = {

                'float': global.Range ? 'cssFloat' : 'styleFloat',
                textDecorationLine: 'textDecoration'
            };



            var rcamelize = /[-_][^-_]/g;
            var root = document.documentElement || {};

            function camelize(target) {

                if (!target || target.indexOf('-') < 0 && target.indexOf('_') < 0) {
                    return target;
                }

                return target.replace(rcamelize, function(match) {
                    return match.charAt(1).toUpperCase();
                });
            }

            function cssName(name, host, camelCase) {
                if (cssMap[name]) {
                    return cssMap[name];
                }
                host = host || root.style || {};
                for (var i = 0, n = prefixes.length; i < n; i++) {
                    camelCase = camelize(prefixes[i] + name);
                    if (camelCase in host) {
                        return cssMap[name] = camelCase;
                    }
                }
                return null;
            }

            module.exports = cssName;
            /* WEBPACK VAR INJECTION */
        }.call(exports, (function() {
            return this;
        }())))

        /***/
    },
    /* 42 */
    /***/
    function(module, exports, __webpack_require__) {

        var cssProperty = __webpack_require__(43);
        var cssNumber = cssProperty.cssNumber;
        var cssShort = cssProperty.cssShort;

        var runit = /\d*\.?\d+(rem|em|in|cm|mm|pt|pc|px|vh|vw|vmin|vmax|%)*/g;


        var rPrefixes = /^(Webkit|O|Moz|Ms)/;


        function fixUnit(value, name) {


            if (typeof value === 'number') {

                if (rPrefixes.test(name)) {
                    var nameArr = name.replace(/([A-Z])/g, '-$1').split('-');
                    nameArr.shift();
                    nameArr.shift();
                    nameArr[0] = nameArr[0].toLowerCase();
                    name = nameArr.join('');
                }



                if (!cssNumber[name] && value > 0 && value < 1) {
                    value = 1;
                }


                if (!cssNumber[name] && typeof value === 'number') {
                    return parseFloat((value / 100).toFixed(3)) + 'rem';
                }
            }

            if (cssShort[name] && typeof value === 'string') {
                value = value.replace(runit, function(val, unit) {
                    return unit ? val : parseFloat((val / 100).toFixed(3)) + 'rem';
                });
            }
            return value;
        }

        module.exports = fixUnit;

        /***/
    },
    /* 43 */
    /***/
    function(module, exports) {



        var cssNumber = {
            animationIterationCount: true,
            boxFlex: true,
            boxFlexGroup: true,
            boxOrdinalGroup: true,
            columnCount: true,
            flex: true,
            flexGrow: true,
            flexPositive: true,
            flexShrink: true,
            flexNegative: true,
            flexOrder: true,
            fontWeight: true,
            lineClamp: true,

            opacity: true,
            order: true,
            orphans: true,
            tabSize: true,
            widows: true,
            zIndex: true,
            zoom: true,

            shadowOpacity: true,

            scale: true,
            scaleX: true,
            scaleY: true,


            fillOpacity: true,
            stopOpacity: true,
            strokeDashoffset: true,
            strokeOpacity: true,
            strokeWidth: true
        };



        var cssShort = {
            background: {
                backgroundAttachment: true,
                backgroundColor: true,
                backgroundImage: true,
                backgroundPositionX: true,
                backgroundPositionY: true,
                backgroundRepeat: true
            },

            backgroundPosition: {
                backgroundPositionX: true,
                backgroundPositionY: true
            },

            border: {
                borderWidth: true,
                borderStyle: true,
                borderColor: true
            },

            borderBottom: {
                borderBottomWidth: true,
                borderBottomStyle: true,
                borderBottomColor: true
            },

            borderLeft: {
                borderLeftWidth: true,
                borderLeftStyle: true,
                borderLeftColor: true
            },

            borderRight: {
                borderRightWidth: true,
                borderRightStyle: true,
                borderRightColor: true
            },

            borderTop: {
                borderTopWidth: true,
                borderTopStyle: true,
                borderTopColor: true
            },

            font: {
                fontStyle: true,
                fontVariant: true,
                fontWeight: true,
                fontSize: true,
                lineHeight: true,
                fontFamily: true
            },

            outline: {
                outlineWidth: true,
                outlineStyle: true,
                outlineColor: true
            }
        };



        module.exports = {
            cssNumber: cssNumber,
            cssShort: cssShort
        };

        /***/
    },
    /* 44 */
    /***/
    function(module, exports, __webpack_require__) {



        var cssName = __webpack_require__(41);



        var flexboxSpec = __webpack_require__(45);


        var oldNames = {
            flex: 'WebkitBoxFlex',
            order: 'WebkitBoxOrdinalGroup',

            flexDirection: 'WebkitBoxOrient',

            alignItems: 'WebkitBoxAlign',

            justifyContent: 'WebkitBoxPack',
            flexWrap: null,
            alignSelf: null
        };


        var oldValues = {
            'flex-end': 'end',
            'flex-start': 'start',
            'space-between': 'justify',
            'space-around': 'justify'
        };


        function fixFlexBox(name, value, result, component, parentStyle) {


            if (!/flex/.test(result.display)) {
                result.useFlexbox = true;
            }
            if (flexboxSpec === '2009') {
                var oldValue = oldValues[value] || value;
                var oldName = oldNames[name] || name;
                if (oldName === 'WebkitBoxOrient') {

                    oldValue = value.indexOf('row') !== -1 ? 'horizontal' : 'vertical';

                    var dir = value.indexOf('reverse') !== -1 ? 'reverse' : 'normal';
                    result.WebkitBoxDirection = dir;
                }
                result[oldName] = oldValue;
                return;
            } else if (flexboxSpec === '2011') {
                name = cssName(name) || name;
                return result[name] = value;
            } else {
                if (name === 'flex' && value === 0) {
                    return result[name] = 'none';
                }
                return result[name] = value;
            }
        }



        module.exports = {
            names: oldNames,
            handle: fixFlexBox
        };

        /***/
    },
    /* 45 */
    /***/
    function(module, exports) {

        var flexboxSpec = '2009';
        var testStyle = document.body.style;
        if ('alignSelf' in testStyle) {
            flexboxSpec = '2012';
        } else if ('webkitAlignSelf' in testStyle) {
            flexboxSpec = '2011';
        }

        if (/UCBrowser/i.test(navigator.userAgent) && /Android/i.test(navigator.userAgent)) {
            var userAgentArray = navigator.userAgent.split("/");
            var UCVersion;
            userAgentArray.forEach(function(value, index, array) {
                if (value.indexOf('UCBrowser') !== -1) {
                    UCVersion = array[index + 1].split(' ')[0];
                    var versionDiff = compareVersion(UCVersion, '11.2');
                    if (versionDiff < 0) {
                        flexboxSpec = '2009';
                    }
                }
            });
        }

        function compareVersion(v1, v2) {
            var _v1 = v1.split("."),
                _v2 = v2.split("."),
                _r = _v1[0] - _v2[0];

            return _r === 0 && v1 !== v2 ? compareVersion(_v1.splice(1).join("."), _v2.splice(1).join(".")) : _r;
        }


        module.exports = flexboxSpec;

        /***/
    },
    /* 46 */
    /***/
    function(module, exports, __webpack_require__) {



        var cssName = __webpack_require__(41);
        var fixUnit = __webpack_require__(42);


        function fixTransform(style, result) {
            var name = 'transform';
            var convertName = ['transform', 'transformMatrix'];
            var transformations = [];

            if (style[convertName[0]]) {
                var value = style[convertName[0]];
                if (Array.isArray(value)) {
                    value.forEach(function(transformation) {
                        var key = Object.keys(transformation)[0];
                        var val = transformation[key];

                        if (val.__getValue) {
                            val = val.__getValue();
                        }
                        val = fixUnit(val, key);
                        transformations.push(key + '(' + val + ')');
                    });
                } else if (typeof value === 'string') {
                    transformations.push(value);
                }
            }


            if (style[convertName[1]]) {
                var value = style[convertName[1]];
                transformations.push('matrix3d' + '(' + value.join(',') + ')');
            }

            name = cssName(name) || name;
            result[name] = transformations.join(' ');
        }

        module.exports = {
            names: {
                transform: true,
                transformMatrix: true
            },

            handle: fixTransform
        };

        /***/
    },
    /* 47 */
    /***/
    function(module, exports, __webpack_require__) {

        var fixUnit = __webpack_require__(42);

        function fixBoxShadow(style) {
            var value = [];

            if (style.shadowColor) {
                value.push(style.shadowOpacity ? colorToRgba(style.shadowColor, style.shadowOpacity) : style.shadowColor);
            }
            if (style.shadowOffset) {
                value.push(fixUnit(style.shadowOffset.width || 0, 'width'));
                value.push(fixUnit(style.shadowOffset.height || 0, 'height'));
            }
            if (style.shadowRadius) {
                value.push(fixUnit(style.shadowRadius, 'shadowRadius'));
            }
            if (value.length > 1) {
                style.boxShadow = value.join(' ');
            }
        }



        function colorToRgba(color, opacity) {
            var reg = /^#([0-9a-fA-f]{3}|[0-9a-fA-f]{6})$/;
            color = color.toLowerCase();
            if (color && reg.test(color)) {
                var length = color.length;
                var unit = length === 4 ? 1 : 2;
                var colorChange = [];
                for (var i = 1; i < length; i += unit) {
                    var colorTemp;
                    if (unit === 1) {
                        colorTemp = color[i] + color[i];
                    } else {
                        colorTemp = color[i] + color[i + 1];
                    }
                    colorChange.push(parseInt('0x' + colorTemp));
                }
                colorChange.push(opacity);
                return 'rgba(' + colorChange.join(',') + ')';

            } else {
                return color;
            }
        }



        module.exports = {
            names: {
                shadowOffset: true,
                shadowRadius: true,
                shadowColor: true,
                shadowOpacity: true
            },

            handle: fixBoxShadow
        };

        /***/
    },
    /* 48 */
    /***/
    function(module, exports, __webpack_require__) {

        var fixUnit = __webpack_require__(42);
        var array = ['textShadowColor', 'textShadowOffset', 'textShadowRadius'];

        function fixTextShadow(style, result) {
            var value = [];

            if (style.textShadowColor) {
                value.push(style.textShadowColor);

            };
            if (style.textShadowOffset) {
                value.push(fixUnit(style.textShadowOffset.width || 0, 'width'));
                value.push(fixUnit(style.textShadowOffset.height || 0, 'height'));

            }
            if (style.textShadowRadius) {
                value.push(fixUnit(style.textShadowRadius, 'textShadowRadius'));

            }
            if (value.length > 1) {
                style.textShadow = value.join(' ');
            }
        }


        module.exports = {
            names: {
                textShadowColor: true,
                textShadowOffset: true,
                textShadowRadius: true
            },

            handle: fixTextShadow
        };

        /***/
    },
    /* 49 */
    /***/
    function(module, exports) {



        function fixBoxName(name, value, result) {

            var padding = 'padding';
            var margin = 'margin';
            var horizontal = 'Horizontal';
            var vertical = 'Vertical';
            var type = name.indexOf(margin) === 0 ? margin : padding;
            var directionType = name.indexOf(vertical) !== -1 ? vertical : horizontal;

            if (directionType === horizontal) {
                result[type + 'Left'] = result[type + 'Right'] = value;
            } else if (directionType === vertical) {
                result[type + 'Top'] = result[type + 'Bottom'] = value;
            }
        }

        module.exports = {
            names: {
                paddingHorizontal: true,
                paddingVertical: true,
                marginHorizontal: true,
                marginVertical: true
            },

            handle: fixBoxName
        };

        /***/
    },
    /* 50 */
    /***/
    function(module, exports) {



        module.exports = function flattenStyle(style) {
            if (!style) {
                return undefined;
            }

            if (!Array.isArray(style)) {
                if (style.hasFixed) {
                    style.hasFixed = false;
                }
                return style;
            }

            var result = {};
            for (var i = 0; i < style.length; ++i) {
                var computedStyle = flattenStyle(style[i]);
                if (computedStyle) {
                    for (var key in computedStyle) {
                        result[key] = computedStyle[key];
                    }
                }
            }
            return result;
        };

        /***/
    },
    /* 51 */
    /***/
    function(module, exports, __webpack_require__) {

        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor;
            };
        }();

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
            }
        }



        var Dimensions = __webpack_require__(52);
        var



            PixelRatio = function() {
            function PixelRatio() {
                _classCallCheck(this, PixelRatio);
            }
            _createClass(PixelRatio, null, [{
                key: 'get',
                value: function get()



                {
                    return Dimensions.get('window').scale;
                }
            }, {
                key: 'getFontScale',
                value: function getFontScale()



                {
                    return Dimensions.get('window').fontScale || PixelRatio.get();
                }
            }, {
                key: 'getPixelSizeForLayoutSize',
                value: function getPixelSizeForLayoutSize(



                    layoutSize) {
                    return Math.round(layoutSize * PixelRatio.get());
                }
            }, {
                key: 'roundToNearestPixel',
                value: function roundToNearestPixel(



                    layoutSize) {
                    var ratio = PixelRatio.get();
                    return Math.round(layoutSize * ratio) / ratio;
                }
            }]);
            return PixelRatio;
        }();


        module.exports = PixelRatio;

        /***/
    },
    /* 52 */
    /***/
    function(module, exports, __webpack_require__) {

        /* WEBPACK VAR INJECTION */
        (function(global) {
            var _createClass = function() {
                function defineProperties(target, props) {
                    for (var i = 0; i < props.length; i++) {
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || false;
                        descriptor.configurable = true;
                        if ("value" in descriptor) descriptor.writable = true;
                        Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }
                return function(Constructor, protoProps, staticProps) {
                    if (protoProps) defineProperties(Constructor.prototype, protoProps);
                    if (staticProps) defineProperties(Constructor, staticProps);
                    return Constructor;
                };
            }();

            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                    throw new TypeError("Cannot call a class as a function");
                }
            }



            var invariant = __webpack_require__(19);
            var debounce = __webpack_require__(32);

            var win = global,
                browser = global.process.browser;

            var dimensions = {};
            var



                Dimensions = function() {
                function Dimensions() {
                    _classCallCheck(this, Dimensions);
                }
                _createClass(Dimensions, null, [{
                    key: 'get',
                    value: function get(



                        dimension) {
                        invariant(dimensions[dimension], 'No dimension set for key ' + dimension);
                        return dimensions[dimension];
                    }
                }, {
                    key: 'set',
                    value: function set()



                    {

                        dimensions.window = {
                            fontScale: 1,
                            height: document.documentElement.clientHeight,
                            scale: win.devicePixelRatio || 1,
                            width: document.documentElement.clientWidth
                        };

                        dimensions.screen = {
                            fontScale: 1,
                            height: win.screen.height,
                            scale: win.devicePixelRatio || 1,
                            width: win.screen.width
                        };

                    }
                }]);
                return Dimensions;
            }();


            Dimensions.set();
            if (browser) {
                win.addEventListener('resize', debounce(Dimensions.set, 50));
            }

            module.exports = Dimensions;
            /* WEBPACK VAR INJECTION */
        }.call(exports, (function() {
            return this;
        }())))

        /***/
    },
    /* 53 */
    /***/
    function(module, exports, __webpack_require__) {



        var fixFlexBox = __webpack_require__(44);
        var ReactDom = __webpack_require__(10);
        var fastdom = __webpack_require__(30);
        var flexboxSpec = __webpack_require__(45);
        var cssName = __webpack_require__(41);

        function extraFixFlexBox(style, component, parent) {
            if (!component || style.hasExtraFix) {
                return;
            }
            style.hasExtraFix = true;
            doFixFlex(style, component, parent);

            if (flexboxSpec === '2009' && component && parent && (style.flexWrap || style.alignSelf)) {
                style.visibility = 'hidden';
                setTimeout(function() {
                    doExtraFix(style, component, parent);
                });
            }
        }


        function doFixFlex(style, component, parent) {
            var parentStyle = parent && parent.props && parent.props.style || {};
            var flexName = flexboxSpec !== '2009' ? cssName('flex') : 'WebkitBoxFlex';
            var value = style[flexName];
            if (typeof value !== 'number') return;
            if (value === 0 && flexboxSpec !== 2009) {
                style[flexName] = 'none';
                return;
            }
            if (value && flexboxSpec !== '2009') {
                var parentFlexDirection = parentStyle[cssName('flexDirection')];

                if (parentFlexDirection === 'row' && style.width || parentFlexDirection === 'column' && style.height) {
                    style[flexName] = value + ' 0 auto';
                } else {
                    style[flexName] = value;
                }
                return;
            } else if (value && flexboxSpec === '2009') {

                if (parentStyle.WebkitBoxOrient === 'horizontal' && !style.width) {
                    style.width = '0rem';
                }



                return;
            }
        }



        function doExtraFix(style, component, parent) {

            var parentDOM = ReactDom.findDOMNode(parent);
            var parentStyle = parent && parent.props && parent.props.style || {};
            var parentComputedStyle = getComputedStyle(parentDOM);

            var componentDOM = ReactDom.findDOMNode(component);
            var componentComputedStyle = getComputedStyle(componentDOM);
            var componentStyle = component && component.props && component.props.style || {};

            var extraStyle = {};



            if (style.alignSelf && style.alignSelf !== 'auto') {
                if (!((!parentStyle.WebkitBoxAlign || parentStyle.WebkitBoxAlign === 'stretch') && (!style.height && parentStyle.WebkitBoxOrient === 'horizontal' || !style.width && parentStyle.WebkitBoxOrient !== 'horizontal'))) {

                    var unit = {
                        'start': 0,
                        'flex-start': 0,
                        'center': 1,
                        'end': 2,
                        'flex-end': 2,
                        'stretch': 0,
                        'auto': 0
                    };

                    var unitParent = unit[parentStyle.WebkitBoxAlign || 'auto'];
                    var unitChild = unit[style.alignSelf];
                    var unitBetween = unitChild - unitParent;
                    var calLayout = void 0,
                        calMaxLayout = void 0,
                        calRelative = void 0;
                    if (parentStyle.WebkitBoxOrient === 'horizontal') {
                        calLayout = 'height';
                        calMaxLayout = 'maxHeight';
                        calRelative = 'top';
                    } else {
                        calLayout = 'width';
                        calMaxLayout = 'maxWidth';
                        calRelative = 'left';
                    }

                    var unitLayout = (parseFloat(parentComputedStyle[calLayout]) - parseFloat(style[calLayout] * 100 || componentComputedStyle[calLayout])) / 200;


                    if (style.alignSelf === 'stretch' && !style[calLayout] && !style[calMaxLayout]) {
                        extraStyle[calLayout] = parentComputedStyle[calLayout];

                    } else {
                        var result = unitLayout * unitBetween;
                        if (result) {
                            extraStyle[calRelative] = result + 'rem';
                        }
                    }
                }

            }



            if (style.flexWrap === 'wrap' && style.WebkitBoxOrient === 'horizontal' && !style.WebkitBoxPack) {
                extraStyle.display = 'block';
                if (componentDOM.className.indexOf('simpleFlexWrap') === -1) {
                    componentDOM.className = componentDOM.className + ' simpleFlexWrap';
                }
            }
            extraStyle.visibility = 'visible';
            fastdom.mutate(function() {
                for (var name in extraStyle) {
                    componentDOM.style[name] = extraStyle[name];
                }
            });
        }

        module.exports = {
            handle: extraFixFlexBox
        };

        /***/
    },
    /* 54 */
    /***/
    function(module, exports, __webpack_require__) {

        'use strict';



        var UIManager = __webpack_require__(55);
        var ReactDOM = __webpack_require__(10);
        var _setNativeProps = __webpack_require__(66);


        var NativeMethodsMixin = {



            measure: function measure(callback) {
                UIManager.measure(
                    ReactDOM.findDOMNode(this),
                    mountSafeCallback(this, callback));

            },



            measureLayout: function measureLayout(relativeToNativeNode, onSuccess, onFail) {
                UIManager.measureLayout(
                    ReactDOM.findDOMNode(this),
                    relativeToNativeNode,
                    mountSafeCallback(this, onFail),
                    mountSafeCallback(this, onSuccess));

            },



            setNativeProps: function setNativeProps(nativeProps) {
                _setNativeProps(ReactDOM.findDOMNode(this), nativeProps, this);
            },



            focus: function focus() {
                ReactDOM.findDOMNode(this).focus();
            },



            blur: function blur() {
                ReactDOM.findDOMNode(this).blur();
            }
        };



        var mountSafeCallback = function mountSafeCallback(context, callback) {
            return function() {
                if (!callback || context.isMounted && !context.isMounted()) {
                    return;
                }
                return callback.apply(context, arguments);
            };
        };

        module.exports = NativeMethodsMixin;

        /***/
    },
    /* 55 */
    /***/
    function(module, exports, __webpack_require__) {



        var CSSPropertyOperations = __webpack_require__(56);
        var StyleSheet = __webpack_require__(39);

        var _measureLayout = function _measureLayout(node, relativeToNativeNode, callback) {
            var relativeNode = relativeToNativeNode || node.parentNode;
            var relativeRect = relativeNode.getBoundingClientRect();

            var layout = node.getBoundingClientRect(),
                height = Math.round(layout.height),
                left = Math.round(layout.left),
                top = Math.round(layout.top),
                width = Math.round(layout.width);

            var x = left - relativeRect.left;
            var y = top - relativeRect.top;

            callback(x, y, width, height, left, top);
        };

        var UIManager = {



            blur: function blur(node) {
                try {
                    node.blur();
                } catch (err) {}
            },



            focus: function focus(node) {
                try {
                    node.focus();
                } catch (err) {}
            },



            measure: function measure(node, callback) {
                if (!node) return;
                _measureLayout(node, null, callback);
            },



            measureInWindow: function measureInWindow(node, callback) {
                var _node$getBoundingClie =
                    node.getBoundingClientRect(),
                    height = _node$getBoundingClie.height,
                    left = _node$getBoundingClie.left,
                    top = _node$getBoundingClie.top,
                    width = _node$getBoundingClie.width;
                callback(left, top, width, height);
            },



            measureLayout: function measureLayout(node, relativeToNativeNode, onFail, onSuccess) {
                var relativeTo = relativeToNativeNode || node.parentNode;

                _measureLayout(node, relativeTo, onSuccess);
            },



            updateView: function updateView(node, props) {
                for (var prop in props) {
                    var nativeProp = void 0;
                    var value = props[prop];

                    switch (prop) {
                        case 'style':

                            CSSPropertyOperations.setValueForStyles(node, StyleSheet.fix(value));
                            break;
                        case 'class':
                        case 'className':
                            nativeProp = 'class';

                            var className = node.getAttribute(nativeProp) + ' ' + value;
                            node.setAttribute(nativeProp, className);
                            break;
                        case 'text':
                        case 'value':

                            node.value = value;
                            break;
                        default:
                            node.setAttribute(prop, value);
                    }

                }
            }
        };


        module.exports = UIManager;

        /***/
    },
    /* 56 */
    /***/
    function(module, exports, __webpack_require__) {



        'use strict';

        var CSSProperty = __webpack_require__(57);
        var ExecutionEnvironment = __webpack_require__(58);
        var ReactInstrumentation = __webpack_require__(59);

        var camelizeStyleName = __webpack_require__(60);
        var dangerousStyleValue = __webpack_require__(62);
        var hyphenateStyleName = __webpack_require__(63);
        var memoizeStringOnly = __webpack_require__(65);
        var warning = __webpack_require__(20);

        var processStyleName = memoizeStringOnly(function(styleName) {
            return hyphenateStyleName(styleName);
        });

        var hasShorthandPropertyBug = false;
        var styleFloatAccessor = 'cssFloat';
        if (ExecutionEnvironment.canUseDOM) {
            var tempStyle = document.createElement('div').style;
            try {

                tempStyle.font = '';
            } catch (e) {
                hasShorthandPropertyBug = true;
            }

            if (document.documentElement.style.cssFloat === undefined) {
                styleFloatAccessor = 'styleFloat';
            }
        }

        if (false) {

            var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;


            var badStyleValueWithSemicolonPattern = /;\s*$/;

            var warnedStyleNames = {};
            var warnedStyleValues = {};
            var warnedForNaNValue = false;

            var warnHyphenatedStyleName = function warnHyphenatedStyleName(name, owner) {
                if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
                    return;
                }

                warnedStyleNames[name] = true;
                process.env.NODE_ENV !== 'production' ? warning(false, 'Unsupported style property %s. Did you mean %s?%s', name, camelizeStyleName(name), checkRenderMessage(owner)) : void 0;
            };

            var warnBadVendoredStyleName = function warnBadVendoredStyleName(name, owner) {
                if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
                    return;
                }

                warnedStyleNames[name] = true;
                process.env.NODE_ENV !== 'production' ? warning(false, 'Unsupported vendor-prefixed style property %s. Did you mean %s?%s', name, name.charAt(0).toUpperCase() + name.slice(1), checkRenderMessage(owner)) : void 0;
            };

            var warnStyleValueWithSemicolon = function warnStyleValueWithSemicolon(name, value, owner) {
                if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
                    return;
                }

                warnedStyleValues[value] = true;
                process.env.NODE_ENV !== 'production' ? warning(false, 'Style property values shouldn\'t contain a semicolon.%s ' + 'Try "%s: %s" instead.', checkRenderMessage(owner), name, value.replace(badStyleValueWithSemicolonPattern, '')) : void 0;
            };

            var warnStyleValueIsNaN = function warnStyleValueIsNaN(name, value, owner) {
                if (warnedForNaNValue) {
                    return;
                }

                warnedForNaNValue = true;
                process.env.NODE_ENV !== 'production' ? warning(false, '`NaN` is an invalid value for the `%s` css style property.%s', name, checkRenderMessage(owner)) : void 0;
            };

            var checkRenderMessage = function checkRenderMessage(owner) {
                if (owner) {
                    var name = owner.getName();
                    if (name) {
                        return ' Check the render method of `' + name + '`.';
                    }
                }
                return '';
            };



            var warnValidStyle = function warnValidStyle(name, value, component) {
                var owner;
                if (component) {
                    owner = component._currentElement._owner;
                }
                if (name.indexOf('-') > -1) {
                    warnHyphenatedStyleName(name, owner);
                } else if (badVendoredStyleNamePattern.test(name)) {
                    warnBadVendoredStyleName(name, owner);
                } else if (badStyleValueWithSemicolonPattern.test(value)) {
                    warnStyleValueWithSemicolon(name, value, owner);
                }

                if (typeof value === 'number' && isNaN(value)) {
                    warnStyleValueIsNaN(name, value, owner);
                }
            };
        }



        var CSSPropertyOperations = {



            createMarkupForStyles: function createMarkupForStyles(styles, component) {
                var serialized = '';
                for (var styleName in styles) {
                    if (!styles.hasOwnProperty(styleName)) {
                        continue;
                    }
                    var styleValue = styles[styleName];
                    if (false) {
                        warnValidStyle(styleName, styleValue, component);
                    }
                    if (styleValue != null) {
                        serialized += processStyleName(styleName) + ':';
                        serialized += dangerousStyleValue(styleName, styleValue, component) + ';';
                    }
                }
                return serialized || null;
            },



            setValueForStyles: function setValueForStyles(node, styles, component) {
                if (false) {
                    ReactInstrumentation.debugTool.onHostOperation(component._debugID, 'update styles', styles);
                }

                var style = node.style;
                for (var styleName in styles) {
                    if (!styles.hasOwnProperty(styleName)) {
                        continue;
                    }
                    if (false) {
                        warnValidStyle(styleName, styles[styleName], component);
                    }
                    var styleValue = dangerousStyleValue(styleName, styles[styleName], component);
                    if (styleName === 'float' || styleName === 'cssFloat') {
                        styleName = styleFloatAccessor;
                    }
                    if (styleValue) {
                        style[styleName] = styleValue;
                    } else {
                        var expansion = hasShorthandPropertyBug && CSSProperty.shorthandPropertyExpansions[styleName];
                        if (expansion) {


                            for (var individualStyleName in expansion) {
                                style[individualStyleName] = '';
                            }
                        } else {
                            style[styleName] = '';
                        }
                    }
                }
            }
        };



        module.exports = CSSPropertyOperations;

        /***/
    },
    /* 57 */
    /***/
    function(module, exports) {



        'use strict';



        var isUnitlessNumber = {
            animationIterationCount: true,
            borderImageOutset: true,
            borderImageSlice: true,
            borderImageWidth: true,
            boxFlex: true,
            boxFlexGroup: true,
            boxOrdinalGroup: true,
            columnCount: true,
            flex: true,
            flexGrow: true,
            flexPositive: true,
            flexShrink: true,
            flexNegative: true,
            flexOrder: true,
            gridRow: true,
            gridColumn: true,
            fontWeight: true,
            lineClamp: true,
            lineHeight: true,
            opacity: true,
            order: true,
            orphans: true,
            tabSize: true,
            widows: true,
            zIndex: true,
            zoom: true,


            fillOpacity: true,
            floodOpacity: true,
            stopOpacity: true,
            strokeDasharray: true,
            strokeDashoffset: true,
            strokeMiterlimit: true,
            strokeOpacity: true,
            strokeWidth: true
        };



        function prefixKey(prefix, key) {
            return prefix + key.charAt(0).toUpperCase() + key.substring(1);
        }



        var prefixes = ['Webkit', 'ms', 'Moz', 'O'];



        Object.keys(isUnitlessNumber).forEach(function(prop) {
            prefixes.forEach(function(prefix) {
                isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
            });
        });



        var shorthandPropertyExpansions = {
            background: {
                backgroundAttachment: true,
                backgroundColor: true,
                backgroundImage: true,
                backgroundPositionX: true,
                backgroundPositionY: true,
                backgroundRepeat: true
            },

            backgroundPosition: {
                backgroundPositionX: true,
                backgroundPositionY: true
            },

            border: {
                borderWidth: true,
                borderStyle: true,
                borderColor: true
            },

            borderBottom: {
                borderBottomWidth: true,
                borderBottomStyle: true,
                borderBottomColor: true
            },

            borderLeft: {
                borderLeftWidth: true,
                borderLeftStyle: true,
                borderLeftColor: true
            },

            borderRight: {
                borderRightWidth: true,
                borderRightStyle: true,
                borderRightColor: true
            },

            borderTop: {
                borderTopWidth: true,
                borderTopStyle: true,
                borderTopColor: true
            },

            font: {
                fontStyle: true,
                fontVariant: true,
                fontWeight: true,
                fontSize: true,
                lineHeight: true,
                fontFamily: true
            },

            outline: {
                outlineWidth: true,
                outlineStyle: true,
                outlineColor: true
            }
        };



        var CSSProperty = {
            isUnitlessNumber: isUnitlessNumber,
            shorthandPropertyExpansions: shorthandPropertyExpansions
        };


        module.exports = CSSProperty;

        /***/
    },
    /* 58 */
    /***/
    function(module, exports) {



        'use strict';

        var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);



        var ExecutionEnvironment = {

            canUseDOM: canUseDOM,

            canUseWorkers: typeof Worker !== 'undefined',

            canUseEventListeners: canUseDOM && !!(window.addEventListener || window.attachEvent),

            canUseViewport: canUseDOM && !!window.screen,

            isInWorker: !canUseDOM
        };



        module.exports = ExecutionEnvironment;

        /***/
    },
    /* 59 */
    /***/
    function(module, exports, __webpack_require__) {



        'use strict';

        var debugTool = null;

        if (false) {
            var ReactDebugTool = require('./ReactDebugTool');
            debugTool = ReactDebugTool;
        }

        module.exports = {
            debugTool: debugTool
        };

        /***/
    },
    /* 60 */
    /***/
    function(module, exports, __webpack_require__) {



        'use strict';

        var camelize = __webpack_require__(61);

        var msPattern = /^-ms-/;



        function camelizeStyleName(string) {
            return camelize(string.replace(msPattern, 'ms-'));
        }

        module.exports = camelizeStyleName;

        /***/
    },
    /* 61 */
    /***/
    function(module, exports) {

        "use strict";



        var _hyphenPattern = /-(.)/g;



        function camelize(string) {
            return string.replace(_hyphenPattern, function(_, character) {
                return character.toUpperCase();
            });
        }

        module.exports = camelize;

        /***/
    },
    /* 62 */
    /***/
    function(module, exports, __webpack_require__) {



        'use strict';

        var CSSProperty = __webpack_require__(57);
        var warning = __webpack_require__(20);

        var isUnitlessNumber = CSSProperty.isUnitlessNumber;
        var styleWarnings = {};



        function dangerousStyleValue(name, value, component) {



            var isEmpty = value == null || typeof value === 'boolean' || value === '';
            if (isEmpty) {
                return '';
            }

            var isNonNumeric = isNaN(value);
            if (isNonNumeric || value === 0 || isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name]) {
                return '' + value;
            }

            if (typeof value === 'string') {
                if (false) {


                    if (component && value !== '0') {
                        var owner = component._currentElement._owner;
                        var ownerName = owner ? owner.getName() : null;
                        if (ownerName && !styleWarnings[ownerName]) {
                            styleWarnings[ownerName] = {};
                        }
                        var warned = false;
                        if (ownerName) {
                            var warnings = styleWarnings[ownerName];
                            warned = warnings[name];
                            if (!warned) {
                                warnings[name] = true;
                            }
                        }
                        if (!warned) {
                            process.env.NODE_ENV !== 'production' ? warning(false, 'a `%s` tag (owner: `%s`) was passed a numeric string value ' + 'for CSS property `%s` (value: `%s`) which will be treated ' + 'as a unitless number in a future version of React.', component._currentElement.type, ownerName || 'unknown', name, value) : void 0;
                        }
                    }
                }
                value = value.trim();
            }
            return value + 'px';
        }

        module.exports = dangerousStyleValue;

        /***/
    },
    /* 63 */
    /***/
    function(module, exports, __webpack_require__) {



        'use strict';

        var hyphenate = __webpack_require__(64);

        var msPattern = /^ms-/;



        function hyphenateStyleName(string) {
            return hyphenate(string).replace(msPattern, '-ms-');
        }

        module.exports = hyphenateStyleName;

        /***/
    },
    /* 64 */
    /***/
    function(module, exports) {

        'use strict';



        var _uppercasePattern = /([A-Z])/g;



        function hyphenate(string) {
            return string.replace(_uppercasePattern, '-$1').toLowerCase();
        }

        module.exports = hyphenate;

        /***/
    },
    /* 65 */
    /***/
    function(module, exports) {



        'use strict';



        function memoizeStringOnly(callback) {
            var cache = {};
            return function(string) {
                if (!cache.hasOwnProperty(string)) {
                    cache[string] = callback.call(this, string);
                }
                return cache[string];
            };
        }

        module.exports = memoizeStringOnly;

        /***/
    },
    /* 66 */
    /***/
    function(module, exports, __webpack_require__) {

        var _extends = Object.assign || function(target) {
            for (var i = 1; i < arguments.length; i++) {
                var source = arguments[i];
                for (var key in source) {
                    if (Object.prototype.hasOwnProperty.call(source, key)) {
                        target[key] = source[key];
                    }
                }
            }
            return target;
        };
        var CSSPropertyOperations = __webpack_require__(56);
        var StyleSheet = __webpack_require__(39);



        function setNativeProps(node, props, component) {
            for (var name in props) {
                if (name === 'style') {
                    CSSPropertyOperations.setValueForStyles(node, StyleSheet.fix(props[name]), component._reactInternalInstance);
                } else if (name === 'pointerEvents') {

                    var style = _extends({},
                        props.style, {
                            pointerEvents: props['pointerEvents']
                        });

                    CSSPropertyOperations.setValueForStyles(node, style, component._reactInternalInstance);
                } else {
                    node.setAttribute(name, props[name]);
                    if (node.props) node.props[name] = props[name];
                }
            }
        }

        module.exports = setNativeProps;

        /***/
    },
    /* 67 */
    /***/
    function(module, exports, __webpack_require__) {

        var _extends = Object.assign || function(target) {
            for (var i = 1; i < arguments.length; i++) {
                var source = arguments[i];
                for (var key in source) {
                    if (Object.prototype.hasOwnProperty.call(source, key)) {
                        target[key] = source[key];
                    }
                }
            }
            return target;
        };



        var React = __webpack_require__(10);
        var StyleSheet = __webpack_require__(39);
        var Touchable = __webpack_require__(68);
        var PropTypes = React.PropTypes;
        var NativeMethodsMixin = __webpack_require__(54);
        var LayoutMixin = __webpack_require__(28);



        var Text = React.createClass({
            displayName: 'Text',
            mixins: [LayoutMixin, NativeMethodsMixin, Touchable.Mixin],

            getDefaultProps: function getDefaultProps() {
                return {
                    ellipsizeMode: 'tail'
                };

            },

            getInitialState: function getInitialState() {
                return _extends({},
                    Touchable.Mixin.touchableGetInitialState(), {
                        isHighlighted: false
                    });

            },

            componentWillMount: function componentWillMount() {
                if (!!this.props.onPress || !!this.props.onLongPress) {
                    this._handlers = {
                        onStartShouldSetResponder: this.touchableHandleStartShouldSetResponder,
                        onResponderTerminationRequest: this.touchableHandleStartShouldSetResponder,
                        onResponderGrant: this.touchableHandleResponderGrant,
                        onResponderMove: this.touchableHandleResponderMove,
                        onResponderRelease: this.touchableHandleResponderRelease,
                        onResponderTerminate: this.touchableHandleResponderTerminate
                    };

                } else {
                    this._handlers = {};
                }
            },

            touchableHandleActivePressIn: function touchableHandleActivePressIn(e) {
                if (this.props.suppressHighlighting) {
                    return;
                }
                this.setState({
                    isHighlighted: true
                });

            },

            touchableHandleActivePressOut: function touchableHandleActivePressOut(e) {
                if (this.props.suppressHighlighting) {
                    return;
                }
                this.setState({
                    isHighlighted: false
                });

            },

            touchableHandlePress: function touchableHandlePress(e) {
                this.props.onPress && this.props.onPress();
            },

            touchableHandleLongPress: function touchableHandleLongPress(e) {
                this.props.onLongPress && this.props.onLongPress();
            },

            render: function render() {
                var children = this.props.children;
                var props = this.props;


                var style = StyleSheet.fix(props.style || {});

                if (typeof props.numberOfLines === 'number') {

                    var lineHeight = style.lineHeight || (parseFloat(style.fontSize) * 100 || 14) * 1.2;
                    var numberOfLinesStyle = props.ellipsizeMode === 'clip' ? {
                        overflow: 'hidden',
                        textOverflow: 'clip',
                        wordWrap: 'break-word',
                        maxHeight: parseFloat(lineHeight) * props.numberOfLines * 100
                    } : {
                        overflow: 'hidden',
                        textOverflow: 'ellipsis',
                        wordWrap: 'break-word',
                        display: '-webkit-box',
                        WebkitLineClamp: props.numberOfLines,
                        WebkitBoxOrient: 'vertical',
                        maxHeight: parseFloat(lineHeight) * props.numberOfLines * 100
                    };

                    style = _extends(style, StyleSheet.fix(numberOfLinesStyle));
                }

                if (this.state.isHighlighted) {
                    style.backgroundColor = '#f1f1f1';
                }


                var fsize = parseFloat(style.fontSize);

                if (fsize < 0.12) {
                    fsize = parseFloat((fsize / 0.12).toFixed(2));
                    var hackStyle = StyleSheet.fix({
                        fontSize: 12,
                        display: 'inline-block',
                        transform: [{
                            scale: fsize
                        }]
                    });
                    children = (this && this.createElement || React.createElement)('span', {
                        style: hackStyle
                    }, children);
                }

                return (
                    (this && this.createElement || React.createElement)('div', _extends({
                                className: 'rn-text'
                            },
                            this.props,
                            this._handlers, {
                                style: style
                            }),

                        children));


            }
        });


        Text.propTypes = {



            ellipsizeMode: PropTypes.oneOf(['head', 'middle', 'tail', 'clip']),



            numberOfLines: PropTypes.number,



            onLayout: PropTypes.func,



            onLongPress: PropTypes.func,



            onPress: PropTypes.func,



            style: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),



            suppressHighlighting: PropTypes.bool
        };


        module.exports = Text;

        /***/
    },
    /* 68 */
    /***/
    function(module, exports, __webpack_require__) {



        'use strict';

        var BoundingDimensions = __webpack_require__(69);
        var Position = __webpack_require__(72);
        var TouchEventUtils = __webpack_require__(73);
        var _require =
            __webpack_require__(74),
            __dispatch = _require.__dispatch;


        var queryLayoutByID = __webpack_require__(83);



        var States = {
            NOT_RESPONDER: "NOT_RESPONDER",
            RESPONDER_INACTIVE_PRESS_IN: "RESPONDER_INACTIVE_PRESS_IN",
            RESPONDER_INACTIVE_PRESS_OUT: "RESPONDER_INACTIVE_PRESS_OUT",
            RESPONDER_ACTIVE_PRESS_IN: "RESPONDER_ACTIVE_PRESS_IN",
            RESPONDER_ACTIVE_PRESS_OUT: "RESPONDER_ACTIVE_PRESS_OUT",
            RESPONDER_ACTIVE_LONG_PRESS_IN: "RESPONDER_ACTIVE_LONG_PRESS_IN",
            RESPONDER_ACTIVE_LONG_PRESS_OUT: "RESPONDER_ACTIVE_LONG_PRESS_OUT",
            ERROR: "ERROR"
        };



        var IsActive = {
            RESPONDER_ACTIVE_PRESS_OUT: true,
            RESPONDER_ACTIVE_PRESS_IN: true
        };



        var IsPressingIn = {
            RESPONDER_INACTIVE_PRESS_IN: true,
            RESPONDER_ACTIVE_PRESS_IN: true,
            RESPONDER_ACTIVE_LONG_PRESS_IN: true
        };


        var IsLongPressingIn = {
            RESPONDER_ACTIVE_LONG_PRESS_IN: true
        };



        var Signals = {
            DELAY: "DELAY",
            RESPONDER_GRANT: "RESPONDER_GRANT",
            RESPONDER_RELEASE: "RESPONDER_RELEASE",
            RESPONDER_TERMINATED: "RESPONDER_TERMINATED",
            ENTER_PRESS_RECT: "ENTER_PRESS_RECT",
            LEAVE_PRESS_RECT: "LEAVE_PRESS_RECT",
            LONG_PRESS_DETECTED: "LONG_PRESS_DETECTED"
        };



        var Transitions = {
            NOT_RESPONDER: {
                DELAY: States.ERROR,
                RESPONDER_GRANT: States.RESPONDER_INACTIVE_PRESS_IN,
                RESPONDER_RELEASE: States.ERROR,
                RESPONDER_TERMINATED: States.ERROR,
                ENTER_PRESS_RECT: States.ERROR,
                LEAVE_PRESS_RECT: States.ERROR,
                LONG_PRESS_DETECTED: States.ERROR
            },

            RESPONDER_INACTIVE_PRESS_IN: {
                DELAY: States.RESPONDER_ACTIVE_PRESS_IN,
                RESPONDER_GRANT: States.ERROR,
                RESPONDER_RELEASE: States.NOT_RESPONDER,
                RESPONDER_TERMINATED: States.NOT_RESPONDER,
                ENTER_PRESS_RECT: States.RESPONDER_INACTIVE_PRESS_IN,
                LEAVE_PRESS_RECT: States.RESPONDER_INACTIVE_PRESS_OUT,

                LONG_PRESS_DETECTED: States.RESPONDER_ACTIVE_LONG_PRESS_IN
            },

            RESPONDER_INACTIVE_PRESS_OUT: {
                DELAY: States.RESPONDER_ACTIVE_PRESS_OUT,
                RESPONDER_GRANT: States.ERROR,
                RESPONDER_RELEASE: States.NOT_RESPONDER,
                RESPONDER_TERMINATED: States.NOT_RESPONDER,
                ENTER_PRESS_RECT: States.RESPONDER_INACTIVE_PRESS_IN,
                LEAVE_PRESS_RECT: States.RESPONDER_INACTIVE_PRESS_OUT,
                LONG_PRESS_DETECTED: States.ERROR
            },

            RESPONDER_ACTIVE_PRESS_IN: {
                DELAY: States.ERROR,
                RESPONDER_GRANT: States.ERROR,
                RESPONDER_RELEASE: States.NOT_RESPONDER,
                RESPONDER_TERMINATED: States.NOT_RESPONDER,
                ENTER_PRESS_RECT: States.RESPONDER_ACTIVE_PRESS_IN,
                LEAVE_PRESS_RECT: States.RESPONDER_ACTIVE_PRESS_OUT,
                LONG_PRESS_DETECTED: States.RESPONDER_ACTIVE_LONG_PRESS_IN
            },

            RESPONDER_ACTIVE_PRESS_OUT: {
                DELAY: States.ERROR,
                RESPONDER_GRANT: States.ERROR,
                RESPONDER_RELEASE: States.NOT_RESPONDER,
                RESPONDER_TERMINATED: States.NOT_RESPONDER,
                ENTER_PRESS_RECT: States.RESPONDER_ACTIVE_PRESS_IN,
                LEAVE_PRESS_RECT: States.RESPONDER_ACTIVE_PRESS_OUT,
                LONG_PRESS_DETECTED: States.ERROR
            },

            RESPONDER_ACTIVE_LONG_PRESS_IN: {
                DELAY: States.ERROR,
                RESPONDER_GRANT: States.ERROR,
                RESPONDER_RELEASE: States.NOT_RESPONDER,
                RESPONDER_TERMINATED: States.NOT_RESPONDER,
                ENTER_PRESS_RECT: States.RESPONDER_ACTIVE_LONG_PRESS_IN,
                LEAVE_PRESS_RECT: States.RESPONDER_ACTIVE_LONG_PRESS_OUT,
                LONG_PRESS_DETECTED: States.RESPONDER_ACTIVE_LONG_PRESS_IN
            },

            RESPONDER_ACTIVE_LONG_PRESS_OUT: {
                DELAY: States.ERROR,
                RESPONDER_GRANT: States.ERROR,
                RESPONDER_RELEASE: States.NOT_RESPONDER,
                RESPONDER_TERMINATED: States.NOT_RESPONDER,
                ENTER_PRESS_RECT: States.RESPONDER_ACTIVE_LONG_PRESS_IN,
                LEAVE_PRESS_RECT: States.RESPONDER_ACTIVE_LONG_PRESS_OUT,
                LONG_PRESS_DETECTED: States.ERROR
            },

            error: {
                DELAY: States.NOT_RESPONDER,
                RESPONDER_GRANT: States.RESPONDER_INACTIVE_PRESS_IN,
                RESPONDER_RELEASE: States.NOT_RESPONDER,
                RESPONDER_TERMINATED: States.NOT_RESPONDER,
                ENTER_PRESS_RECT: States.NOT_RESPONDER,
                LEAVE_PRESS_RECT: States.NOT_RESPONDER,
                LONG_PRESS_DETECTED: States.NOT_RESPONDER
            }
        };



        var HIGHLIGHT_DELAY_MS = 130;

        var PRESS_EXPAND_PX = 20;

        var LONG_PRESS_THRESHOLD = 500;

        var LONG_PRESS_DELAY_MS = LONG_PRESS_THRESHOLD - HIGHLIGHT_DELAY_MS;

        var LONG_PRESS_ALLOWED_MOVEMENT = 10;



        var TouchableMixin = {



            componentWillUnmount: function componentWillUnmount() {
                this.touchableDelayTimeout && clearTimeout(this.touchableDelayTimeout);
                this.longPressDelayTimeout && clearTimeout(this.longPressDelayTimeout);
                this.pressOutDelayTimeout && clearTimeout(this.pressOutDelayTimeout);
            },



            touchableGetInitialState: function touchableGetInitialState() {
                return {
                    touchable: {
                        touchState: undefined,
                        responderID: null
                    }
                };

            },



            touchableHandleResponderTerminationRequest: function touchableHandleResponderTerminationRequest() {
                return !this.props.rejectResponderTermination;
            },



            touchableHandleStartShouldSetResponder: function touchableHandleStartShouldSetResponder() {
                return true;
            },



            touchableLongPressCancelsPress: function touchableLongPressCancelsPress() {
                return true;
            },



            touchableHandleResponderGrant: function touchableHandleResponderGrant(e, dispatchID) {



                e.persist();

                this.pressOutDelayTimeout && clearTimeout(this.pressOutDelayTimeout);
                this.pressOutDelayTimeout = null;

                this.state.touchable.touchState = States.NOT_RESPONDER;
                this.state.touchable.responderID = dispatchID;
                this._receiveSignal(Signals.RESPONDER_GRANT, e);
                var delayMS =
                    this.touchableGetHighlightDelayMS !== undefined ?
                    Math.max(this.touchableGetHighlightDelayMS(), 0) : HIGHLIGHT_DELAY_MS;
                delayMS = isNaN(delayMS) ? HIGHLIGHT_DELAY_MS : delayMS;
                if (delayMS !== 0) {
                    this.touchableDelayTimeout = setTimeout(
                        this._handleDelay.bind(this, e),
                        delayMS);

                } else {
                    this._handleDelay(e);
                }

                var longDelayMS =
                    this.touchableGetLongPressDelayMS !== undefined ?
                    Math.max(this.touchableGetLongPressDelayMS(), 10) : LONG_PRESS_DELAY_MS;
                longDelayMS = isNaN(longDelayMS) ? LONG_PRESS_DELAY_MS : longDelayMS;
                this.longPressDelayTimeout = setTimeout(
                    this._handleLongDelay.bind(this, e),
                    longDelayMS + delayMS);

            },



            touchableHandleResponderRelease: function touchableHandleResponderRelease(e) {


                this._receiveSignal(Signals.RESPONDER_RELEASE, e);
            },



            touchableHandleResponderTerminate: function touchableHandleResponderTerminate(e) {


                this._receiveSignal(Signals.RESPONDER_TERMINATED, e);
            },



            touchableHandleResponderMove: function touchableHandleResponderMove(e) {


                if (this.state.touchable.touchState === States.RESPONDER_INACTIVE_PRESS_IN) {
                    return;
                }


                if (!this.state.touchable.positionOnActivate) {
                    return;
                }

                var positionOnActivate = this.state.touchable.positionOnActivate;
                var dimensionsOnActivate = this.state.touchable.dimensionsOnActivate;
                var pressRectOffset = this.touchableGetPressRectOffset ?
                    this.touchableGetPressRectOffset() : {
                        left: PRESS_EXPAND_PX,
                        right: PRESS_EXPAND_PX,
                        top: PRESS_EXPAND_PX,
                        bottom: PRESS_EXPAND_PX
                    };


                var pressExpandLeft = pressRectOffset.left;
                var pressExpandTop = pressRectOffset.top;
                var pressExpandRight = pressRectOffset.right;
                var pressExpandBottom = pressRectOffset.bottom;

                var hitSlop = this.touchableGetHitSlop ?
                    this.touchableGetHitSlop() : null;

                if (hitSlop) {
                    pressExpandLeft += hitSlop.left;
                    pressExpandTop += hitSlop.top;
                    pressExpandRight += hitSlop.right;
                    pressExpandBottom += hitSlop.bottom;
                }

                var touch = TouchEventUtils.extractSingleTouch(e.nativeEvent);
                var pageX = touch && touch.pageX;
                var pageY = touch && touch.pageY;

                if (this.pressInLocation) {
                    var movedDistance = this._getDistanceBetweenPoints(pageX, pageY, this.pressInLocation.pageX, this.pressInLocation.pageY);
                    if (movedDistance > LONG_PRESS_ALLOWED_MOVEMENT) {
                        this._cancelLongPressDelayTimeout();
                    }
                }

                var isTouchWithinActive =
                    pageX > positionOnActivate.left - pressExpandLeft &&
                    pageY > positionOnActivate.top - pressExpandTop &&
                    pageX <
                    positionOnActivate.left +
                    dimensionsOnActivate.width +
                    pressExpandRight &&
                    pageY <
                    positionOnActivate.top +
                    dimensionsOnActivate.height +
                    pressExpandBottom;
                if (isTouchWithinActive) {
                    this._receiveSignal(Signals.ENTER_PRESS_RECT, e);
                    var curState = this.state.touchable.touchState;
                    if (curState === States.RESPONDER_INACTIVE_PRESS_IN) {

                        this._cancelLongPressDelayTimeout();
                    }
                } else {
                    this._cancelLongPressDelayTimeout();
                    this._receiveSignal(Signals.LEAVE_PRESS_RECT, e);
                }
            },



            _remeasureMetricsOnActivation: function _remeasureMetricsOnActivation() {
                queryLayoutByID(
                    this.state.touchable.responderID,
                    null,
                    this._handleQueryLayout);

            },

            _handleQueryLayout: function _handleQueryLayout(l, t, w, h, globalX, globalY) {
                this.state.touchable.positionOnActivate &&
                    Position.release(this.state.touchable.positionOnActivate);
                this.state.touchable.dimensionsOnActivate &&
                    BoundingDimensions.release(this.state.touchable.dimensionsOnActivate);
                this.state.touchable.positionOnActivate = Position.getPooled(globalX, globalY);
                this.state.touchable.dimensionsOnActivate = BoundingDimensions.getPooled(w, h);
            },

            _handleDelay: function _handleDelay(e) {
                this.touchableDelayTimeout = null;
                this._receiveSignal(Signals.DELAY, e);
            },

            _handleLongDelay: function _handleLongDelay(e) {
                this.longPressDelayTimeout = null;
                var curState = this.state.touchable.touchState;
                if (curState !== States.RESPONDER_ACTIVE_PRESS_IN &&
                    curState !== States.RESPONDER_ACTIVE_LONG_PRESS_IN) {
                    console.error('Attempted to transition from state `' + curState + '` to `' +
                        States.RESPONDER_ACTIVE_LONG_PRESS_IN + '`, which is not supported. This is ' +
                        'most likely due to `Touchable.longPressDelayTimeout` not being cancelled.');
                } else {
                    this._receiveSignal(Signals.LONG_PRESS_DETECTED, e);
                }
            },



            _receiveSignal: function _receiveSignal(signal, e) {
                var curState = this.state.touchable.touchState;
                var nextState = Transitions[curState] && Transitions[curState][signal];



                if (nextState === States.ERROR) {
                    throw new Error(
                        'Touchable cannot transition from `' + curState + '` to `' + signal +
                        '` for responder `' + this.state.touchable.responderID + '`');

                }
                if (curState !== nextState) {
                    this._performSideEffectsForTransition(curState, nextState, signal, e);
                    this.state.touchable.touchState = nextState;
                }
            },

            _cancelLongPressDelayTimeout: function _cancelLongPressDelayTimeout() {
                this.longPressDelayTimeout && clearTimeout(this.longPressDelayTimeout);
                this.longPressDelayTimeout = null;
            },

            _isHighlight: function _isHighlight(state) {
                return state === States.RESPONDER_ACTIVE_PRESS_IN ||
                    state === States.RESPONDER_ACTIVE_LONG_PRESS_IN;
            },

            _savePressInLocation: function _savePressInLocation(e) {
                var touch = TouchEventUtils.extractSingleTouch(e.nativeEvent);
                var pageX = touch && touch.pageX;
                var pageY = touch && touch.pageY;
                var locationX = touch && touch.locationX;
                var locationY = touch && touch.locationY;
                this.pressInLocation = {
                    pageX: pageX,
                    pageY: pageY,
                    locationX: locationX,
                    locationY: locationY
                };
            },

            _getDistanceBetweenPoints: function _getDistanceBetweenPoints(aX, aY, bX, bY) {
                var deltaX = aX - bX;
                var deltaY = aY - bY;
                return Math.sqrt(deltaX * deltaX + deltaY * deltaY);
            },



            _performSideEffectsForTransition: function _performSideEffectsForTransition(curState, nextState, signal, e) {
                var _this = this;
                var curIsHighlight = this._isHighlight(curState);
                var newIsHighlight = this._isHighlight(nextState);

                var isFinalSignal =
                    signal === Signals.RESPONDER_TERMINATED ||
                    signal === Signals.RESPONDER_RELEASE;

                if (isFinalSignal) {
                    this._cancelLongPressDelayTimeout();
                }

                if (!IsActive[curState] && IsActive[nextState]) {
                    this._remeasureMetricsOnActivation();
                }

                if (IsPressingIn[curState] && signal === Signals.LONG_PRESS_DETECTED) {
                    this.touchableHandleLongPress && this.touchableHandleLongPress(e);
                    __dispatch({
                        e: e,
                        type: 'LongPress',
                        target: this
                    });
                }

                if (newIsHighlight && !curIsHighlight) {
                    this._savePressInLocation(e);
                    this.touchableHandleActivePressIn && this.touchableHandleActivePressIn(e);
                } else if (!newIsHighlight && curIsHighlight && this.touchableHandleActivePressOut) {
                    if (this.touchableGetPressOutDelayMS && this.touchableGetPressOutDelayMS()) {
                        this.pressOutDelayTimeout = setTimeout(function() {
                            _this.touchableHandleActivePressOut(e);
                        }, this.touchableGetPressOutDelayMS());
                    } else {
                        this.touchableHandleActivePressOut(e);
                    }
                }

                if (IsPressingIn[curState] && signal === Signals.RESPONDER_RELEASE) {
                    var hasLongPressHandler = !!this.props.onLongPress;
                    var pressIsLongButStillCallOnPress =
                        IsLongPressingIn[curState] && (!hasLongPressHandler ||
                            !this.touchableLongPressCancelsPress());


                    var shouldInvokePress = !IsLongPressingIn[curState] || pressIsLongButStillCallOnPress;
                    if (shouldInvokePress && this.touchableHandlePress) {
                        __dispatch({
                            e: e,
                            type: 'Press',
                            target: this
                        });
                        this.touchableHandlePress(e);
                    }
                }

                this.touchableDelayTimeout && clearTimeout(this.touchableDelayTimeout);
                this.touchableDelayTimeout = null;
            }
        };



        var Touchable = {
            Mixin: TouchableMixin
        };


        module.exports = Touchable;

        /***/
    },
    /* 69 */
    /***/
    function(module, exports, __webpack_require__) {



        'use strict';

        var PooledClass = __webpack_require__(70);

        var twoArgumentPooler = PooledClass.twoArgumentPooler;



        function BoundingDimensions(width, height) {
            this.width = width;
            this.height = height;
        }

        BoundingDimensions.prototype.destructor = function() {
            this.width = null;
            this.height = null;
        };



        BoundingDimensions.getPooledFromElement = function(element) {
            return BoundingDimensions.getPooled(
                element.offsetWidth,
                element.offsetHeight);

        };

        PooledClass.addPoolingTo(BoundingDimensions, twoArgumentPooler);

        module.exports = BoundingDimensions;

        /***/
    },
    /* 70 */
    /***/
    function(module, exports, __webpack_require__) {



        'use strict';

        var _prodInvariant = __webpack_require__(71);

        var invariant = __webpack_require__(19);



        var oneArgumentPooler = function oneArgumentPooler(copyFieldsFrom) {
            var Klass = this;
            if (Klass.instancePool.length) {
                var instance = Klass.instancePool.pop();
                Klass.call(instance, copyFieldsFrom);
                return instance;
            } else {
                return new Klass(copyFieldsFrom);
            }
        };

        var twoArgumentPooler = function twoArgumentPooler(a1, a2) {
            var Klass = this;
            if (Klass.instancePool.length) {
                var instance = Klass.instancePool.pop();
                Klass.call(instance, a1, a2);
                return instance;
            } else {
                return new Klass(a1, a2);
            }
        };

        var threeArgumentPooler = function threeArgumentPooler(a1, a2, a3) {
            var Klass = this;
            if (Klass.instancePool.length) {
                var instance = Klass.instancePool.pop();
                Klass.call(instance, a1, a2, a3);
                return instance;
            } else {
                return new Klass(a1, a2, a3);
            }
        };

        var fourArgumentPooler = function fourArgumentPooler(a1, a2, a3, a4) {
            var Klass = this;
            if (Klass.instancePool.length) {
                var instance = Klass.instancePool.pop();
                Klass.call(instance, a1, a2, a3, a4);
                return instance;
            } else {
                return new Klass(a1, a2, a3, a4);
            }
        };

        var fiveArgumentPooler = function fiveArgumentPooler(a1, a2, a3, a4, a5) {
            var Klass = this;
            if (Klass.instancePool.length) {
                var instance = Klass.instancePool.pop();
                Klass.call(instance, a1, a2, a3, a4, a5);
                return instance;
            } else {
                return new Klass(a1, a2, a3, a4, a5);
            }
        };

        var standardReleaser = function standardReleaser(instance) {
            var Klass = this;
            !(instance instanceof Klass) ? false ? invariant(false, 'Trying to release an instance into a pool of a different type.') : _prodInvariant('25'): void 0;
            instance.destructor();
            if (Klass.instancePool.length < Klass.poolSize) {
                Klass.instancePool.push(instance);
            }
        };

        var DEFAULT_POOL_SIZE = 10;
        var DEFAULT_POOLER = oneArgumentPooler;



        var addPoolingTo = function addPoolingTo(CopyConstructor, pooler) {
            var NewKlass = CopyConstructor;
            NewKlass.instancePool = [];
            NewKlass.getPooled = pooler || DEFAULT_POOLER;
            if (!NewKlass.poolSize) {
                NewKlass.poolSize = DEFAULT_POOL_SIZE;
            }
            NewKlass.release = standardReleaser;
            return NewKlass;
        };

        var PooledClass = {
            addPoolingTo: addPoolingTo,
            oneArgumentPooler: oneArgumentPooler,
            twoArgumentPooler: twoArgumentPooler,
            threeArgumentPooler: threeArgumentPooler,
            fourArgumentPooler: fourArgumentPooler,
            fiveArgumentPooler: fiveArgumentPooler
        };


        module.exports = PooledClass;

        /***/
    },
    /* 71 */
    /***/
    function(module, exports) {

        /* WEBPACK VAR INJECTION */
        (function(global) {



            'use strict';

            function reactProdInvariant(code) {
                var argCount = arguments.length - 1;

                var message = 'Minified React error #' + code + '; visit ' + 'http://facebook.github.io/react/docs/error-decoder.html?invariant=' + code;

                for (var argIdx = 0; argIdx < argCount; argIdx++) {
                    message += '&args[]=' + encodeURIComponent(arguments[argIdx + 1]);
                }

                message += ' for the full message or use the non-minified dev environment' + ' for full errors and additional helpful warnings.';

                var error = new Error(message);
                error.name = 'Invariant Violation';
                error.framesToPop = 1;
                error.__proccessed__ = !!1;
                if (typeof global.__dispatch !== 'undefined') {
                    __dispatch({
                        type: 'error',
                        e: error,
                        code: code
                    });
                }

                throw error;
            }

            module.exports = reactProdInvariant;
            /* WEBPACK VAR INJECTION */
        }.call(exports, (function() {
            return this;
        }())))

        /***/
    },
    /* 72 */
    /***/
    function(module, exports, __webpack_require__) {



        'use strict';

        var PooledClass = __webpack_require__(70);

        var twoArgumentPooler = PooledClass.twoArgumentPooler;



        function Position(left, top) {
            this.left = left;
            this.top = top;
        }

        Position.prototype.destructor = function() {
            this.left = null;
            this.top = null;
        };

        PooledClass.addPoolingTo(Position, twoArgumentPooler);

        module.exports = Position;

        /***/
    },
    /* 73 */
    /***/
    function(module, exports) {

        "use strict";



        var TouchEventUtils = {



            extractSingleTouch: function extractSingleTouch(nativeEvent) {
                var touches = nativeEvent.touches;
                var changedTouches = nativeEvent.changedTouches;
                var hasTouches = touches && touches.length > 0;
                var hasChangedTouches = changedTouches && changedTouches.length > 0;

                return !hasTouches && hasChangedTouches ? changedTouches[0] : hasTouches ? touches[0] : nativeEvent;
            }
        };


        module.exports = TouchEventUtils;

        /***/
    },
    /* 74 */
    /***/
    function(module, exports, __webpack_require__) {

        /* WEBPACK VAR INJECTION */
        (function(global) {
            var _extends = Object.assign || function(target) {
                for (var i = 1; i < arguments.length; i++) {
                    var source = arguments[i];
                    for (var key in source) {
                        if (Object.prototype.hasOwnProperty.call(source, key)) {
                            target[key] = source[key];
                        }
                    }
                }
                return target;
            };



            __webpack_require__(1);



            var React = __webpack_require__(10);
            var ReactDOM = __webpack_require__(10);
            var StyleSheet = __webpack_require__(39);
            var RCTDeviceEventEmitter = global.EventEmitter = __webpack_require__(75);
            var utils = __webpack_require__(80);
            var webViews = global.webViews = {};



            var AppRegistry = {
                _defMd: null,
                _curMd: null,



                __dispatch: function __dispatch(o) {
                    o.moduleName = AppRegistry._curMd;
                    RCTDeviceEventEmitter.emit('rn:_e', o);
                },



                registerConfig: function registerConfig(config) {
                    for (var i = 0; i < config.length; ++i) {
                        var appConfig = config[i];
                        if (appConfig.run) {
                            AppRegistry.registerRunnable(appConfig.appKey, appConfig.run);
                        } else {
                            AppRegistry.registerComponent(appConfig.appKey, appConfig.component);
                        }
                    }
                },



                registerRunnable: function registerRunnable(appKey, func) {
                    webViews[appKey] = {
                        run: function run(node, data) {
                            AppRegistry._curMd = appKey;
                            return func(node, data);
                        }
                    };

                    return appKey;
                },



                runApplication: function runApplication(appKey, parameters) {
                    var app = webViews[appKey || AppRegistry._defMd];
                    if (!app) {
                        alert(appKey + '未注册');
                    } else {
                        app.run(parameters);
                    }
                },



                registerComponent: function registerComponent(appKey, ComponentProvider) {
                    if (!webViews[appKey]) {
                        webViews[appKey] = {
                            run: function run(parameters) {
                                AppRegistry._curMd = appKey;
                                return renderApplication(ComponentProvider, _extends({}, parameters), parameters && parameters.rootTag);
                            }
                        };

                        ComponentProvider.appKey = appKey;
                        if (!this._defMd) this._defMd = appKey;
                    }
                    return appKey;
                },



                unmountApplicationComponentAtRootTag: function unmountApplicationComponentAtRootTag(rootTag) {
                    try {
                        ReactDOM.unmountComponentAtNode(rootTag);
                    } catch (e) {
                        console.log(e);
                    }
                }
            };


            var RootComponent = React.createClass({
                displayName: 'RootComponent',
                render: function render() {
                    var _props =
                        this.props,
                        Component = _props.Component,
                        initProps = _props.initProps;
                    return (
                        (this && this.createElement || React.createElement)('div', {
                                className: 'rn-root'
                            },
                            (this && this.createElement || React.createElement)(Component, _extends({}, initProps, {
                                isQRCTDefCreate: true
                            }))));


                }
            });


            function renderApplication(ComponentProvider, props, rootTag) {
                props = props || {};
                rootTag = rootTag || document.getElementById('rootTag');



                ReactDOM.render(
                    (this && this.createElement || React.createElement)(RootComponent, {
                        Component: ComponentProvider(),
                        initProps: props
                    }),

                    rootTag);
            }

            if (!(process).browser) {
                renderApplication = function renderApplication(ComponentProvider, props) {
                    return (this && this.createElement || React.createElement)(RootComponent, {
                        Component: ComponentProvider(),
                        initProps: props
                    });

                };
            }

            var ReactWebReadyed;

            RCTDeviceEventEmitter.addListener('rn:ready', function(data) {

                StyleSheet.inject(__webpack_require__(81) + __webpack_require__(82).init().join('\n'));
                if ((process).browser) {
                    if (!ReactWebReadyed) {
                        utils.appendChild(document.body, {
                            tagName: 'div',
                            id: 'rootTag',
                            className: 'root-tag'
                        });

                        utils.appendChild(document.body, {
                            tagName: 'div',
                            id: 'modalTag',
                            className: 'rn-flex rn-component-root'
                        });

                        ReactWebReadyed = true;
                    }
                    var
                        moduleName = data.moduleName,
                        _data$initProps = data.initProps,
                        initProps = _data$initProps === undefined ? {} : _data$initProps,
                        app = webViews[moduleName] || webViews[AppRegistry._defMd];
                    app && app.run({
                        rootTag: document.getElementById('rootTag'),
                        initProps: initProps
                    });

                }
            });
            global.__dispatch = AppRegistry.__dispatch;
            module.exports = AppRegistry;
            /* WEBPACK VAR INJECTION */
        }.call(exports, (function() {
            return this;
        }())))

        /***/
    },
    /* 75 */
    /***/
    function(module, exports, __webpack_require__) {



        'use strict';

        var EventEmitter = __webpack_require__(76);

        module.exports = new EventEmitter();

        /***/
    },
    /* 76 */
    /***/
    function(module, exports, __webpack_require__) {

        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor;
            };
        }();

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
            }
        }



        var EmitterSubscription = __webpack_require__(77);
        var EventSubscriptionVendor = __webpack_require__(79);
        var emptyFunction = __webpack_require__(21);
        var invariant = __webpack_require__(19);
        var



            EventEmitter = function() {



            function EventEmitter(subscriber) {
                _classCallCheck(this, EventEmitter);
                this._subscriber = subscriber || new EventSubscriptionVendor();
            }
            _createClass(EventEmitter, [{
                key: 'addListener',
                value: function addListener(



                    eventType, listener, context) {

                    return this._subscriber.addSubscription(
                        eventType,
                        new EmitterSubscription(this, this._subscriber, listener, context));

                }
            }, {
                key: 'once',
                value: function once(



                    eventType, listener, context) {
                    var _this = this;
                    return this.addListener(eventType, function() {
                        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                            args[_key] = arguments[_key];
                        }
                        _this.removeCurrentListener();
                        listener.apply(context, args);
                    });
                }
            }, {
                key: 'removeAllListeners',
                value: function removeAllListeners(



                    eventType) {
                    this._subscriber.removeAllSubscriptions(eventType);
                }
            }, {
                key: 'removeCurrentListener',
                value: function removeCurrentListener()



                {
                    invariant(!!this._currentSubscription,
                        'Not in an emitting cycle; there is no current subscription');

                    this.removeSubscription(this._currentSubscription);
                }
            }, {
                key: 'removeSpecificListener',
                value: function removeSpecificListener(


                    subscription) {
                    this.removeSubscription(subscription);
                }
            }, {
                key: 'removeSubscription',
                value: function removeSubscription(



                    subscription) {
                    invariant(
                        subscription.emitter === this,
                        'Subscription does not belong to this emitter.');

                    this._subscriber.removeSubscription(subscription);
                }
            }, {
                key: 'listeners',
                value: function listeners(



                    eventType) {
                    var subscriptions = this._subscriber.getSubscriptionsForType(eventType);
                    return subscriptions ?
                        subscriptions.filter(emptyFunction.thatReturnsTrue).map(
                            function(subscription) {
                                return subscription.listener;
                            }) : [];
                }
            }, {
                key: 'emit',
                value: function emit(



                    eventType) {
                    var subscriptions = this._subscriber.getSubscriptionsForType(eventType);
                    if (subscriptions) {
                        for (var i = 0, l = subscriptions.length; i < l; i++) {
                            var subscription = subscriptions[i];


                            if (subscription) {
                                this._currentSubscription = subscription;
                                subscription.listener.apply(
                                    subscription.context,
                                    Array.prototype.slice.call(arguments, 1));

                            }
                        }
                        this._currentSubscription = null;
                    }
                }
            }, {
                key: 'removeListener',
                value: function removeListener(



                    eventType, listener) {
                    var subscriptions = this._subscriber.getSubscriptionsForType(eventType);
                    if (subscriptions) {
                        for (var i = 0, l = subscriptions.length; i < l; i++) {
                            var subscription = subscriptions[i];



                            if (subscription && subscription.listener === listener) {
                                subscription.remove();
                            }
                        }
                    }
                }
            }]);
            return EventEmitter;
        }();


        module.exports = EventEmitter;

        /***/
    },
    /* 77 */
    /***/
    function(module, exports, __webpack_require__) {



        'use strict';
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor;
            };
        }();

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
            }
        }

        function _possibleConstructorReturn(self, call) {
            if (!self) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            }
            return call && (typeof call === "object" || typeof call === "function") ? call : self;
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
        }

        var EventSubscription = __webpack_require__(78);
        var



            EmitterSubscription = function(_EventSubscription) {
            _inherits(EmitterSubscription, _EventSubscription);



            function EmitterSubscription(
                emitter,
                subscriber,
                listener,
                context) {
                _classCallCheck(this, EmitterSubscription);
                var _this = _possibleConstructorReturn(this, (EmitterSubscription.__proto__ || Object.getPrototypeOf(EmitterSubscription)).call(this,
                    subscriber));
                _this.emitter = emitter;
                _this.listener = listener;
                _this.context = context;
                return _this;
            }
            _createClass(EmitterSubscription, [{
                key: 'remove',
                value: function remove()



                {
                    this.emitter.removeSubscription(this);
                }
            }]);
            return EmitterSubscription;
        }(EventSubscription);


        module.exports = EmitterSubscription;

        /***/
    },
    /* 78 */
    /***/
    function(module, exports) {



        'use strict';
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor;
            };
        }();

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
            }
        }
        var



            EventSubscription = function() {



            function EventSubscription(subscriber) {
                _classCallCheck(this, EventSubscription);
                this.subscriber = subscriber;
            }
            _createClass(EventSubscription, [{
                key: 'remove',
                value: function remove()



                {
                    this.subscriber.removeSubscription(this);
                }
            }]);
            return EventSubscription;
        }();


        module.exports = EventSubscription;

        /***/
    },
    /* 79 */
    /***/
    function(module, exports, __webpack_require__) {



        'use strict';
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor;
            };
        }();

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
            }
        }

        var invariant = __webpack_require__(19);
        var



            EventSubscriptionVendor = function() {



            function EventSubscriptionVendor() {
                _classCallCheck(this, EventSubscriptionVendor);
                this._subscriptionsForType = {};
                this._currentSubscription = null;
            }
            _createClass(EventSubscriptionVendor, [{
                key: 'addSubscription',
                value: function addSubscription(



                    eventType, subscription) {
                    invariant(
                        subscription.subscriber === this,
                        'The subscriber of the subscription is incorrectly set.');
                    if (!this._subscriptionsForType[eventType]) {
                        this._subscriptionsForType[eventType] = [];
                    }
                    var key = this._subscriptionsForType[eventType].length;
                    this._subscriptionsForType[eventType].push(subscription);
                    subscription.eventType = eventType;
                    subscription.key = key;
                    return subscription;
                }
            }, {
                key: 'removeAllSubscriptions',
                value: function removeAllSubscriptions(



                    eventType) {
                    if (eventType === undefined) {
                        this._subscriptionsForType = {};
                    } else {
                        delete this._subscriptionsForType[eventType];
                    }
                }
            }, {
                key: 'removeSubscription',
                value: function removeSubscription(



                    subscription) {
                    var eventType = subscription.eventType;
                    var key = subscription.key;

                    var subscriptionsForType = this._subscriptionsForType[eventType];
                    if (subscriptionsForType) {
                        delete subscriptionsForType[key];
                    }
                }
            }, {
                key: 'getSubscriptionsForType',
                value: function getSubscriptionsForType(



                    eventType) {
                    return this._subscriptionsForType[eventType];
                }
            }]);
            return EventSubscriptionVendor;
        }();


        module.exports = EventSubscriptionVendor;

        /***/
    },
    /* 80 */
    /***/
    function(module, exports) {



        var utils = {
            getElementById: function getElementById(id) {
                return document.getElementById(id);
            },



            appendChild: function appendChild(target, props) {
                if (props.id && utils.getElementById(props.id)) {
                    return;
                }
                var element = document.createElement(props.tagName);
                for (var prop in props) {
                    element[prop] = props[prop];
                }
                target.appendChild(element);
                return element;
            },



            addClass: function addClass(ele, className) {
                if (!ele || !className) {
                    return;
                }
                if (ele.classList) {
                    ele.classList.add(className);
                } else {

                    var classList = ele.className.split(/\s+/);
                    if (classList.indexOf(className) === -1) {
                        classList.push(className);
                        ele.className = classList.join(' ');
                    }
                }
            },



            removeClass: function removeClass(ele, className) {
                if (!ele || !className) {
                    return;
                }
                if (ele.classList) {
                    ele.classList.remove(className);
                } else {

                    var classList = ele.className.split(/\s+/);
                    var index = classList.indexOf(className);
                    if (index !== -1) {
                        classList.splice(index, 1);
                        ele.className = classList.join(' ');
                    }
                }
            },
            parseDataFromUrl: function parseDataFromUrl(Location) {
                var search = Location.search.trim().match(/(qInitView|name|hybridId|moduleName|opts|initProps)+=[^\?&]*/g) || [],
                    res = {};
                search.forEach(function(_item) {
                    try {
                        var item = decodeURIComponent(_item).match(/([^=]+)=([\S\s]*)$/);
                        if (item) {
                            res[item[1]] = item[1] === 'initProps' || item[1] === 'opts' ? JSON.parse(item[2]) : item[2];
                        }
                    } catch (e) {
                        console.warn('解析 ' + _item + ' 失败');
                    }
                });
                if ('qInitView' in res && !('name' in res)) {
                    res.name = res.qInitView;
                }
                if ('initProps' in res && !('opts' in res)) {
                    res.opts = res.initProps;
                }
                return res;
            },
            jsonToQuery: function jsonToQuery(json) {
                var ignoreKeys = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
                var res = [];
                for (var i in json) {
                    var type = typeof json[i];
                    if (!(i in ignoreKeys) && type !== 'function') {
                        res.push(i + '=' + encodeURIComponent(type.match(/array|object/i) ? JSON.stringify(json[i]) : json[i]));
                    }
                }
                return res.join('&');
            }
        };


        module.exports = utils;

        /***/
    },
    /* 81 */
    /***/
    function(module, exports, __webpack_require__) {



        var flexboxSpec = __webpack_require__(45);
        var flexStyle;


        if (flexboxSpec === '2009') {
            flexStyle = 'box-sizing: border-box;\n      display: -webkit-box;\n      -webkit-box-orient: vertical;\n      -webkit-box-direction: normal;\n    ';



        } else if (flexboxSpec === '2011') {
            flexStyle = 'box-sizing: border-box;\n      display: -webkit-flex;\n      -webkit-flex-direction: column;';


        } else {
            flexStyle = 'box-sizing: border-box;\n      display: flex;\n      flex-direction: column;';


        }



        var css = ['\nhtml {\n    font-size: 100px;\n    overflow:hidden;\n    height:100%;\n    font-family: "PingFang SC, Helvetica Neue, Helvetica, STHeiTi, sans-serif";\n}\nbody {\n    margin: 0;\n    height:100%;\n    line-height: 1.2;\n}\n.rn-view,.rn-flex {\n    position: relative;\n    ' +



            flexStyle + '\n}\n\n.root-tag{\n    height:100%;\n    width:100%;\n    position:relative;\n    z-index:1;\n}\n.rn-component-root{\n    height:100%;\n    width:100%;\n    position:absolute;\n    z-index:-1;\n    left:0;\n    top:0;\n}\n.rn-root{\n    position:absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    ' +



            flexStyle + '\n}\n.rn-global-compontent{\n  position:absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  ' +



            flexStyle + '\n}\ndiv,span,img {\n    border-width: 0;\n    border-style: solid;\n    border-color: black;\n    font-size: 0.14rem;\n}\nspan {\n    box-sizing:border-box;\n}\ndiv,span,img {\n    outline: none;\n    -webkit-tap-highlight-color: transparent;\n}\n.rn-hidden {display:none;}\n\n.pointer-events-none {\n    pointer-events: none;\n}\n.pointer-events-auto {\n    pointer-events: auto;\n}\n.pointer-events-box-none {\n    pointer-events: none;\n}\n.pointer-events-box-none * {\n    pointer-events: auto;\n}\n.pointer-events-box-only {\n    pointer-events: auto;\n}\n.pointer-events-box-only * {\n    pointer-events: none;\n}\n\n.simpleFlexWrap > div{\n    float:left;\n}\n\n', '\n/*fade*/\n@-webkit-keyframes fade {\n  from {\n    opacity: 0;\n  }\n  to {\n    opacity: 1;\n  }\n}\n@keyframes fade {\n  from {\n    opacity: 0;\n  }\n  to {\n    opacity: 1;\n  }\n}\n/*slideFromBottom*/\n@-webkit-keyframes slideFromBottom {\n  from {\n    -webkit-transform: translate3d(0, 200%, 0);\n    transform: translate3d(0, 200%, 0);\n    visibility: visible;\n  }\n\n  to {\n    -webkit-transform: translate3d(0, 0, 0);\n    transform: translate3d(0, 0, 0);\n  }\n}\n\n@keyframes slideFromBottom {\n  from {\n    -webkit-transform: translate3d(0, 200%, 0);\n    transform: translate3d(0, 200%, 0);\n    visibility: visible;\n  }\n\n  to {\n    -webkit-transform: translate3d(0, 0, 0);\n    transform: translate3d(0, 0, 0);\n  }\n}\n/*slideFromLeft*/\n@-webkit-keyframes slideFromLeft {\n  from {\n    -webkit-transform: translate3d(-100%, 0, 0);\n    transform: translate3d(-100%, 0, 0);\n    visibility: visible;\n  }\n\n  to {\n    -webkit-transform: translate3d(0, 0, 0);\n    transform: translate3d(0, 0, 0);\n  }\n}\n\n@keyframes slideFromLeft {\n  from {\n    -webkit-transform: translate3d(-100%, 0, 0);\n    transform: translate3d(-100%, 0, 0);\n    visibility: visible;\n  }\n\n  to {\n    -webkit-transform: translate3d(0, 0, 0);\n    transform: translate3d(0, 0, 0);\n  }\n}\n/*slideFromRight*/\n@-webkit-keyframes slideFromRight {\n  from {\n    -webkit-transform: translate3d(100%, 0, 0);\n    transform: translate3d(100%, 0, 0);\n    visibility: visible;\n  }\n\n  to {\n    -webkit-transform: translate3d(0, 0, 0);\n    transform: translate3d(0, 0, 0);\n  }\n}\n\n@keyframes slideFromRight {\n  from {\n    -webkit-transform: translate3d(100%, 0, 0);\n    transform: translate3d(100%, 0, 0);\n    visibility: visible;\n  }\n\n  to {\n    -webkit-transform: translate3d(0, 0, 0);\n    transform: translate3d(0, 0, 0);\n  }\n}\n/*slideFromTop*/\n@-webkit-keyframes slideFromTop {\n  from {\n    -webkit-transform: translate3d(0, -200%, 0);\n    transform: translate3d(0, -200%, 0);\n    visibility: visible;\n  }\n\n  to {\n    -webkit-transform: translate3d(0, 0, 0);\n    transform: translate3d(0, 0, 0);\n  }\n}\n\n@keyframes slideFromTop {\n  from {\n    -webkit-transform: translate3d(0, -200%, 0);\n    transform: translate3d(0, -200%, 0);\n    visibility: visible;\n  }\n\n  to {\n    -webkit-transform: translate3d(0, 0, 0);\n    transform: translate3d(0, 0, 0);\n  }\n}\n\n@keyframes darken {\n  from {\n    background-color: rgba(0,0,0,0);\n  }\n}\n@-webkit-keyframes darken {\n  from {\n    background-color: rgba(0,0,0,0);\n  }\n}\n\n.rn-modal-wrapper{\n    animation: darken .3s linear;\n    -webkit-animation: darken .3s linear;\n}\n\n.rn-modal-animated{\n    -webkit-animation-duration: .3s;\n    animation-duration: .3s;\n    -webkit-animation-timing-function: ease-out;\n    animation-timing-function: ease-out;\n    -webkit-animation-fill-mode: both;\n    animation-fill-mode: both;\n    -webkit-animation-play-state: paused;\n    animation-play-state: paused;\n}', '\n.rn-text > .rn-view{\n   display:inline-block;\n}\n.rn-text > .rn-text {\n     display:inline;\n     font-size:inherit;\n}\n', '\n.rn-picker{\n    position: relative;\n    overflow: hidden;\n    width: 100%;\n}\n.rn-picker-scroller{\n    border-width: 0;\n    will-change: transform;\n}\n.rn-picker-item {\n    width: 100%;\n    text-align: center;\n}\n.rn-picker-mask{\n    position: absolute;\n    left: 0px;\n    top: 0px;\n    height: 100%;\n    width: 100%;\n    background-image: -webkit-linear-gradient(top,rgba(255, 255, 255, 0.952941), rgba(255, 255, 255, 0.6)), -webkit-linear-gradient(0deg, rgba(255, 255, 255, 0.952941), rgba(255, 255, 255, 0.6));\n    background-image: linear-gradient(rgba(255, 255, 255, 0.952941), rgba(255, 255, 255, 0.6)), linear-gradient(0deg, rgba(255, 255, 255, 0.952941), rgba(255, 255, 255, 0.6));\n    margin: 0px auto;\n    background-repeat: no-repeat;\n    background-position: left top, left bottom;\n}\n.rn-picker-window{\n    width: 100%;\n    position: absolute;\n    left: 0px;\n    top: 50%;\n    z-index: 3;\n    border-color: #ccc;\n    border-style: solid;\n    border-top-width: 1px;\n    border-bottom-width: 1px;\n    background-size: 100% 1px;\n    background-position: top, bottom;\n    background-repeat: no-repeat;\n}', '.resize-triggers {\n    visibility: hidden;\n    opacity: 0;\n  z-index: -1;\n  }\n\n.resize-triggers,\n.expand-trigger,\n.contract-trigger,\n.contract-trigger:before {\n    content: " ";\n    display: block;\n    position: absolute;\n    top: 0;\n    left: 0;\n    height: 100%;\n    width: 100%;\n    overflow: hidden;\n}\n\n\n\n.contract-trigger:before {\n    width: 200%;\n    height: 200%;\n}', '.rn-scroller-vert{\n    min-height:100%;\n    width:100%;\n}\n\n.rn-scroller-hori{\n    min-width:100%;\n    height:100%;\n}\n\n.rn-scroller-hori > *{\n    flex-shrink:0;\n    -webkit-flex-shrink:0;\n}'
        ].



        join('\n');


        module.exports = css;

        /***/
    },
    /* 82 */
    /***/
    function(module, exports) {



        'user strict';
        var _extends = Object.assign || function(target) {
            for (var i = 1; i < arguments.length; i++) {
                var source = arguments[i];
                for (var key in source) {
                    if (Object.prototype.hasOwnProperty.call(source, key)) {
                        target[key] = source[key];
                    }
                }
            }
            return target;
        };
        var fontSet = {};


        module.exports = {
            regist: function regist() {
                var i = 0;
                while (arguments[i]) {
                    fontSet = _extends({}, fontSet, arguments[i]);
                    i++;
                }
            },
            init: function init() {
                var fontStyle = [];
                for (var font in fontSet) {
                    fontStyle.push('@font-face{font-family:' + font + ';src:url("' + String(fontSet[font]).replace(/^http:/g, "") + '") format("truetype")}');
                }
                fontSet = {};
                return fontStyle;
            }
        };

        /***/
    },
    /* 83 */
    /***/
    function(module, exports, __webpack_require__) {



        'use strict';

        var UIManager = __webpack_require__(55);



        var queryLayoutByID = function queryLayoutByID(
            tag,
            onError,
            onSuccess) {
            if (tag == null) {
                return;
            }

            UIManager.measure(
                tag,
                onSuccess);

        };

        module.exports = queryLayoutByID;

        /***/
    },
    /* 84 */
    /***/
    function(module, exports, __webpack_require__) {

        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor;
            };
        }();



        var _react = __webpack_require__(10);
        var _react2 = _interopRequireDefault(_react);
        var _reactDom = __webpack_require__(10);
        var _reactDom2 = _interopRequireDefault(_reactDom);
        var _findIndex = __webpack_require__(85);
        var _findIndex2 = _interopRequireDefault(_findIndex);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
            }
        }

        function _possibleConstructorReturn(self, call) {
            if (!self) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            }
            return call && (typeof call === "object" || typeof call === "function") ? call : self;
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
        }

        var _id = 1;
        var


            ModalComponentRoot = function(_Component) {
            _inherits(ModalComponentRoot, _Component);

            function ModalComponentRoot(props) {
                _classCallCheck(this, ModalComponentRoot);
                var _this = _possibleConstructorReturn(this, (ModalComponentRoot.__proto__ || Object.getPrototypeOf(ModalComponentRoot)).call(this,
                    props));
                _this.upper = [];
                _this.middle = [];
                _this.lower = [];
                if (props.components) {
                    props.components.forEach(function(component) {
                        _this.addComponent(component, null, !'forceUpdate');
                    });
                }
                return _this;
            }
            _createClass(ModalComponentRoot, [{
                key: 'addComponent',
                value: function addComponent(
                    ModalComponent, callback, noForceUpdate) {
                    var key = ModalComponent.key;
                    var layer = key.split('-')[0];

                    var index = (0, _findIndex2.default)(this[layer], function(item) {
                        return item.id === key;
                    });

                    if (index === -1) {
                        this[layer].push({
                            component: ModalComponent,
                            id: key
                        });

                    } else {
                        this[layer][index] = {
                            component: ModalComponent,
                            id: key
                        };

                    }

                    if (!noForceUpdate) this.forceUpdate(callback);
                }
            }, {
                key: 'removeComponent',
                value: function removeComponent(
                    id, callback) {
                    var layer = id.split('-')[0];
                    if (!id) {
                        this.upper = [];
                        this.middle = [];
                        this.lower = [];
                    } else {
                        var index = (0, _findIndex2.default)(this[layer], function(item) {
                            return item.id === id;
                        });
                        if (index !== -1) {
                            this[layer].splice(index, 1);
                        }
                    }
                    this.forceUpdate(callback);
                }
            }, {
                key: 'render',
                value: function render()

                {
                    if ((process).browser) {
                        if (this.upper.length + this.middle.length + this.lower.length > 0) {
                            document.getElementById('modalTag').style.zIndex = 2;
                        } else {
                            document.getElementById('modalTag').style.zIndex = -1;
                        }
                    }
                    return (
                        (this && this.createElement || _react2.default.createElement)('div', {
                                className: 'rn-root'
                            },

                            this.lower.length > 0 ?


                            (this && this.createElement || _react2.default.createElement)('div', {
                                    className: 'rn-global-compontent'
                                },

                                this.lower.map(function(value, key) {
                                    return value.component;
                                })) :



                            null,


                            this.middle.length > 0 ?


                            (this && this.createElement || _react2.default.createElement)('div', {
                                    className: 'rn-global-compontent'
                                },

                                this.middle.map(function(value, key) {
                                    return value.component;
                                })) :



                            null,


                            this.upper.length > 0 ?


                            (this && this.createElement || _react2.default.createElement)('div', {
                                    className: 'rn-global-compontent'
                                },

                                this.upper.map(function(value, key) {
                                    return value.component;
                                })) :



                            null));



                }
            }]);
            return ModalComponentRoot;
        }(_react.Component);


        var modalControl = {

            getGid: function getGid() {
                return _id++;
            },
            modalComponentRoot: null,
            _ModalComponentRoot: ModalComponentRoot,
            init: function init() {

                if (!this.modalComponentRoot) {
                    this.modalComponentRoot = _reactDom2.default.render(
                        (this && this.createElement || _react2.default.createElement)(ModalComponentRoot, null),
                        document.getElementById('modalTag'));
                }
            },
            mount: function mount(ModalComponent, callback) {
                this.init();
                this.modalComponentRoot.addComponent(ModalComponent, callback);
            },

            destory: function destory(id, callback) {
                this.modalComponentRoot && this.modalComponentRoot.removeComponent(id, callback);
            }
        };


        module.exports = modalControl;

        /***/
    },
    /* 85 */
    /***/
    function(module, exports, __webpack_require__) {

        var baseFindIndex = __webpack_require__(86),
            baseIteratee = __webpack_require__(87),
            toInteger = __webpack_require__(183);


        var nativeMax = Math.max;



        function findIndex(array, predicate, fromIndex) {
            var length = array ? array.length : 0;
            if (!length) {
                return -1;
            }
            var index = fromIndex == null ? 0 : toInteger(fromIndex);
            if (index < 0) {
                index = nativeMax(length + index, 0);
            }
            return baseFindIndex(array, baseIteratee(predicate, 3), index);
        }

        module.exports = findIndex;

        /***/
    },
    /* 86 */
    /***/
    function(module, exports) {



        function baseFindIndex(array, predicate, fromIndex, fromRight) {
            var length = array.length,
                index = fromIndex + (fromRight ? 1 : -1);

            while (fromRight ? index-- : ++index < length) {
                if (predicate(array[index], index, array)) {
                    return index;
                }
            }
            return -1;
        }

        module.exports = baseFindIndex;

        /***/
    },
    /* 87 */
    /***/
    function(module, exports, __webpack_require__) {

        var baseMatches = __webpack_require__(88),
            baseMatchesProperty = __webpack_require__(167),
            identity = __webpack_require__(180),
            isArray = __webpack_require__(154),
            property = __webpack_require__(181);



        function baseIteratee(value) {


            if (typeof value == 'function') {
                return value;
            }
            if (value == null) {
                return identity;
            }
            if (typeof value == 'object') {
                return isArray(value) ?
                    baseMatchesProperty(value[0], value[1]) :
                    baseMatches(value);
            }
            return property(value);
        }

        module.exports = baseIteratee;

        /***/
    },
    /* 88 */
    /***/
    function(module, exports, __webpack_require__) {

        var baseIsMatch = __webpack_require__(89),
            getMatchData = __webpack_require__(164),
            matchesStrictComparable = __webpack_require__(166);



        function baseMatches(source) {
            var matchData = getMatchData(source);
            if (matchData.length == 1 && matchData[0][2]) {
                return matchesStrictComparable(matchData[0][0], matchData[0][1]);
            }
            return function(object) {
                return object === source || baseIsMatch(object, source, matchData);
            };
        }

        module.exports = baseMatches;

        /***/
    },
    /* 89 */
    /***/
    function(module, exports, __webpack_require__) {

        var Stack = __webpack_require__(90),
            baseIsEqual = __webpack_require__(129);


        var UNORDERED_COMPARE_FLAG = 1,
            PARTIAL_COMPARE_FLAG = 2;



        function baseIsMatch(object, source, matchData, customizer) {
            var index = matchData.length,
                length = index,
                noCustomizer = !customizer;

            if (object == null) {
                return !length;
            }
            object = Object(object);
            while (index--) {
                var data = matchData[index];
                if (noCustomizer && data[2] ?
                    data[1] !== object[data[0]] :
                    !(data[0] in object)) {
                    return false;
                }
            }
            while (++index < length) {
                data = matchData[index];
                var key = data[0],
                    objValue = object[key],
                    srcValue = data[1];

                if (noCustomizer && data[2]) {
                    if (objValue === undefined && !(key in object)) {
                        return false;
                    }
                } else {
                    var stack = new Stack();
                    if (customizer) {
                        var result = customizer(objValue, srcValue, key, object, source, stack);
                    }
                    if (!(result === undefined ?
                            baseIsEqual(srcValue, objValue, customizer, UNORDERED_COMPARE_FLAG | PARTIAL_COMPARE_FLAG, stack) :
                            result)) {
                        return false;
                    }
                }
            }
            return true;
        }

        module.exports = baseIsMatch;

        /***/
    },
    /* 90 */
    /***/
    function(module, exports, __webpack_require__) {

        var ListCache = __webpack_require__(91),
            stackClear = __webpack_require__(99),
            stackDelete = __webpack_require__(100),
            stackGet = __webpack_require__(101),
            stackHas = __webpack_require__(102),
            stackSet = __webpack_require__(103);



        function Stack(entries) {
            this.__data__ = new ListCache(entries);
        }


        Stack.prototype.clear = stackClear;
        Stack.prototype['delete'] = stackDelete;
        Stack.prototype.get = stackGet;
        Stack.prototype.has = stackHas;
        Stack.prototype.set = stackSet;

        module.exports = Stack;

        /***/
    },
    /* 91 */
    /***/
    function(module, exports, __webpack_require__) {

        var listCacheClear = __webpack_require__(92),
            listCacheDelete = __webpack_require__(93),
            listCacheGet = __webpack_require__(96),
            listCacheHas = __webpack_require__(97),
            listCacheSet = __webpack_require__(98);



        function ListCache(entries) {
            var index = -1,
                length = entries ? entries.length : 0;

            this.clear();
            while (++index < length) {
                var entry = entries[index];
                this.set(entry[0], entry[1]);
            }
        }


        ListCache.prototype.clear = listCacheClear;
        ListCache.prototype['delete'] = listCacheDelete;
        ListCache.prototype.get = listCacheGet;
        ListCache.prototype.has = listCacheHas;
        ListCache.prototype.set = listCacheSet;

        module.exports = ListCache;

        /***/
    },
    /* 92 */
    /***/
    function(module, exports) {



        function listCacheClear() {
            this.__data__ = [];
        }

        module.exports = listCacheClear;

        /***/
    },
    /* 93 */
    /***/
    function(module, exports, __webpack_require__) {

        var assocIndexOf = __webpack_require__(94);


        var arrayProto = Array.prototype;


        var splice = arrayProto.splice;



        function listCacheDelete(key) {
            var data = this.__data__,
                index = assocIndexOf(data, key);

            if (index < 0) {
                return false;
            }
            var lastIndex = data.length - 1;
            if (index == lastIndex) {
                data.pop();
            } else {
                splice.call(data, index, 1);
            }
            return true;
        }

        module.exports = listCacheDelete;

        /***/
    },
    /* 94 */
    /***/
    function(module, exports, __webpack_require__) {

        var eq = __webpack_require__(95);



        function assocIndexOf(array, key) {
            var length = array.length;
            while (length--) {
                if (eq(array[length][0], key)) {
                    return length;
                }
            }
            return -1;
        }

        module.exports = assocIndexOf;

        /***/
    },
    /* 95 */
    /***/
    function(module, exports) {



        function eq(value, other) {
            return value === other || value !== value && other !== other;
        }

        module.exports = eq;

        /***/
    },
    /* 96 */
    /***/
    function(module, exports, __webpack_require__) {

        var assocIndexOf = __webpack_require__(94);



        function listCacheGet(key) {
            var data = this.__data__,
                index = assocIndexOf(data, key);

            return index < 0 ? undefined : data[index][1];
        }

        module.exports = listCacheGet;

        /***/
    },
    /* 97 */
    /***/
    function(module, exports, __webpack_require__) {

        var assocIndexOf = __webpack_require__(94);



        function listCacheHas(key) {
            return assocIndexOf(this.__data__, key) > -1;
        }

        module.exports = listCacheHas;

        /***/
    },
    /* 98 */
    /***/
    function(module, exports, __webpack_require__) {

        var assocIndexOf = __webpack_require__(94);



        function listCacheSet(key, value) {
            var data = this.__data__,
                index = assocIndexOf(data, key);

            if (index < 0) {
                data.push([key, value]);
            } else {
                data[index][1] = value;
            }
            return this;
        }

        module.exports = listCacheSet;

        /***/
    },
    /* 99 */
    /***/
    function(module, exports, __webpack_require__) {

        var ListCache = __webpack_require__(91);



        function stackClear() {
            this.__data__ = new ListCache();
        }

        module.exports = stackClear;

        /***/
    },
    /* 100 */
    /***/
    function(module, exports) {



        function stackDelete(key) {
            return this.__data__['delete'](key);
        }

        module.exports = stackDelete;

        /***/
    },
    /* 101 */
    /***/
    function(module, exports) {



        function stackGet(key) {
            return this.__data__.get(key);
        }

        module.exports = stackGet;

        /***/
    },
    /* 102 */
    /***/
    function(module, exports) {



        function stackHas(key) {
            return this.__data__.has(key);
        }

        module.exports = stackHas;

        /***/
    },
    /* 103 */
    /***/
    function(module, exports, __webpack_require__) {

        var ListCache = __webpack_require__(91),
            MapCache = __webpack_require__(104);


        var LARGE_ARRAY_SIZE = 200;



        function stackSet(key, value) {
            var cache = this.__data__;
            if (cache instanceof ListCache && cache.__data__.length == LARGE_ARRAY_SIZE) {
                cache = this.__data__ = new MapCache(cache.__data__);
            }
            cache.set(key, value);
            return this;
        }

        module.exports = stackSet;

        /***/
    },
    /* 104 */
    /***/
    function(module, exports, __webpack_require__) {

        var mapCacheClear = __webpack_require__(105),
            mapCacheDelete = __webpack_require__(123),
            mapCacheGet = __webpack_require__(126),
            mapCacheHas = __webpack_require__(127),
            mapCacheSet = __webpack_require__(128);



        function MapCache(entries) {
            var index = -1,
                length = entries ? entries.length : 0;

            this.clear();
            while (++index < length) {
                var entry = entries[index];
                this.set(entry[0], entry[1]);
            }
        }


        MapCache.prototype.clear = mapCacheClear;
        MapCache.prototype['delete'] = mapCacheDelete;
        MapCache.prototype.get = mapCacheGet;
        MapCache.prototype.has = mapCacheHas;
        MapCache.prototype.set = mapCacheSet;

        module.exports = MapCache;

        /***/
    },
    /* 105 */
    /***/
    function(module, exports, __webpack_require__) {

        var Hash = __webpack_require__(106),
            ListCache = __webpack_require__(91),
            Map = __webpack_require__(122);



        function mapCacheClear() {
            this.__data__ = {
                'hash': new Hash(),
                'map': new(Map || ListCache)(),
                'string': new Hash()
            };

        }

        module.exports = mapCacheClear;

        /***/
    },
    /* 106 */
    /***/
    function(module, exports, __webpack_require__) {

        var hashClear = __webpack_require__(107),
            hashDelete = __webpack_require__(118),
            hashGet = __webpack_require__(119),
            hashHas = __webpack_require__(120),
            hashSet = __webpack_require__(121);



        function Hash(entries) {
            var index = -1,
                length = entries ? entries.length : 0;

            this.clear();
            while (++index < length) {
                var entry = entries[index];
                this.set(entry[0], entry[1]);
            }
        }


        Hash.prototype.clear = hashClear;
        Hash.prototype['delete'] = hashDelete;
        Hash.prototype.get = hashGet;
        Hash.prototype.has = hashHas;
        Hash.prototype.set = hashSet;

        module.exports = Hash;

        /***/
    },
    /* 107 */
    /***/
    function(module, exports, __webpack_require__) {

        var nativeCreate = __webpack_require__(108);



        function hashClear() {
            this.__data__ = nativeCreate ? nativeCreate(null) : {};
        }

        module.exports = hashClear;

        /***/
    },
    /* 108 */
    /***/
    function(module, exports, __webpack_require__) {

        var getNative = __webpack_require__(109);


        var nativeCreate = getNative(Object, 'create');

        module.exports = nativeCreate;

        /***/
    },
    /* 109 */
    /***/
    function(module, exports, __webpack_require__) {

        var baseIsNative = __webpack_require__(110),
            getValue = __webpack_require__(117);



        function getNative(object, key) {
            var value = getValue(object, key);
            return baseIsNative(value) ? value : undefined;
        }

        module.exports = getNative;

        /***/
    },
    /* 110 */
    /***/
    function(module, exports, __webpack_require__) {

        var isFunction = __webpack_require__(36),
            isHostObject = __webpack_require__(111),
            isMasked = __webpack_require__(112),
            isObject = __webpack_require__(33),
            toSource = __webpack_require__(116);



        var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;


        var reIsHostCtor = /^\[object .+?Constructor\]$/;


        var objectProto = Object.prototype;


        var funcToString = Function.prototype.toString;


        var hasOwnProperty = objectProto.hasOwnProperty;


        var reIsNative = RegExp('^' +
            funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&').replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$');



        function baseIsNative(value) {
            if (!isObject(value) || isMasked(value)) {
                return false;
            }
            var pattern = isFunction(value) || isHostObject(value) ? reIsNative : reIsHostCtor;
            return pattern.test(toSource(value));
        }

        module.exports = baseIsNative;

        /***/
    },
    /* 111 */
    /***/
    function(module, exports) {



        function isHostObject(value) {


            var result = false;
            if (value != null && typeof value.toString != 'function') {
                try {
                    result = !!(value + '');
                } catch (e) {}
            }
            return result;
        }

        module.exports = isHostObject;

        /***/
    },
    /* 112 */
    /***/
    function(module, exports, __webpack_require__) {

        var coreJsData = __webpack_require__(113);


        var maskSrcKey = function() {
            var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
            return uid ? 'Symbol(src)_1.' + uid : '';
        }();



        function isMasked(func) {
            return !!maskSrcKey && maskSrcKey in func;
        }

        module.exports = isMasked;

        /***/
    },
    /* 113 */
    /***/
    function(module, exports, __webpack_require__) {

        var root = __webpack_require__(114);


        var coreJsData = root['__core-js_shared__'];

        module.exports = coreJsData;

        /***/
    },
    /* 114 */
    /***/
    function(module, exports, __webpack_require__) {

        /* WEBPACK VAR INJECTION */
        (function(global) {
            var checkGlobal = __webpack_require__(115);


            var freeGlobal = checkGlobal(typeof global == 'object' && global);


            var freeSelf = checkGlobal(typeof self == 'object' && self);


            var thisGlobal = checkGlobal(typeof this == 'object' && this);


            var root = freeGlobal || freeSelf || thisGlobal || Function('return this')();

            module.exports = root;
            /* WEBPACK VAR INJECTION */
        }.call(exports, (function() {
            return this;
        }())))

        /***/
    },
    /* 115 */
    /***/
    function(module, exports) {



        function checkGlobal(value) {
            return value && value.Object === Object ? value : null;
        }

        module.exports = checkGlobal;

        /***/
    },
    /* 116 */
    /***/
    function(module, exports) {


        var funcToString = Function.prototype.toString;



        function toSource(func) {
            if (func != null) {
                try {
                    return funcToString.call(func);
                } catch (e) {}
                try {
                    return func + '';
                } catch (e) {}
            }
            return '';
        }

        module.exports = toSource;

        /***/
    },
    /* 117 */
    /***/
    function(module, exports) {



        function getValue(object, key) {
            return object == null ? undefined : object[key];
        }

        module.exports = getValue;

        /***/
    },
    /* 118 */
    /***/
    function(module, exports) {



        function hashDelete(key) {
            return this.has(key) && delete this.__data__[key];
        }

        module.exports = hashDelete;

        /***/
    },
    /* 119 */
    /***/
    function(module, exports, __webpack_require__) {

        var nativeCreate = __webpack_require__(108);


        var HASH_UNDEFINED = '__lodash_hash_undefined__';


        var objectProto = Object.prototype;


        var hasOwnProperty = objectProto.hasOwnProperty;



        function hashGet(key) {
            var data = this.__data__;
            if (nativeCreate) {
                var result = data[key];
                return result === HASH_UNDEFINED ? undefined : result;
            }
            return hasOwnProperty.call(data, key) ? data[key] : undefined;
        }

        module.exports = hashGet;

        /***/
    },
    /* 120 */
    /***/
    function(module, exports, __webpack_require__) {

        var nativeCreate = __webpack_require__(108);


        var objectProto = Object.prototype;


        var hasOwnProperty = objectProto.hasOwnProperty;



        function hashHas(key) {
            var data = this.__data__;
            return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);
        }

        module.exports = hashHas;

        /***/
    },
    /* 121 */
    /***/
    function(module, exports, __webpack_require__) {

        var nativeCreate = __webpack_require__(108);


        var HASH_UNDEFINED = '__lodash_hash_undefined__';



        function hashSet(key, value) {
            var data = this.__data__;
            data[key] = nativeCreate && value === undefined ? HASH_UNDEFINED : value;
            return this;
        }

        module.exports = hashSet;

        /***/
    },
    /* 122 */
    /***/
    function(module, exports, __webpack_require__) {

        var getNative = __webpack_require__(109),
            root = __webpack_require__(114);


        var Map = getNative(root, 'Map');

        module.exports = Map;

        /***/
    },
    /* 123 */
    /***/
    function(module, exports, __webpack_require__) {

        var getMapData = __webpack_require__(124);



        function mapCacheDelete(key) {
            return getMapData(this, key)['delete'](key);
        }

        module.exports = mapCacheDelete;

        /***/
    },
    /* 124 */
    /***/
    function(module, exports, __webpack_require__) {

        var isKeyable = __webpack_require__(125);



        function getMapData(map, key) {
            var data = map.__data__;
            return isKeyable(key) ?
                data[typeof key == 'string' ? 'string' : 'hash'] :
                data.map;
        }

        module.exports = getMapData;

        /***/
    },
    /* 125 */
    /***/
    function(module, exports) {



        function isKeyable(value) {
            var type = typeof value;
            return type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean' ?
                value !== '__proto__' :
                value === null;
        }

        module.exports = isKeyable;

        /***/
    },
    /* 126 */
    /***/
    function(module, exports, __webpack_require__) {

        var getMapData = __webpack_require__(124);



        function mapCacheGet(key) {
            return getMapData(this, key).get(key);
        }

        module.exports = mapCacheGet;

        /***/
    },
    /* 127 */
    /***/
    function(module, exports, __webpack_require__) {

        var getMapData = __webpack_require__(124);



        function mapCacheHas(key) {
            return getMapData(this, key).has(key);
        }

        module.exports = mapCacheHas;

        /***/
    },
    /* 128 */
    /***/
    function(module, exports, __webpack_require__) {

        var getMapData = __webpack_require__(124);



        function mapCacheSet(key, value) {
            getMapData(this, key).set(key, value);
            return this;
        }

        module.exports = mapCacheSet;

        /***/
    },
    /* 129 */
    /***/
    function(module, exports, __webpack_require__) {

        var baseIsEqualDeep = __webpack_require__(130),
            isObject = __webpack_require__(33),
            isObjectLike = __webpack_require__(38);



        function baseIsEqual(value, other, customizer, bitmask, stack) {
            if (value === other) {
                return true;
            }
            if (value == null || other == null || !isObject(value) && !isObjectLike(other)) {
                return value !== value && other !== other;
            }
            return baseIsEqualDeep(value, other, baseIsEqual, customizer, bitmask, stack);
        }

        module.exports = baseIsEqual;

        /***/
    },
    /* 130 */
    /***/
    function(module, exports, __webpack_require__) {

        var Stack = __webpack_require__(90),
            equalArrays = __webpack_require__(131),
            equalByTag = __webpack_require__(136),
            equalObjects = __webpack_require__(141),
            getTag = __webpack_require__(158),
            isArray = __webpack_require__(154),
            isHostObject = __webpack_require__(111),
            isTypedArray = __webpack_require__(163);


        var PARTIAL_COMPARE_FLAG = 2;


        var argsTag = '[object Arguments]',
            arrayTag = '[object Array]',
            objectTag = '[object Object]';


        var objectProto = Object.prototype;


        var hasOwnProperty = objectProto.hasOwnProperty;



        function baseIsEqualDeep(object, other, equalFunc, customizer, bitmask, stack) {
            var objIsArr = isArray(object),
                othIsArr = isArray(other),
                objTag = arrayTag,
                othTag = arrayTag;

            if (!objIsArr) {
                objTag = getTag(object);
                objTag = objTag == argsTag ? objectTag : objTag;
            }
            if (!othIsArr) {
                othTag = getTag(other);
                othTag = othTag == argsTag ? objectTag : othTag;
            }
            var objIsObj = objTag == objectTag && !isHostObject(object),
                othIsObj = othTag == objectTag && !isHostObject(other),
                isSameTag = objTag == othTag;

            if (isSameTag && !objIsObj) {
                stack || (stack = new Stack());
                return objIsArr || isTypedArray(object) ?
                    equalArrays(object, other, equalFunc, customizer, bitmask, stack) :
                    equalByTag(object, other, objTag, equalFunc, customizer, bitmask, stack);
            }
            if (!(bitmask & PARTIAL_COMPARE_FLAG)) {
                var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
                    othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

                if (objIsWrapped || othIsWrapped) {
                    var objUnwrapped = objIsWrapped ? object.value() : object,
                        othUnwrapped = othIsWrapped ? other.value() : other;

                    stack || (stack = new Stack());
                    return equalFunc(objUnwrapped, othUnwrapped, customizer, bitmask, stack);
                }
            }
            if (!isSameTag) {
                return false;
            }
            stack || (stack = new Stack());
            return equalObjects(object, other, equalFunc, customizer, bitmask, stack);
        }

        module.exports = baseIsEqualDeep;

        /***/
    },
    /* 131 */
    /***/
    function(module, exports, __webpack_require__) {

        var SetCache = __webpack_require__(132),
            arraySome = __webpack_require__(135);


        var UNORDERED_COMPARE_FLAG = 1,
            PARTIAL_COMPARE_FLAG = 2;



        function equalArrays(array, other, equalFunc, customizer, bitmask, stack) {
            var isPartial = bitmask & PARTIAL_COMPARE_FLAG,
                arrLength = array.length,
                othLength = other.length;

            if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
                return false;
            }

            var stacked = stack.get(array);
            if (stacked) {
                return stacked == other;
            }
            var index = -1,
                result = true,
                seen = bitmask & UNORDERED_COMPARE_FLAG ? new SetCache() : undefined;

            stack.set(array, other);


            while (++index < arrLength) {
                var arrValue = array[index],
                    othValue = other[index];

                if (customizer) {
                    var compared = isPartial ?
                        customizer(othValue, arrValue, index, other, array, stack) :
                        customizer(arrValue, othValue, index, array, other, stack);
                }
                if (compared !== undefined) {
                    if (compared) {
                        continue;
                    }
                    result = false;
                    break;
                }

                if (seen) {
                    if (!arraySome(other, function(othValue, othIndex) {
                            if (!seen.has(othIndex) && (
                                    arrValue === othValue || equalFunc(arrValue, othValue, customizer, bitmask, stack))) {
                                return seen.add(othIndex);
                            }
                        })) {
                        result = false;
                        break;
                    }
                } else if (!(
                        arrValue === othValue ||
                        equalFunc(arrValue, othValue, customizer, bitmask, stack))) {
                    result = false;
                    break;
                }
            }
            stack['delete'](array);
            return result;
        }

        module.exports = equalArrays;

        /***/
    },
    /* 132 */
    /***/
    function(module, exports, __webpack_require__) {

        var MapCache = __webpack_require__(104),
            setCacheAdd = __webpack_require__(133),
            setCacheHas = __webpack_require__(134);



        function SetCache(values) {
            var index = -1,
                length = values ? values.length : 0;

            this.__data__ = new MapCache();
            while (++index < length) {
                this.add(values[index]);
            }
        }


        SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
        SetCache.prototype.has = setCacheHas;

        module.exports = SetCache;

        /***/
    },
    /* 133 */
    /***/
    function(module, exports) {


        var HASH_UNDEFINED = '__lodash_hash_undefined__';



        function setCacheAdd(value) {
            this.__data__.set(value, HASH_UNDEFINED);
            return this;
        }

        module.exports = setCacheAdd;

        /***/
    },
    /* 134 */
    /***/
    function(module, exports) {



        function setCacheHas(value) {
            return this.__data__.has(value);
        }

        module.exports = setCacheHas;

        /***/
    },
    /* 135 */
    /***/
    function(module, exports) {



        function arraySome(array, predicate) {
            var index = -1,
                length = array ? array.length : 0;

            while (++index < length) {
                if (predicate(array[index], index, array)) {
                    return true;
                }
            }
            return false;
        }

        module.exports = arraySome;

        /***/
    },
    /* 136 */
    /***/
    function(module, exports, __webpack_require__) {

        var Symbol = __webpack_require__(137),
            Uint8Array = __webpack_require__(138),
            equalArrays = __webpack_require__(131),
            mapToArray = __webpack_require__(139),
            setToArray = __webpack_require__(140);


        var UNORDERED_COMPARE_FLAG = 1,
            PARTIAL_COMPARE_FLAG = 2;


        var boolTag = '[object Boolean]',
            dateTag = '[object Date]',
            errorTag = '[object Error]',
            mapTag = '[object Map]',
            numberTag = '[object Number]',
            regexpTag = '[object RegExp]',
            setTag = '[object Set]',
            stringTag = '[object String]',
            symbolTag = '[object Symbol]';

        var arrayBufferTag = '[object ArrayBuffer]',
            dataViewTag = '[object DataView]';


        var symbolProto = Symbol ? typeof Symbol === 'function' ? Symbol.prototype : '@@prototype' : undefined,
            symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;



        function equalByTag(object, other, tag, equalFunc, customizer, bitmask, stack) {
            switch (tag) {
                case dataViewTag:
                    if (object.byteLength != other.byteLength ||
                        object.byteOffset != other.byteOffset) {
                        return false;
                    }
                    object = object.buffer;
                    other = other.buffer;

                case arrayBufferTag:
                    if (object.byteLength != other.byteLength ||
                        !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
                        return false;
                    }
                    return true;

                case boolTag:
                case dateTag:



                    return +object == +other;

                case errorTag:
                    return object.name == other.name && object.message == other.message;

                case numberTag:

                    return object != +object ? other != +other : object == +other;

                case regexpTag:
                case stringTag:



                    return object == other + '';

                case mapTag:
                    var convert = mapToArray;

                case setTag:
                    var isPartial = bitmask & PARTIAL_COMPARE_FLAG;
                    convert || (convert = setToArray);

                    if (object.size != other.size && !isPartial) {
                        return false;
                    }

                    var stacked = stack.get(object);
                    if (stacked) {
                        return stacked == other;
                    }
                    bitmask |= UNORDERED_COMPARE_FLAG;
                    stack.set(object, other);


                    return equalArrays(convert(object), convert(other), equalFunc, customizer, bitmask, stack);

                case symbolTag:
                    if (symbolValueOf) {
                        return symbolValueOf.call(object) == symbolValueOf.call(other);
                    }
            }

            return false;
        }

        module.exports = equalByTag;

        /***/
    },
    /* 137 */
    /***/
    function(module, exports, __webpack_require__) {

        var root = __webpack_require__(114);


        var Symbol = root.Symbol;

        module.exports = Symbol;

        /***/
    },
    /* 138 */
    /***/
    function(module, exports, __webpack_require__) {

        var root = __webpack_require__(114);


        var Uint8Array = root.Uint8Array;

        module.exports = Uint8Array;

        /***/
    },
    /* 139 */
    /***/
    function(module, exports) {



        function mapToArray(map) {
            var index = -1,
                result = Array(map.size);

            map.forEach(function(value, key) {
                result[++index] = [key, value];
            });
            return result;
        }

        module.exports = mapToArray;

        /***/
    },
    /* 140 */
    /***/
    function(module, exports) {



        function setToArray(set) {
            var index = -1,
                result = Array(set.size);

            set.forEach(function(value) {
                result[++index] = value;
            });
            return result;
        }

        module.exports = setToArray;

        /***/
    },
    /* 141 */
    /***/
    function(module, exports, __webpack_require__) {

        var baseHas = __webpack_require__(142),
            keys = __webpack_require__(144);


        var PARTIAL_COMPARE_FLAG = 2;



        function equalObjects(object, other, equalFunc, customizer, bitmask, stack) {
            var isPartial = bitmask & PARTIAL_COMPARE_FLAG,
                objProps = keys(object),
                objLength = objProps.length,
                othProps = keys(other),
                othLength = othProps.length;

            if (objLength != othLength && !isPartial) {
                return false;
            }
            var index = objLength;
            while (index--) {
                var key = objProps[index];
                if (!(isPartial ? key in other : baseHas(other, key))) {
                    return false;
                }
            }

            var stacked = stack.get(object);
            if (stacked) {
                return stacked == other;
            }
            var result = true;
            stack.set(object, other);

            var skipCtor = isPartial;
            while (++index < objLength) {
                key = objProps[index];
                var objValue = object[key],
                    othValue = other[key];

                if (customizer) {
                    var compared = isPartial ?
                        customizer(othValue, objValue, key, other, object, stack) :
                        customizer(objValue, othValue, key, object, other, stack);
                }

                if (!(compared === undefined ?
                        objValue === othValue || equalFunc(objValue, othValue, customizer, bitmask, stack) :
                        compared)) {
                    result = false;
                    break;
                }
                skipCtor || (skipCtor = key == 'constructor');
            }
            if (result && !skipCtor) {
                var objCtor = object.constructor,
                    othCtor = other.constructor;


                if (objCtor != othCtor &&
                    'constructor' in object && 'constructor' in other &&
                    !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
                        typeof othCtor == 'function' && othCtor instanceof othCtor)) {
                    result = false;
                }
            }
            stack['delete'](object);
            return result;
        }

        module.exports = equalObjects;

        /***/
    },
    /* 142 */
    /***/
    function(module, exports, __webpack_require__) {

        var getPrototype = __webpack_require__(143);


        var objectProto = Object.prototype;


        var hasOwnProperty = objectProto.hasOwnProperty;



        function baseHas(object, key) {



            return object != null && (
                hasOwnProperty.call(object, key) ||
                typeof object == 'object' && key in object && getPrototype(object) === null);
        }

        module.exports = baseHas;

        /***/
    },
    /* 143 */
    /***/
    function(module, exports) {


        var nativeGetPrototype = Object.getPrototypeOf;



        function getPrototype(value) {
            return nativeGetPrototype(Object(value));
        }

        module.exports = getPrototype;

        /***/
    },
    /* 144 */
    /***/
    function(module, exports, __webpack_require__) {

        var baseHas = __webpack_require__(142),
            baseKeys = __webpack_require__(145),
            indexKeys = __webpack_require__(146),
            isArrayLike = __webpack_require__(150),
            isIndex = __webpack_require__(156),
            isPrototype = __webpack_require__(157);



        function keys(object) {
            var isProto = isPrototype(object);
            if (!(isProto || isArrayLike(object))) {
                return baseKeys(object);
            }
            var indexes = indexKeys(object),
                skipIndexes = !!indexes,
                result = indexes || [],
                length = result.length;

            for (var key in object) {
                if (baseHas(object, key) &&
                    !(skipIndexes && (key == 'length' || isIndex(key, length))) &&
                    !(isProto && key == 'constructor')) {
                    result.push(key);
                }
            }
            return result;
        }

        module.exports = keys;

        /***/
    },
    /* 145 */
    /***/
    function(module, exports) {


        var nativeKeys = Object.keys;



        function baseKeys(object) {
            return nativeKeys(Object(object));
        }

        module.exports = baseKeys;

        /***/
    },
    /* 146 */
    /***/
    function(module, exports, __webpack_require__) {

        var baseTimes = __webpack_require__(147),
            isArguments = __webpack_require__(148),
            isArray = __webpack_require__(154),
            isLength = __webpack_require__(153),
            isString = __webpack_require__(155);



        function indexKeys(object) {
            var length = object ? object.length : undefined;
            if (isLength(length) && (
                    isArray(object) || isString(object) || isArguments(object))) {
                return baseTimes(length, String);
            }
            return null;
        }

        module.exports = indexKeys;

        /***/
    },
    /* 147 */
    /***/
    function(module, exports) {



        function baseTimes(n, iteratee) {
            var index = -1,
                result = Array(n);

            while (++index < n) {
                result[index] = iteratee(index);
            }
            return result;
        }

        module.exports = baseTimes;

        /***/
    },
    /* 148 */
    /***/
    function(module, exports, __webpack_require__) {

        var isArrayLikeObject = __webpack_require__(149);


        var argsTag = '[object Arguments]';


        var objectProto = Object.prototype;


        var hasOwnProperty = objectProto.hasOwnProperty;



        var objectToString = objectProto.toString;


        var propertyIsEnumerable = objectProto.propertyIsEnumerable;



        function isArguments(value) {

            return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') && (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);
        }

        module.exports = isArguments;

        /***/
    },
    /* 149 */
    /***/
    function(module, exports, __webpack_require__) {

        var isArrayLike = __webpack_require__(150),
            isObjectLike = __webpack_require__(38);



        function isArrayLikeObject(value) {
            return isObjectLike(value) && isArrayLike(value);
        }

        module.exports = isArrayLikeObject;

        /***/
    },
    /* 150 */
    /***/
    function(module, exports, __webpack_require__) {

        var getLength = __webpack_require__(151),
            isFunction = __webpack_require__(36),
            isLength = __webpack_require__(153);



        function isArrayLike(value) {
            return value != null && isLength(getLength(value)) && !isFunction(value);
        }

        module.exports = isArrayLike;

        /***/
    },
    /* 151 */
    /***/
    function(module, exports, __webpack_require__) {

        var baseProperty = __webpack_require__(152);



        var getLength = baseProperty('length');

        module.exports = getLength;

        /***/
    },
    /* 152 */
    /***/
    function(module, exports) {



        function baseProperty(key) {
            return function(object) {
                return object == null ? undefined : object[key];
            };
        }

        module.exports = baseProperty;

        /***/
    },
    /* 153 */
    /***/
    function(module, exports) {


        var MAX_SAFE_INTEGER = 9007199254740991;



        function isLength(value) {
            return typeof value == 'number' &&
                value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
        }

        module.exports = isLength;

        /***/
    },
    /* 154 */
    /***/
    function(module, exports) {



        var isArray = Array.isArray;

        module.exports = isArray;

        /***/
    },
    /* 155 */
    /***/
    function(module, exports, __webpack_require__) {

        var isArray = __webpack_require__(154),
            isObjectLike = __webpack_require__(38);


        var stringTag = '[object String]';


        var objectProto = Object.prototype;



        var objectToString = objectProto.toString;



        function isString(value) {
            return typeof value == 'string' ||
                !isArray(value) && isObjectLike(value) && objectToString.call(value) == stringTag;
        }

        module.exports = isString;

        /***/
    },
    /* 156 */
    /***/
    function(module, exports) {


        var MAX_SAFE_INTEGER = 9007199254740991;


        var reIsUint = /^(?:0|[1-9]\d*)$/;



        function isIndex(value, length) {
            length = length == null ? MAX_SAFE_INTEGER : length;
            return !!length && (
                    typeof value == 'number' || reIsUint.test(value)) &&
                value > -1 && value % 1 == 0 && value < length;
        }

        module.exports = isIndex;

        /***/
    },
    /* 157 */
    /***/
    function(module, exports) {


        var objectProto = Object.prototype;



        function isPrototype(value) {
            var Ctor = value && value.constructor,
                proto = typeof Ctor == 'function' && Ctor.prototype || objectProto;

            return value === proto;
        }

        module.exports = isPrototype;

        /***/
    },
    /* 158 */
    /***/
    function(module, exports, __webpack_require__) {

        var DataView = __webpack_require__(159),
            Map = __webpack_require__(122),
            Promise = __webpack_require__(160),
            Set = __webpack_require__(161),
            WeakMap = __webpack_require__(162),
            toSource = __webpack_require__(116);


        var mapTag = '[object Map]',
            objectTag = '[object Object]',
            promiseTag = '[object Promise]',
            setTag = '[object Set]',
            weakMapTag = '[object WeakMap]';

        var dataViewTag = '[object DataView]';


        var objectProto = Object.prototype;



        var objectToString = objectProto.toString;


        var dataViewCtorString = toSource(DataView),
            mapCtorString = toSource(Map),
            promiseCtorString = toSource(Promise),
            setCtorString = toSource(Set),
            weakMapCtorString = toSource(WeakMap);



        function getTag(value) {
            return objectToString.call(value);
        }



        if (DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag ||
            Map && getTag(new Map()) != mapTag ||
            Promise && getTag(Promise.resolve()) != promiseTag ||
            Set && getTag(new Set()) != setTag ||
            WeakMap && getTag(new WeakMap()) != weakMapTag) {
            getTag = function getTag(value) {
                var result = objectToString.call(value),
                    Ctor = result == objectTag ? value.constructor : undefined,
                    ctorString = Ctor ? toSource(Ctor) : undefined;

                if (ctorString) {
                    switch (ctorString) {
                        case dataViewCtorString:
                            return dataViewTag;
                        case mapCtorString:
                            return mapTag;
                        case promiseCtorString:
                            return promiseTag;
                        case setCtorString:
                            return setTag;
                        case weakMapCtorString:
                            return weakMapTag;
                    }

                }
                return result;
            };
        }

        module.exports = getTag;

        /***/
    },
    /* 159 */
    /***/
    function(module, exports, __webpack_require__) {

        var getNative = __webpack_require__(109),
            root = __webpack_require__(114);


        var DataView = getNative(root, 'DataView');

        module.exports = DataView;

        /***/
    },
    /* 160 */
    /***/
    function(module, exports, __webpack_require__) {

        var getNative = __webpack_require__(109),
            root = __webpack_require__(114);


        var Promise = getNative(root, 'Promise');

        module.exports = Promise;

        /***/
    },
    /* 161 */
    /***/
    function(module, exports, __webpack_require__) {

        var getNative = __webpack_require__(109),
            root = __webpack_require__(114);


        var Set = getNative(root, 'Set');

        module.exports = Set;

        /***/
    },
    /* 162 */
    /***/
    function(module, exports, __webpack_require__) {

        var getNative = __webpack_require__(109),
            root = __webpack_require__(114);


        var WeakMap = getNative(root, 'WeakMap');

        module.exports = WeakMap;

        /***/
    },
    /* 163 */
    /***/
    function(module, exports, __webpack_require__) {

        var isLength = __webpack_require__(153),
            isObjectLike = __webpack_require__(38);


        var argsTag = '[object Arguments]',
            arrayTag = '[object Array]',
            boolTag = '[object Boolean]',
            dateTag = '[object Date]',
            errorTag = '[object Error]',
            funcTag = '[object Function]',
            mapTag = '[object Map]',
            numberTag = '[object Number]',
            objectTag = '[object Object]',
            regexpTag = '[object RegExp]',
            setTag = '[object Set]',
            stringTag = '[object String]',
            weakMapTag = '[object WeakMap]';

        var arrayBufferTag = '[object ArrayBuffer]',
            dataViewTag = '[object DataView]',
            float32Tag = '[object Float32Array]',
            float64Tag = '[object Float64Array]',
            int8Tag = '[object Int8Array]',
            int16Tag = '[object Int16Array]',
            int32Tag = '[object Int32Array]',
            uint8Tag = '[object Uint8Array]',
            uint8ClampedTag = '[object Uint8ClampedArray]',
            uint16Tag = '[object Uint16Array]',
            uint32Tag = '[object Uint32Array]';


        var typedArrayTags = {};
        typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
            typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
            typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
            typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
            typedArrayTags[uint32Tag] = true;
        typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
            typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
            typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
            typedArrayTags[errorTag] = typedArrayTags[funcTag] =
            typedArrayTags[mapTag] = typedArrayTags[numberTag] =
            typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
            typedArrayTags[setTag] = typedArrayTags[stringTag] =
            typedArrayTags[weakMapTag] = false;


        var objectProto = Object.prototype;



        var objectToString = objectProto.toString;



        function isTypedArray(value) {
            return isObjectLike(value) &&
                isLength(value.length) && !!typedArrayTags[objectToString.call(value)];
        }

        module.exports = isTypedArray;

        /***/
    },
    /* 164 */
    /***/
    function(module, exports, __webpack_require__) {

        var isStrictComparable = __webpack_require__(165),
            keys = __webpack_require__(144);



        function getMatchData(object) {
            var result = keys(object),
                length = result.length;

            while (length--) {
                var key = result[length],
                    value = object[key];

                result[length] = [key, value, isStrictComparable(value)];
            }
            return result;
        }

        module.exports = getMatchData;

        /***/
    },
    /* 165 */
    /***/
    function(module, exports, __webpack_require__) {

        var isObject = __webpack_require__(33);



        function isStrictComparable(value) {
            return value === value && !isObject(value);
        }

        module.exports = isStrictComparable;

        /***/
    },
    /* 166 */
    /***/
    function(module, exports) {



        function matchesStrictComparable(key, srcValue) {
            return function(object) {
                if (object == null) {
                    return false;
                }
                return object[key] === srcValue && (
                    srcValue !== undefined || key in Object(object));
            };
        }

        module.exports = matchesStrictComparable;

        /***/
    },
    /* 167 */
    /***/
    function(module, exports, __webpack_require__) {

        var baseIsEqual = __webpack_require__(129),
            get = __webpack_require__(168),
            hasIn = __webpack_require__(177),
            isKey = __webpack_require__(175),
            isStrictComparable = __webpack_require__(165),
            matchesStrictComparable = __webpack_require__(166),
            toKey = __webpack_require__(176);


        var UNORDERED_COMPARE_FLAG = 1,
            PARTIAL_COMPARE_FLAG = 2;



        function baseMatchesProperty(path, srcValue) {
            if (isKey(path) && isStrictComparable(srcValue)) {
                return matchesStrictComparable(toKey(path), srcValue);
            }
            return function(object) {
                var objValue = get(object, path);
                return objValue === undefined && objValue === srcValue ?
                    hasIn(object, path) :
                    baseIsEqual(srcValue, objValue, undefined, UNORDERED_COMPARE_FLAG | PARTIAL_COMPARE_FLAG);
            };
        }

        module.exports = baseMatchesProperty;

        /***/
    },
    /* 168 */
    /***/
    function(module, exports, __webpack_require__) {

        var baseGet = __webpack_require__(169);



        function get(object, path, defaultValue) {
            var result = object == null ? undefined : baseGet(object, path);
            return result === undefined ? defaultValue : result;
        }

        module.exports = get;

        /***/
    },
    /* 169 */
    /***/
    function(module, exports, __webpack_require__) {

        var castPath = __webpack_require__(170),
            isKey = __webpack_require__(175),
            toKey = __webpack_require__(176);



        function baseGet(object, path) {
            path = isKey(path, object) ? [path] : castPath(path);

            var index = 0,
                length = path.length;

            while (object != null && index < length) {
                object = object[toKey(path[index++])];
            }
            return index && index == length ? object : undefined;
        }

        module.exports = baseGet;

        /***/
    },
    /* 170 */
    /***/
    function(module, exports, __webpack_require__) {

        var isArray = __webpack_require__(154),
            stringToPath = __webpack_require__(171);



        function castPath(value) {
            return isArray(value) ? value : stringToPath(value);
        }

        module.exports = castPath;

        /***/
    },
    /* 171 */
    /***/
    function(module, exports, __webpack_require__) {

        var memoize = __webpack_require__(172),
            toString = __webpack_require__(173);


        var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(\.|\[\])(?:\4|$))/g;


        var reEscapeChar = /\\(\\)?/g;



        var stringToPath = memoize(function(string) {
            var result = [];
            toString(string).replace(rePropName, function(match, number, quote, string) {
                result.push(quote ? string.replace(reEscapeChar, '$1') : number || match);
            });
            return result;
        });

        module.exports = stringToPath;

        /***/
    },
    /* 172 */
    /***/
    function(module, exports, __webpack_require__) {

        var MapCache = __webpack_require__(104);


        var FUNC_ERROR_TEXT = 'Expected a function';



        function memoize(func, resolver) {
            if (typeof func != 'function' || resolver && typeof resolver != 'function') {
                throw new TypeError(FUNC_ERROR_TEXT);
            }
            var memoized = function memoized() {
                var args = arguments,
                    key = resolver ? resolver.apply(this, args) : args[0],
                    cache = memoized.cache;

                if (cache.has(key)) {
                    return cache.get(key);
                }
                var result = func.apply(this, args);
                memoized.cache = cache.set(key, result);
                return result;
            };
            memoized.cache = new(memoize.Cache || MapCache)();
            return memoized;
        }


        memoize.Cache = MapCache;

        module.exports = memoize;

        /***/
    },
    /* 173 */
    /***/
    function(module, exports, __webpack_require__) {

        var baseToString = __webpack_require__(174);



        function toString(value) {
            return value == null ? '' : baseToString(value);
        }

        module.exports = toString;

        /***/
    },
    /* 174 */
    /***/
    function(module, exports, __webpack_require__) {

        var Symbol = __webpack_require__(137),
            isSymbol = __webpack_require__(37);


        var INFINITY = 1 / 0;


        var symbolProto = Symbol ? typeof Symbol === 'function' ? Symbol.prototype : '@@prototype' : undefined,
            symbolToString = symbolProto ? symbolProto.toString : undefined;



        function baseToString(value) {

            if (typeof value == 'string') {
                return value;
            }
            if (isSymbol(value)) {
                return symbolToString ? symbolToString.call(value) : '';
            }
            var result = value + '';
            return result == '0' && 1 / value == -INFINITY ? '-0' : result;
        }

        module.exports = baseToString;

        /***/
    },
    /* 175 */
    /***/
    function(module, exports, __webpack_require__) {

        var isArray = __webpack_require__(154),
            isSymbol = __webpack_require__(37);


        var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
            reIsPlainProp = /^\w*$/;



        function isKey(value, object) {
            if (isArray(value)) {
                return false;
            }
            var type = typeof value;
            if (type == 'number' || type == 'symbol' || type == 'boolean' ||
                value == null || isSymbol(value)) {
                return true;
            }
            return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
                object != null && value in Object(object);
        }

        module.exports = isKey;

        /***/
    },
    /* 176 */
    /***/
    function(module, exports, __webpack_require__) {

        var isSymbol = __webpack_require__(37);


        var INFINITY = 1 / 0;



        function toKey(value) {
            if (typeof value == 'string' || isSymbol(value)) {
                return value;
            }
            var result = value + '';
            return result == '0' && 1 / value == -INFINITY ? '-0' : result;
        }

        module.exports = toKey;

        /***/
    },
    /* 177 */
    /***/
    function(module, exports, __webpack_require__) {

        var baseHasIn = __webpack_require__(178),
            hasPath = __webpack_require__(179);



        function hasIn(object, path) {
            return object != null && hasPath(object, path, baseHasIn);
        }

        module.exports = hasIn;

        /***/
    },
    /* 178 */
    /***/
    function(module, exports) {



        function baseHasIn(object, key) {
            return object != null && key in Object(object);
        }

        module.exports = baseHasIn;

        /***/
    },
    /* 179 */
    /***/
    function(module, exports, __webpack_require__) {

        var castPath = __webpack_require__(170),
            isArguments = __webpack_require__(148),
            isArray = __webpack_require__(154),
            isIndex = __webpack_require__(156),
            isKey = __webpack_require__(175),
            isLength = __webpack_require__(153),
            isString = __webpack_require__(155),
            toKey = __webpack_require__(176);



        function hasPath(object, path, hasFunc) {
            path = isKey(path, object) ? [path] : castPath(path);

            var result,
                index = -1,
                length = path.length;

            while (++index < length) {
                var key = toKey(path[index]);
                if (!(result = object != null && hasFunc(object, key))) {
                    break;
                }
                object = object[key];
            }
            if (result) {
                return result;
            }
            var length = object ? object.length : 0;
            return !!length && isLength(length) && isIndex(key, length) && (
                isArray(object) || isString(object) || isArguments(object));
        }

        module.exports = hasPath;

        /***/
    },
    /* 180 */
    /***/
    function(module, exports) {



        function identity(value) {
            return value;
        }

        module.exports = identity;

        /***/
    },
    /* 181 */
    /***/
    function(module, exports, __webpack_require__) {

        var baseProperty = __webpack_require__(152),
            basePropertyDeep = __webpack_require__(182),
            isKey = __webpack_require__(175),
            toKey = __webpack_require__(176);



        function property(path) {
            return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
        }

        module.exports = property;

        /***/
    },
    /* 182 */
    /***/
    function(module, exports, __webpack_require__) {

        var baseGet = __webpack_require__(169);



        function basePropertyDeep(path) {
            return function(object) {
                return baseGet(object, path);
            };
        }

        module.exports = basePropertyDeep;

        /***/
    },
    /* 183 */
    /***/
    function(module, exports, __webpack_require__) {

        var toFinite = __webpack_require__(184);



        function toInteger(value) {
            var result = toFinite(value),
                remainder = result % 1;

            return result === result ? remainder ? result - remainder : result : 0;
        }

        module.exports = toInteger;

        /***/
    },
    /* 184 */
    /***/
    function(module, exports, __webpack_require__) {

        var toNumber = __webpack_require__(35);


        var INFINITY = 1 / 0,
            MAX_INTEGER = 1.7976931348623157e+308;



        function toFinite(value) {
            if (!value) {
                return value === 0 ? value : 0;
            }
            value = toNumber(value);
            if (value === INFINITY || value === -INFINITY) {
                var sign = value < 0 ? -1 : 1;
                return sign * MAX_INTEGER;
            }
            return value === value ? value : 0;
        }

        module.exports = toFinite;

        /***/
    },
    /* 185 */
    /***/
    function(module, exports, __webpack_require__) {



        'use strict';
        var _extends = Object.assign || function(target) {
            for (var i = 1; i < arguments.length; i++) {
                var source = arguments[i];
                for (var key in source) {
                    if (Object.prototype.hasOwnProperty.call(source, key)) {
                        target[key] = source[key];
                    }
                }
            }
            return target;
        };



        var NativeMethodsMixin = __webpack_require__(54);
        var React = __webpack_require__(10);
        var StyleSheet = __webpack_require__(39);
        var TimerMixin = __webpack_require__(186);
        var TouchableMixin = __webpack_require__(68).Mixin;
        var TouchableWithoutFeedback = __webpack_require__(187);
        var View = __webpack_require__(27);

        var PRESS_RETENTION_OFFSET = {
            top: 20,
            left: 20,
            right: 20,
            bottom: 30
        };



        var TouchableHighlight = React.createClass({
            displayName: 'TouchableHighlight',

            mixins: [NativeMethodsMixin, TimerMixin, TouchableMixin],

            getDefaultProps: function getDefaultProps() {
                return {
                    activeOpacity: 0.8,
                    underlayColor: 'black',
                    style: {}
                };

            },

            computeSyntheticState: function computeSyntheticState(props) {
                return {
                    activeProps: {
                        style: {
                            opacity: props.activeOpacity
                        }
                    },


                    activeUnderlayProps: {
                        style: {
                            backgroundColor: props.underlayColor
                        }
                    },


                    underlayProps: {
                        style: {
                            backgroundColor: props.style.backgroundColor || null
                        }
                    }
                };



            },

            getInitialState: function getInitialState() {
                return _extends({},
                    this.touchableGetInitialState(),
                    this.computeSyntheticState(this.props));

            },

            componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
                if (nextProps.activeOpacity !== this.props.activeOpacity ||
                    nextProps.underlayColor !== this.props.underlayColor ||
                    nextProps.style !== this.props.style) {
                    this.setState(this.computeSyntheticState(nextProps));
                }
            },

            touchableHandleActivePressIn: function touchableHandleActivePressIn(e) {
                this.clearTimeout(this._hideTimeout);
                this._hideTimeout = null;
                this._showUnderlay();
                this.props.onPressIn && this.props.onPressIn(e);
            },

            touchableHandleActivePressOut: function touchableHandleActivePressOut(e) {
                if (!this._hideTimeout) {
                    this._hideUnderlay();
                }
                this.props.onPressOut && this.props.onPressOut(e);
            },

            touchableHandlePress: function touchableHandlePress(e) {
                this.clearTimeout(this._hideTimeout);
                this._showUnderlay();
                this._hideTimeout = this.setTimeout(this._hideUnderlay,
                    this.props.delayPressOut || 100);
                this.props.onPress && this.props.onPress(e);
            },

            touchableHandleLongPress: function touchableHandleLongPress(e) {
                this.props.onLongPress && this.props.onLongPress(e);
            },

            touchableGetPressRectOffset: function touchableGetPressRectOffset() {
                return this.props.pressRetentionOffset || PRESS_RETENTION_OFFSET;
            },

            touchableGetHitSlop: function touchableGetHitSlop() {
                return this.props.hitSlop;
            },

            touchableGetHighlightDelayMS: function touchableGetHighlightDelayMS() {
                return this.props.delayPressIn || 0;
            },

            touchableGetLongPressDelayMS: function touchableGetLongPressDelayMS() {
                return this.props.delayLongPress === 0 ? 0 :
                    this.props.delayLongPress || 500;
            },

            touchableGetPressOutDelayMS: function touchableGetPressOutDelayMS() {
                return this.props.delayPressOut || 0;
            },

            _showUnderlay: function _showUnderlay() {
                if (!this.isMounted() || !this._hasPressHandler()) {
                    return;
                }
                this.refs[UNDERLAY_REF].setNativeProps(this.state.activeUnderlayProps);
                this.refs[CHILD_REF].setNativeProps(this.state.activeProps);
                this.props.onShowUnderlay && this.props.onShowUnderlay();
            },

            _hideUnderlay: function _hideUnderlay() {
                this.clearTimeout(this._hideTimeout);
                this._hideTimeout = null;
                if (this._hasPressHandler() && this.refs[UNDERLAY_REF]) {
                    this.refs[CHILD_REF].setNativeProps(INACTIVE_CHILD_PROPS);
                    this.refs[UNDERLAY_REF].setNativeProps(this.state.underlayProps);
                    this.props.onHideUnderlay && this.props.onHideUnderlay();
                }
            },

            _hasPressHandler: function _hasPressHandler() {
                return !!(
                    this.props.onPress ||
                    this.props.onPressIn ||
                    this.props.onPressOut ||
                    this.props.onLongPress);

            },

            render: function render() {

                return (
                    (this && this.createElement || React.createElement)(View, {
                            accessible: true,
                            accessibilityLabel: this.props.accessibilityLabel,
                            accessibilityRole: this.props.accessibilityRole || this.props.accessibilityTraits || 'button',
                            hitSlop: this.props.hitSlop,
                            onLayout: this.props.onLayout,
                            onStartShouldSetResponder: this.touchableHandleStartShouldSetResponder,
                            onResponderTerminationRequest: this.touchableHandleResponderTerminationRequest,
                            onResponderGrant: this.touchableHandleResponderGrant,
                            onResponderMove: this.touchableHandleResponderMove,
                            onResponderRelease: this.touchableHandleResponderRelease,
                            onResponderTerminate: this.touchableHandleResponderTerminate,
                            ref: UNDERLAY_REF,
                            style: [this.props.style, styles.root],
                            tabIndex: '0',
                            testID: this.props.testID
                        },
                        React.cloneElement(
                            React.Children.only(this.props.children), {
                                ref: CHILD_REF
                            })));



            }
        });



        var CHILD_REF = 'childRef';
        var UNDERLAY_REF = 'underlayRef';
        var INACTIVE_CHILD_PROPS = {
            style: StyleSheet.create({
                x: {
                    opacity: 1.0
                }
            }).x
        };


        var styles = StyleSheet.create({
            root: {
                userSelect: 'none'
            }
        });



        TouchableHighlight.propTypes = _extends({},



            TouchableWithoutFeedback.propTypes, {



                activeOpacity: React.PropTypes.number,



                onShowUnderlay: React.PropTypes.func,



                onHideUnderlay: React.PropTypes.func
            });


        module.exports = TouchableHighlight;

        /***/
    },
    /* 186 */
    /***/
    function(module, exports) {

        /* WEBPACK VAR INJECTION */
        (function(global) {



            'use strict';

            var GLOBAL = typeof window === 'undefined' ? global : window;

            var setter = function setter(_setter, _clearer, array) {
                return function(callback, delta) {
                    var id = _setter(function() {
                        _clearer.call(this, id);
                        callback.apply(this, arguments);
                    }.bind(this), delta);

                    if (!this[array]) {
                        this[array] = [id];
                    } else {
                        this[array].push(id);
                    }
                    return id;
                };
            };

            var clearer = function clearer(_clearer, array) {
                return function(id) {
                    if (this[array]) {
                        var index = this[array].indexOf(id);
                        if (index !== -1) {
                            this[array].splice(index, 1);
                        }
                    }
                    _clearer(id);
                };
            };

            var _timeouts = 'TimerMixin_timeouts';
            var _clearTimeout = clearer(GLOBAL.clearTimeout, _timeouts);
            var _setTimeout = setter(GLOBAL.setTimeout, _clearTimeout, _timeouts);

            var _intervals = 'TimerMixin_intervals';
            var _clearInterval = clearer(GLOBAL.clearInterval, _intervals);
            var _setInterval = setter(GLOBAL.setInterval, function() {}, _intervals);

            var _immediates = 'TimerMixin_immediates';
            var _clearImmediate = clearer(GLOBAL.clearImmediate, _immediates);
            var _setImmediate = setter(GLOBAL.setImmediate, _clearImmediate, _immediates);

            var _rafs = 'TimerMixin_rafs';
            var _cancelAnimationFrame = clearer(GLOBAL.cancelAnimationFrame, _rafs);
            var _requestAnimationFrame = setter(GLOBAL.requestAnimationFrame, _cancelAnimationFrame, _rafs);

            var TimerMixin = {
                componentWillUnmount: function componentWillUnmount() {
                    this[_timeouts] && this[_timeouts].forEach(function(id) {
                        GLOBAL.clearTimeout(id);
                    });
                    this[_timeouts] = null;
                    this[_intervals] && this[_intervals].forEach(function(id) {
                        GLOBAL.clearInterval(id);
                    });
                    this[_intervals] = null;
                    this[_immediates] && this[_immediates].forEach(function(id) {
                        GLOBAL.clearImmediate(id);
                    });
                    this[_immediates] = null;
                    this[_rafs] && this[_rafs].forEach(function(id) {
                        GLOBAL.cancelAnimationFrame(id);
                    });
                    this[_rafs] = null;
                },

                setTimeout: _setTimeout,
                clearTimeout: _clearTimeout,

                setInterval: _setInterval,
                clearInterval: _clearInterval,

                setImmediate: _setImmediate,
                clearImmediate: _clearImmediate,

                requestAnimationFrame: _requestAnimationFrame,
                cancelAnimationFrame: _cancelAnimationFrame
            };


            module.exports = TimerMixin;
            /* WEBPACK VAR INJECTION */
        }.call(exports, (function() {
            return this;
        }())))

        /***/
    },
    /* 187 */
    /***/
    function(module, exports, __webpack_require__) {



        'use strict';

        var React = __webpack_require__(10);
        var TouchableMixin = __webpack_require__(68).Mixin;


        var PRESS_RETENTION_OFFSET = {
            top: 20,
            left: 20,
            right: 20,
            bottom: 30
        };



        var TouchableWithoutFeedback = React.createClass({
            displayName: 'TouchableWithoutFeedback',
            mixins: [TouchableMixin],

            getInitialState: function getInitialState() {
                return this.touchableGetInitialState();
            },

            touchableHandlePress: function touchableHandlePress(e) {
                this.props.onPress && this.props.onPress(e);
            },

            touchableHandleActivePressIn: function touchableHandleActivePressIn(e) {
                this.props.onPressIn && this.props.onPressIn(e);
            },

            touchableHandleActivePressOut: function touchableHandleActivePressOut(e) {
                this.props.onPressOut && this.props.onPressOut(e);
            },

            touchableHandleLongPress: function touchableHandleLongPress(e) {
                this.props.onLongPress && this.props.onLongPress(e);
            },

            touchableGetPressRectOffset: function touchableGetPressRectOffset() {
                return this.props.pressRetentionOffset || PRESS_RETENTION_OFFSET;
            },

            touchableGetHitSlop: function touchableGetHitSlop() {
                return this.props.hitSlop;
            },

            touchableGetHighlightDelayMS: function touchableGetHighlightDelayMS() {
                return this.props.delayPressIn || 0;
            },

            touchableGetLongPressDelayMS: function touchableGetLongPressDelayMS() {
                return this.props.delayLongPress === 0 ? 0 :
                    this.props.delayLongPress || 500;
            },

            touchableGetPressOutDelayMS: function touchableGetPressOutDelayMS() {
                return this.props.delayPressOut || 0;
            },

            render: function render() {
                return React.cloneElement(React.Children.only(this.props.children), {
                    accessible: this.props.accessible !== false,
                    accessibilityLabel: this.props.accessibilityLabel,
                    testID: this.props.testID,
                    onLayout: this.props.onLayout,
                    hitSlop: this.props.hitSlop,
                    onStartShouldSetResponder: this.touchableHandleStartShouldSetResponder,
                    onResponderTerminationRequest: this.touchableHandleResponderTerminationRequest,
                    onResponderGrant: this.touchableHandleResponderGrant,
                    onResponderMove: this.touchableHandleResponderMove,
                    onResponderRelease: this.touchableHandleResponderRelease,
                    onResponderTerminate: this.touchableHandleResponderTerminate,
                    tabIndex: '0'
                });

            }
        });


        TouchableWithoutFeedback.propTypes = {



                accessible: React.PropTypes.bool,



                disabled: React.PropTypes.bool,



                onPress: React.PropTypes.func,



                onPressIn: React.PropTypes.func,



                onPressOut: React.PropTypes.func,



                onLayout: React.PropTypes.func,



                onLongPress: React.PropTypes.func,



                delayPressIn: React.PropTypes.number,



                delayPressOut: React.PropTypes.number,



                delayLongPress: React.PropTypes.number,



                pressRetentionOffset: React.PropTypes.object,



                hitSlop: React.PropTypes.object
            },



            module.exports = TouchableWithoutFeedback;

        /***/
    },
    /* 188 */
    /***/
    function(module, exports, __webpack_require__) {



        'use strict';

        var _prodInvariant = __webpack_require__(71);

        var ReactCurrentOwner = __webpack_require__(189);
        var ReactInstanceMap = __webpack_require__(190);

        var invariant = __webpack_require__(19);
        var warning = __webpack_require__(20);



        function findNodeHandle(componentOrHandle) {
            if (false) {
                var owner = ReactCurrentOwner.current;
                if (owner !== null) {
                    process.env.NODE_ENV !== 'production' ? warning(owner._warnedAboutRefsInRender, '%s is accessing findNodeHandle inside its render(). ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', owner.getName() || 'A component') : void 0;
                    owner._warnedAboutRefsInRender = true;
                }
            }
            if (componentOrHandle == null) {
                return null;
            }
            if (typeof componentOrHandle === 'number') {

                return componentOrHandle;
            }

            var component = componentOrHandle;



            var internalInstance = ReactInstanceMap.get(component);
            if (internalInstance) {
                return internalInstance.getHostNode();
            } else {
                var rootNodeID = component._rootNodeID;
                if (rootNodeID) {
                    return rootNodeID;
                } else {
                    !(

                        typeof component === 'object' && '_rootNodeID' in component ||

                        component.render != null && typeof component.render === 'function') ? false ? invariant(false, 'findNodeHandle(...): Argument is not a component (type: %s, keys: %s)', typeof component, Object.keys(component)) : _prodInvariant('21', typeof component, Object.keys(component)): void 0;
                    true ? false ? invariant(false, 'findNodeHandle(...): Unable to find node handle for unmounted component.') : _prodInvariant('22') : void 0;
                }
            }
        }

        module.exports = findNodeHandle;

        /***/
    },
    /* 189 */
    /***/
    function(module, exports) {



        'use strict';



        var ReactCurrentOwner = {



            current: null
        };



        module.exports = ReactCurrentOwner;

        /***/
    },
    /* 190 */
    /***/
    function(module, exports) {



        'use strict';



        var ReactInstanceMap = {



            remove: function remove(key) {
                key._reactInternalInstance = undefined;
            },

            get: function get(key) {
                return key._reactInternalInstance;
            },

            has: function has(key) {
                return key._reactInternalInstance !== undefined;
            },

            set: function set(key, value) {
                key._reactInternalInstance = value;
            }
        };



        module.exports = ReactInstanceMap;

        /***/
    },
    /* 191 */
    /***/
    function(module, exports, __webpack_require__) {

        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor;
            };
        }();

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
            }
        }

        function _possibleConstructorReturn(self, call) {
            if (!self) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            }
            return call && (typeof call === "object" || typeof call === "function") ? call : self;
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
        }



        var React = __webpack_require__(10);
        var StyleSheet = __webpack_require__(39);
        var View = __webpack_require__(27);
        var ReactDOM = __webpack_require__(10);
        var
            Component = React.Component,
            PropTypes = React.PropTypes;
        var



            ActivityIndicator = function(_Component) {
            _inherits(ActivityIndicator, _Component);

            function ActivityIndicator() {
                _classCallCheck(this, ActivityIndicator);
                var _this = _possibleConstructorReturn(this, (ActivityIndicator.__proto__ || Object.getPrototypeOf(ActivityIndicator)).call(this));

                _this.state = {};
                _this.spinMounted = false;
                return _this;
            }
            _createClass(ActivityIndicator, [{
                key: 'componentDidMount',
                value: function componentDidMount() {
                    this.handleAnimation();
                }
            }, {
                key: 'componentDidUpdate',
                value: function componentDidUpdate() {
                    this.handleAnimation();
                }
            }, {
                key: 'handleAnimation',
                value: function handleAnimation() {
                    var indicatorDOM = ReactDOM.findDOMNode(this.indicator);
                    if (!indicatorDOM) {
                        return;
                    }
                    if (!this.props.animating && !this.props.hidesWhenStopped) {
                        indicatorDOM.pauseAnimations();
                    } else {
                        indicatorDOM.unpauseAnimations();
                    }
                }
            }, {
                key: 'render',
                value: function render() {
                    var _this2 = this;
                    var props = this.props;
                    var spins = [];
                    var spinCount = 12;
                    if (props.hidesWhenStopped && !props.animating) {
                        return (this && this.createElement || React.createElement)(View, {
                            style: [styles.container, this.props.style]
                        });
                    }
                    for (var i = 0; i < spinCount; i++) {
                        spins.push(
                            (this && this.createElement || React.createElement)('rect', {
                                    x: '46.5',
                                    y: '40',
                                    width: '7',
                                    height: '20',
                                    rx: '4',
                                    ry: '4',
                                    fill: props.color,
                                    transform: 'rotate(' + i * 360 / spinCount + ' 50 50) translate(0 -30)'
                                },
                                (this && this.createElement || React.createElement)('animate', {
                                    attributeName: 'opacity',
                                    from: '1',
                                    to: '0',
                                    dur: '1s',
                                    begin: -1 + 1 / spinCount * i,
                                    repeatCount: 'indefinite'
                                })));


                    }
                    return (
                        (this && this.createElement || React.createElement)(View, {
                                style: [styles.container, this.props.style]
                            },
                            (this && this.createElement || React.createElement)('svg', {
                                    ref: function ref(_ref) {
                                        _this2.indicator = _ref;
                                    },
                                    width: props.size === 'large' ? '36px' : '20px',
                                    height: props.size === 'large' ? '36px' : '20px',
                                    xmlns: 'http://www.w3.org/2000/svg',
                                    viewBox: '0 0 100 100',
                                    preserveAspectRatio: 'xMidYMid'
                                },

                                spins)));



                }
            }]);
            return ActivityIndicator;
        }(Component);


        var styles = StyleSheet.create({
            container: {
                justifyContent: 'center',
                alignItems: 'center',
                height: 80,
                padding: 8
            }
        });



        ActivityIndicator.propTypes = {



            animating: PropTypes.bool,



            color: PropTypes.string,



            hidesWhenStopped: PropTypes.bool,



            size: PropTypes.oneOf(['small', 'large'])
        };

        ActivityIndicator.defaultProps = {
            animating: true,
            color: '#ccc',
            hidesWhenStopped: true,
            size: 'large'
        };


        module.exports = ActivityIndicator;

        /***/
    },
    /* 192 */
    /***/
    function(module, exports, __webpack_require__) {

        var _extends = Object.assign || function(target) {
            for (var i = 1; i < arguments.length; i++) {
                var source = arguments[i];
                for (var key in source) {
                    if (Object.prototype.hasOwnProperty.call(source, key)) {
                        target[key] = source[key];
                    }
                }
            }
            return target;
        };



        var React = __webpack_require__(10);
        var MultiPicker = __webpack_require__(193);
        var PropTypes = React.PropTypes;
        var range = __webpack_require__(198);



        var MS_PER_DAY = 1000 * 60 * 60 * 24;


        var MODE = {
            time: 'time',
            date: 'date',
            datetime: 'datetime'
        };



        var DatePicker = React.createClass({
            displayName: 'DatePicker',
            getDefaultProps: function getDefaultProps() {
                return {
                    mode: 'datetime',
                    minuteInterval: 1
                };

            },
            getInitialState: function getInitialState() {
                return {};
            },
            componentWillMount: function componentWillMount() {
                var date = this.props.date;
                if (this.props.timeZoneOffsetInMinutes) {
                    date = new Date(date.valueOf() + this.props.timeZoneOffsetInMinutes * 60 * 1000);
                }
                this.setState(this.getState(this.props, date));
            },
            componentWillReceiveProps: function componentWillReceiveProps(props) {

                var date = props.date;
                this.setState(this.getState(props, date));
            },
            onChange: function onChange(selectedValues) {

                var date = this.getNewDate(selectedValues);

                this.setState(this.getState(this.props, date));
                if (this.props.onDateChange) {
                    this.props.onDateChange(date);
                }
            },
            getNewDate: function getNewDate(selectedValues) {

                var mode = this.props.mode,
                    date = new Date(this.state.date);
                var year = date.getFullYear(),
                    month = date.getMonth(),
                    day = date.getDate(),
                    hour = date.getHours(),
                    minute = date.getMinutes();

                if (mode === MODE.date || mode === MODE.datetime) {
                    year = selectedValues[0];
                    month = selectedValues[1];
                    day = selectedValues[2];
                }
                if (mode === MODE.time) {
                    hour = selectedValues[0];
                    minute = selectedValues[1];
                }
                if (mode === MODE.datetime) {
                    hour = selectedValues[3];
                    minute = selectedValues[4];
                }

                var dayCount = (new Date(year, month + 1, 1) - new Date(year, month, 1)) / MS_PER_DAY;

                if (day > dayCount) {
                    day = dayCount;
                }
                return new Date(year, month, day, hour, minute);
            },
            getState: function getState(props, date) {
                var minDate = props.minimumDate || new Date(1970, 0, 1),
                    maxDate = props.maximumDate || new Date(2049, 11, 31),
                    minuteInterval = props.minuteInterval || 5,
                    mode = props.mode;

                if (date > maxDate) {
                    date = maxDate;
                }
                if (date < minDate) {
                    date = minDate;
                }



                var start = {
                        year: minDate.getFullYear(),
                        month: minDate.getMonth(),
                        day: minDate.getDate(),
                        hour: minDate.getHours(),
                        minute: minDate.getMinutes()
                    },

                    end = {
                        year: maxDate.getFullYear(),
                        month: maxDate.getMonth(),
                        day: maxDate.getDate(),
                        hour: maxDate.getHours(),
                        minute: maxDate.getMinutes()
                    },

                    now = {
                        year: date.getFullYear(),
                        month: date.getMonth(),
                        day: date.getDate(),
                        hour: date.getHours(),
                        minute: Math.floor(date.getMinutes() / minuteInterval) * minuteInterval
                    };



                var dayCount = (new Date(now.year, now.month + 1, 1) - new Date(now.year, now.month, 1)) / MS_PER_DAY;


                var sameYearWithStart = start.year === now.year,
                    sameMonthWithStart = sameYearWithStart && start.month === now.month,
                    sameDayWithStart = sameMonthWithStart && start.day === now.day,
                    sameHourWithStart = sameDayWithStart && start.hour === now.hour;

                start.month = sameYearWithStart ? start.month : 0;
                start.day = sameMonthWithStart ? start.day : 1;
                start.hour = sameDayWithStart ? start.hour : 0;
                start.minute = sameHourWithStart ? start.minute : 0;


                var sameYearWithEnd = end.year === now.year,
                    sameMonthWithEnd = sameYearWithEnd && end.month === now.month,
                    sameDayWithEnd = sameMonthWithEnd && end.day === now.day,
                    sameHourWithEnd = sameDayWithEnd && end.hour === now.hour;

                end.month = sameYearWithEnd ? end.month : 11;
                end.day = sameMonthWithEnd ? end.day : dayCount;
                end.hour = sameDayWithEnd ? end.hour : 23;
                end.minute = sameHourWithEnd ? end.minute : 59;


                var years = range(start.year, end.year + 1).map(function(value) {
                        return {
                            value: value,
                            label: value + '年'
                        };
                    }),
                    months = range(start.month, end.month + 1).map(function(value) {
                        return {
                            value: value,
                            label: value + 1 + '月'
                        };
                    }),
                    days = range(start.day, end.day + 1).map(function(value) {
                        return {
                            value: value,
                            label: value + '日'
                        };
                    }),
                    hours = range(start.hour, end.hour + 1).map(function(value) {
                        return {
                            value: value,
                            label: value + '时'
                        };
                    }),
                    minutes = range(start.minute, end.minute + 1, minuteInterval).map(function(value) {
                        return {
                            value: value,
                            label: value + '分'
                        };
                    });


                var selectedValues = [now.year, now.month, now.day, now.hour, now.minute];
                var componentData = [years, months, days, hours, minutes];


                var showItem = [];
                if (mode === 'date') {

                    showItem = [0, 1, 2];
                } else if (mode === 'time') {

                    showItem = [3, 4];
                } else {

                    showItem = [0, 1, 2, 3, 4];
                }

                return {
                    componentData: showItem.map(function(i) {
                        return componentData[i];
                    }),
                    selectedValues: showItem.map(function(i) {
                        return selectedValues[i];
                    }),
                    date: date
                };

            },
            render: function render() {
                var state = this.state;
                return (
                    (this && this.createElement || React.createElement)(MultiPicker, _extends({},
                        this.props, {
                            componentData: state.componentData,
                            selectedValues: state.selectedValues,
                            onChange: this.onChange
                        })));


            }
        });


        DatePicker.propTypes = {



            date: PropTypes.instanceOf(Date).isRequired,



            onDateChange: PropTypes.func.isRequired,



            maximumDate: PropTypes.instanceOf(Date),



            minimumDate: PropTypes.instanceOf(Date),



            mode: PropTypes.oneOf(['date', 'time', 'datetime']),



            minuteInterval: PropTypes.oneOf([1, 2, 3, 4, 5, 6, 10, 12, 15, 20, 30]),



            timeZoneOffsetInMinutes: PropTypes.number
        };


        module.exports = DatePicker;

        /***/
    },
    /* 193 */
    /***/
    function(module, exports, __webpack_require__) {

        var _extends = Object.assign || function(target) {
            for (var i = 1; i < arguments.length; i++) {
                var source = arguments[i];
                for (var key in source) {
                    if (Object.prototype.hasOwnProperty.call(source, key)) {
                        target[key] = source[key];
                    }
                }
            }
            return target;
        };



        var React = __webpack_require__(10);
        var View = __webpack_require__(27);
        var PropTypes = React.PropTypes;
        var Picker = __webpack_require__(194);
        var StyleSheet = __webpack_require__(39);



        var MultiPicker = React.createClass({
            displayName: 'MultiPicker',

            getDefaultProps: function getDefaultProps() {
                return {
                    selectedValues: [],
                    componentData: []
                };

            },
            getInitialState: function getInitialState() {
                return {};
            },
            onChange: function onChange(itemValue, pickerIndex) {
                var onChange = this.props.onChange;

                var selectedValues = this.props.selectedValues.slice(0);
                selectedValues[pickerIndex] = itemValue;
                onChange && onChange(selectedValues, pickerIndex);
            },
            render: function render() {
                var _this = this;
                var props = this.props,
                    componentData = props.componentData;
                return (
                    (this && this.createElement || React.createElement)(View, {
                            style: [styles.container, props.style],
                            className: 'rn-multipicker'
                        },

                        componentData.map(function(items, index) {
                            return (
                                (_this && _this.createElement || React.createElement)(View, {
                                        style: {
                                            flexDirection: 'row',
                                            flex: 1,
                                            alignItems: 'center'
                                        },
                                        key: index
                                    },

                                    (_this && _this.createElement || React.createElement)(Picker, _extends({},
                                            props, {
                                                style: props.pickerStyle,
                                                itemStyle: props.itemStyle,
                                                selectedValue: props.selectedValues[index],
                                                onValueChange: function onValueChange(itemValue) {
                                                    _this.onChange(itemValue, index);
                                                }
                                            }),


                                        items.map(function(item) {
                                            return (_this && _this.createElement || React.createElement)(Picker.Item, {
                                                key: item.value,
                                                value: item.value,
                                                label: item.label
                                            });
                                        }))));



                        })));



            }
        });

        var styles = StyleSheet.create({
            container: {
                flex: 1,
                height: '200px',
                flexDirection: 'row',
                backgroundColor: '#F5FCFF'
            }
        });


        MultiPicker.propTypes = {



            selectedValues: PropTypes.array,



            onValueChange: PropTypes.func,



            componentData: PropTypes.array,



            pickerStyle: View.propTypes.style,



            itemStyle: View.propTypes.style
        };



        module.exports = MultiPicker;

        /***/
    },
    /* 194 */
    /***/
    function(module, exports, __webpack_require__) {

        var _extends = Object.assign || function(target) {
            for (var i = 1; i < arguments.length; i++) {
                var source = arguments[i];
                for (var key in source) {
                    if (Object.prototype.hasOwnProperty.call(source, key)) {
                        target[key] = source[key];
                    }
                }
            }
            return target;
        };
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor;
            };
        }();

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
            }
        }



        var React = __webpack_require__(10);
        var PanResponder = __webpack_require__(195);
        var View = __webpack_require__(27);
        var ReactDOM = __webpack_require__(10);
        var StyleSheet = __webpack_require__(39);
        var findIndex = __webpack_require__(85);

        var PickScroller = 'PickScroller';
        var PickItem = 'PickItem';
        var PickContainer = 'PickerContainer';

        var PropTypes = React.PropTypes;


        var styles = StyleSheet.create({
            picker: {
                height: 200
            },

            item: {
                color: '#000',
                height: 34
            }
        });
        var



            Range = function() {
            function Range() {
                var lowerBound = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
                var upperBound = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
                _classCallCheck(this, Range);
                if (this.lowerBound > this.upperBound) {
                    throw Error('Range.constructor: lowerBound must less than upperBound');
                }
                this.lowerBound = lowerBound;
                this.upperBound = upperBound;
            }
            _createClass(Range, [{
                key: 'contain',
                value: function contain(



                    n) {
                    return this.lowerBound <= n && this.upperBound >= n;
                }
            }, {
                key: 'normalize',
                value: function normalize(



                    n) {
                    if (this.lowerBound > n) {
                        return this.lowerBound;
                    } else if (this.upperBound < n) {
                        return this.upperBound;
                    } else {
                        return n;
                    }
                }
            }]);
            return Range;
        }();



        var Picker = React.createClass({
            displayName: 'Picker',
            getDefaultProps: function getDefaultProps() {
                return {
                    itemStyle: {},
                    style: {}
                };

            },
            propTypes: {



                onValueChange: PropTypes.func,



                selectedValue: PropTypes.oneOfType([
                    React.PropTypes.string,
                    React.PropTypes.number
                ]),



                itemStyle: View.propTypes.style
            },

            getInitialState: function getInitialState() {
                var props = this.props;

                this.containerHeight = 0;
                this.itemHeight = 0;
                this.scrollerHeight = 0;

                this.translateRange = null;
                this.translateOffset = null;
                this.translateY = 0;


                this.targetTranslateY = 0;

                this.moving = false;

                this.transformKey = __webpack_require__(39).transformKey;


                return this.getState(props);
            },
            componentWillMount: function componentWillMount() {
                var _this = this;

                this.responder = PanResponder.create({
                    onStartShouldSetPanResponder: function onStartShouldSetPanResponder() {
                        return true;
                    },
                    onMoveShouldSetPanResponder: function onMoveShouldSetPanResponder() {
                        return true;
                    },
                    onPanResponderTerminationRequest: function onPanResponderTerminationRequest() {
                        return false;
                    },
                    onPanResponderGrant: function onPanResponderGrant(evt) {
                        var _evt$nativeEvent =
                            evt.nativeEvent,
                            pageX = _evt$nativeEvent.pageX,
                            pageY = _evt$nativeEvent.pageY;
                        if (_this.moving) {
                            _this.moving = false;
                        }
                        _this.lastTouchPoint = {
                            x: pageX,
                            y: pageY
                        };
                    },
                    onPanResponderMove: function onPanResponderMove(evt) {
                        var _evt$nativeEvent2 =
                            evt.nativeEvent,
                            pageX = _evt$nativeEvent2.pageX,
                            pageY = _evt$nativeEvent2.pageY;

                        var deltaX = _this.lastTouchPoint.x - pageX,
                            deltaY = _this.lastTouchPoint.y - pageY;

                        _this.lastTouchPoint = {
                            x: pageX,
                            y: pageY
                        };
                        if (Math.abs(deltaY) > Math.abs(deltaX)) {
                            var targetTranslateY = _this.translateY + deltaY;
                            if (_this.translateRange.contain(targetTranslateY)) {
                                _this.scroll(targetTranslateY);
                            }
                        }
                    },
                    onPanResponderRelease: function onPanResponderRelease(evt, gestureState) {
                        var vy = gestureState.vy,
                            sign = vy > 0 ? -1 : 1,
                            targetTranslateY = void 0;

                        vy = Math.abs(vy);

                        if (vy > 0.2) {
                            var distance = sign * _this.getRotateDistance(vy);

                            targetTranslateY = _this.translateY + distance;
                        } else {
                            targetTranslateY = _this.translateY;
                        }

                        targetTranslateY = Math.round(targetTranslateY / _this.itemHeight) * _this.itemHeight;
                        _this.scroll(targetTranslateY, 'animated');
                    }
                });

            },
            componentDidMount: function componentDidMount() {
                this.scroll(this.translateY);
            },
            componentWillReceiveProps: function componentWillReceiveProps(props) {
                this.setState(this.getState(props));
            },
            getState: function getState(props) {
                var children = props.children || [];
                children = Array.isArray(children) ? children : [children];
                var items = children.map(function(el) {
                    return el.props;
                });
                var selectedIndex = findIndex(items, {
                    value: props.selectedValue
                });
                selectedIndex = selectedIndex === -1 ? 0 : selectedIndex;

                this.containerHeight = styleToNumber(props.style.height || styles.picker.height);
                this.itemHeight = styleToNumber(props.itemStyle && props.itemStyle.height || styles.item.height);
                this.scrollerHeight = this.itemHeight * items.length;

                this.translateRange = new Range(0, this.scrollerHeight - this.itemHeight);
                this.translateOffset = Math.floor((this.containerHeight - this.itemHeight) / 2);

                if (!this.moving) {
                    this.translateY = selectedIndex * this.itemHeight;
                }

                return {
                    items: items,
                    selectedIndex: selectedIndex
                };

            },
            componentDidUpdate: function componentDidUpdate() {
                if (!this.moving) {
                    this.scroll(this.translateY);
                }
            },



            scroll: function scroll(translateY, animated) {
                if (!animated) {
                    this.translateY = translateY;
                    ReactDOM.findDOMNode(this.refs[PickScroller]).style[this.transformKey] = 'translateY(' + (this.translateOffset - this.translateY) + 'px)';
                } else {
                    this.targetTranslateY = this.translateRange.normalize(translateY);

                    this.moving = true;
                    requestAnimationFrame(this.animate);
                }
            },



            animate: function animate() {
                if (this.moving === false) {
                    return;
                }

                var nearlyAtTarget = Math.abs(this.translateY - this.targetTranslateY) < 0.5;

                if (nearlyAtTarget) {
                    this.scroll(this.translateY);
                    var targetItemIndex = Math.round(this.targetTranslateY / this.itemHeight);
                    this.moving = false;
                    this.props.onValueChange && this.props.onValueChange(this.state.items[targetItemIndex].value, targetItemIndex);
                    return;
                }


                var newTranslateY = this.translateY + (this.targetTranslateY - this.translateY) / 6;

                this.scroll(newTranslateY);

                requestAnimationFrame(this.animate);
            },
            render: function render() {
                var _this2 = this;
                var props = this.props;
                var lineHeight = props.itemStyle.height || styles.item.height;
                var items = this.state.items.map(function(item, i) {
                    return (
                        (_this2 && _this2.createElement || React.createElement)(View, {
                                className: 'rn-picker-item',
                                style: [styles.item, props.itemStyle, {
                                    lineHeight: lineHeight
                                }],

                                key: item.value,
                                ref: PickItem + i
                            },

                            item.label));


                });

                var panHandlers = {};


                if (items.length) {
                    panHandlers = this.responder.panHandlers;
                }

                return (
                    (this && this.createElement || React.createElement)(View, _extends({
                                className: "rn-picker",
                                ref: PickContainer,
                                style: [styles.picker, props.style]
                            },
                            panHandlers),

                        (this && this.createElement || React.createElement)(View, {
                                ref: PickScroller,
                                className: "noflexbox rn-picker-scroller"
                            },

                            items),

                        (this && this.createElement || React.createElement)(View, {
                            className: 'rn-picker-mask',
                            style: {
                                backgroundSize: '100% ' + (this.containerHeight - this.itemHeight) / 200 + 'rem'
                            }
                        }),


                        (this && this.createElement || React.createElement)(View, {
                            className: 'rn-picker-window',
                            style: {
                                height: this.itemHeight,
                                marginTop: -this.itemHeight / 2
                            }
                        })));



            },



            getRotateDistance: function getRotateDistance(v) {
                var distance = 0,
                    duration = 16,
                    k = 0.9;
                while (v > 0.002) {
                    distance += v * duration;
                    v = v * k;
                }
                return distance;
            }
        });


        function styleToNumber(v) {
            return (v + '').indexOf('rem') !== -1 ? parseFloat(v) * 100 : parseInt(v, 10);
        }

        Picker.Item = React.createClass({
            displayName: 'Item',
            propTypes: {
                value: React.PropTypes.oneOfType([
                    React.PropTypes.string,
                    React.PropTypes.number
                ]).
                isRequired,
                label: PropTypes.string.isRequired
            },

            render: function render() {
                return null;
            }
        });


        module.exports = Picker;

        /***/
    },
    /* 195 */
    /***/
    function(module, exports, __webpack_require__) {



        "use strict";
        var normalizeNativeEvent = __webpack_require__(196);
        var TouchHistoryMath = __webpack_require__(197);

        var currentCentroidXOfTouchesChangedAfter =
            TouchHistoryMath.currentCentroidXOfTouchesChangedAfter;
        var currentCentroidYOfTouchesChangedAfter =
            TouchHistoryMath.currentCentroidYOfTouchesChangedAfter;
        var previousCentroidXOfTouchesChangedAfter =
            TouchHistoryMath.previousCentroidXOfTouchesChangedAfter;
        var previousCentroidYOfTouchesChangedAfter =
            TouchHistoryMath.previousCentroidYOfTouchesChangedAfter;
        var currentCentroidX = TouchHistoryMath.currentCentroidX;
        var currentCentroidY = TouchHistoryMath.currentCentroidY;

        var PanResponder = {

            _initializeGestureState: function _initializeGestureState(gestureState) {
                gestureState.moveX = 0;
                gestureState.moveY = 0;
                gestureState.x0 = 0;
                gestureState.y0 = 0;
                gestureState.dx = 0;
                gestureState.dy = 0;
                gestureState.vx = 0;
                gestureState.vy = 0;
                gestureState.numberActiveTouches = 0;

                gestureState._accountsForMovesUpTo = 0;
            },
            _updateGestureStateOnMove: function _updateGestureStateOnMove(gestureState, touchHistory) {
                gestureState.numberActiveTouches = touchHistory.numberActiveTouches;
                gestureState.moveX = currentCentroidXOfTouchesChangedAfter(
                    touchHistory,
                    gestureState._accountsForMovesUpTo);

                gestureState.moveY = currentCentroidYOfTouchesChangedAfter(
                    touchHistory,
                    gestureState._accountsForMovesUpTo);

                var movedAfter = gestureState._accountsForMovesUpTo;
                var prevX = previousCentroidXOfTouchesChangedAfter(touchHistory, movedAfter);
                var x = currentCentroidXOfTouchesChangedAfter(touchHistory, movedAfter);
                var prevY = previousCentroidYOfTouchesChangedAfter(touchHistory, movedAfter);
                var y = currentCentroidYOfTouchesChangedAfter(touchHistory, movedAfter);
                var nextDX = gestureState.dx + (x - prevX);
                var nextDY = gestureState.dy + (y - prevY);


                var dt =
                    touchHistory.mostRecentTimeStamp - gestureState._accountsForMovesUpTo;
                gestureState.vx = (nextDX - gestureState.dx) / dt;
                gestureState.vy = (nextDY - gestureState.dy) / dt;

                gestureState.dx = nextDX;
                gestureState.dy = nextDY;
                gestureState._accountsForMovesUpTo = touchHistory.mostRecentTimeStamp;
            },



            create: function create(config) {
                var gestureState = {

                    stateID: Math.random()
                };

                PanResponder._initializeGestureState(gestureState);
                var panHandlers = {
                    onStartShouldSetResponder: function onStartShouldSetResponder(e) {
                        return config.onStartShouldSetPanResponder === undefined ? false :
                            config.onStartShouldSetPanResponder(normalizeEvent(e), gestureState);
                    },
                    onMoveShouldSetResponder: function onMoveShouldSetResponder(e) {
                        e.preventDefault();
                        return config.onMoveShouldSetPanResponder === undefined ? false :
                            config.onMoveShouldSetPanResponder(normalizeEvent(e), gestureState);
                    },
                    onStartShouldSetResponderCapture: function onStartShouldSetResponderCapture(e) {


                        if (e.nativeEvent.touches) {
                            if (e.nativeEvent.touches.length === 1) {
                                PanResponder._initializeGestureState(gestureState);
                            }
                        } else
                        if (e.nativeEvent.type === 'mousedown') {
                            PanResponder._initializeGestureState(gestureState);
                        }
                        gestureState.numberActiveTouches = e.touchHistory.numberActiveTouches;
                        return config.onStartShouldSetPanResponderCapture !== undefined ?
                            config.onStartShouldSetPanResponderCapture(normalizeEvent(e), gestureState) : false;
                    },

                    onMoveShouldSetResponderCapture: function onMoveShouldSetResponderCapture(e) {

                        e.preventDefault();
                        var touchHistory = e.touchHistory;



                        if (gestureState._accountsForMovesUpTo === touchHistory.mostRecentTimeStamp) {
                            return false;
                        }
                        PanResponder._updateGestureStateOnMove(gestureState, touchHistory);
                        return config.onMoveShouldSetPanResponderCapture ?
                            config.onMoveShouldSetPanResponderCapture(normalizeEvent(e), gestureState) : false;
                    },

                    onResponderGrant: function onResponderGrant(e) {
                        gestureState.x0 = currentCentroidX(e.touchHistory);
                        gestureState.y0 = currentCentroidY(e.touchHistory);
                        gestureState.dx = 0;
                        gestureState.dy = 0;
                        config.onPanResponderGrant && config.onPanResponderGrant(normalizeEvent(e), gestureState);

                        return config.onShouldBlockNativeResponder === undefined ? true :
                            config.onShouldBlockNativeResponder();
                    },

                    onResponderReject: function onResponderReject(e) {
                        config.onPanResponderReject && config.onPanResponderReject(normalizeEvent(e), gestureState);
                    },

                    onResponderRelease: function onResponderRelease(e) {
                        config.onPanResponderRelease && config.onPanResponderRelease(normalizeEvent(e), gestureState);
                        PanResponder._initializeGestureState(gestureState);
                        panHandlers.moveShould = null;
                    },

                    onResponderStart: function onResponderStart(e) {
                        var touchHistory = e.touchHistory;
                        gestureState.numberActiveTouches = touchHistory.numberActiveTouches;
                        config.onPanResponderStart && config.onPanResponderStart(normalizeEvent(e), gestureState);
                    },

                    onResponderMove: function onResponderMove(e) {
                        var touchHistory = e.touchHistory;


                        if (gestureState._accountsForMovesUpTo === touchHistory.mostRecentTimeStamp) {
                            return;
                        }


                        PanResponder._updateGestureStateOnMove(gestureState, touchHistory);
                        config.onPanResponderMove && config.onPanResponderMove(normalizeEvent(e), gestureState);
                    },

                    onResponderEnd: function onResponderEnd(e) {
                        var touchHistory = e.touchHistory;
                        gestureState.numberActiveTouches = touchHistory.numberActiveTouches;
                        config.onPanResponderEnd && config.onPanResponderEnd(normalizeEvent(e), gestureState);
                        panHandlers.moveShould = null;
                    },

                    onResponderTerminate: function onResponderTerminate(e) {
                        config.onPanResponderTerminate &&
                            config.onPanResponderTerminate(e, gestureState);
                        PanResponder._initializeGestureState(gestureState);
                        panHandlers.moveShould = null;
                    },

                    onResponderTerminationRequest: function onResponderTerminationRequest(e) {
                        return config.onPanResponderTerminationRequest === undefined ? true :
                            config.onPanResponderTerminationRequest(normalizeEvent(e), gestureState);
                    }
                };

                return {
                    panHandlers: panHandlers
                };
            }
        };


        function normalizeEvent(e) {
            e.nativeEvent = normalizeNativeEvent(e.nativeEvent);
            return e;
        }

        module.exports = PanResponder;

        /***/
    },
    /* 196 */
    /***/
    function(module, exports) {



        var normalizeTouches = function normalizeTouches() {
            var touches = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
            return Array.prototype.slice.call(touches).map(function(touch) {
                var identifier = touch.identifier > 20 ? touch.identifier % 20 : touch.identifier;



                return {
                    clientX: touch.clientX,
                    clientY: touch.clientY,
                    force: touch.force,
                    get locationX() {
                        if (!this.rect) {
                            this.rect = this.target && this.target.getBoundingClientRect();
                        }
                        var locationX = this.pageX - this.rect.left;
                        return locationX;
                    },
                    get locationY() {
                        if (!this.rect) {
                            this.rect = this.target && this.target.getBoundingClientRect();
                        }
                        var locationY = this.pageY - this.rect.top;
                        return locationY;
                    },
                    identifier: identifier,
                    pageX: touch.pageX,
                    pageY: touch.pageY,
                    radiusX: touch.radiusX,
                    radiusY: touch.radiusY,
                    rotationAngle: touch.rotationAngle,
                    screenX: touch.screenX,
                    screenY: touch.screenY,
                    target: touch.target,


                    timestamp: Date.now()
                };

            });
        };

        function normalizeTouchEvent(nativeEvent) {
            var changedTouches = normalizeTouches(nativeEvent.changedTouches);
            var touches = normalizeTouches(nativeEvent.touches);

            var event = {
                changedTouches: changedTouches,
                type: nativeEvent.type,
                pageX: nativeEvent.pageX,
                pageY: nativeEvent.pageY,
                target: nativeEvent.target,


                timestamp: Date.now(),
                touches: touches
            };


            if (changedTouches[0]) {
                event.identifier = changedTouches[0].identifier;
                event.pageX = changedTouches[0].pageX;
                event.pageY = changedTouches[0].pageY;
                event.locationX = changedTouches[0].locationX;
                event.locationY = changedTouches[0].locationY;
            }

            return event;
        }

        function normalizeMouseEvent(nativeEvent) {
            var touches = [{
                clientX: nativeEvent.clientX,
                clientY: nativeEvent.clientY,
                force: nativeEvent.force,
                locationX: nativeEvent.clientX,
                locationY: nativeEvent.clientY,
                identifier: 0,
                pageX: nativeEvent.pageX,
                pageY: nativeEvent.pageY,
                screenX: nativeEvent.screenX,
                screenY: nativeEvent.screenY,
                target: nativeEvent.target,
                timestamp: nativeEvent.timestamp || Date.now()
            }];

            return {
                type: nativeEvent.type,
                changedTouches: touches,
                identifier: touches[0].identifier,
                locationX: nativeEvent.offsetX,
                locationY: nativeEvent.offsetY,
                pageX: nativeEvent.pageX,
                pageY: nativeEvent.pageY,
                target: nativeEvent.target,
                timestamp: touches[0].timestamp,
                touches: nativeEvent.type === 'mouseup' ? [] : touches
            };

        }

        function normalizeNativeEvent(nativeEvent) {
            var mouse = nativeEvent.type.indexOf('mouse') >= 0;
            return mouse ? normalizeMouseEvent(nativeEvent) : normalizeTouchEvent(nativeEvent);
        }

        module.exports = normalizeNativeEvent;

        /***/
    },
    /* 197 */
    /***/
    function(module, exports) {



        'use strict';

        var TouchHistoryMath = {



            centroidDimension: function centroidDimension(touchHistory, touchesChangedAfter, isXAxis, ofCurrent) {
                var touchBank = touchHistory.touchBank;
                var total = 0;
                var count = 0;

                var oneTouchData = touchHistory.numberActiveTouches === 1 ? touchHistory.touchBank[touchHistory.indexOfSingleActiveTouch] : null;

                if (oneTouchData !== null) {
                    if (oneTouchData.touchActive && oneTouchData.currentTimeStamp > touchesChangedAfter) {
                        total += ofCurrent && isXAxis ? oneTouchData.currentPageX : ofCurrent && !isXAxis ? oneTouchData.currentPageY : !ofCurrent && isXAxis ? oneTouchData.previousPageX : oneTouchData.previousPageY;
                        count = 1;
                    }
                } else {
                    for (var i = 0; i < touchBank.length; i++) {
                        var touchTrack = touchBank[i];
                        if (touchTrack !== null && touchTrack !== undefined && touchTrack.touchActive && touchTrack.currentTimeStamp >= touchesChangedAfter) {
                            var toAdd;
                            if (ofCurrent && isXAxis) {
                                toAdd = touchTrack.currentPageX;
                            } else if (ofCurrent && !isXAxis) {
                                toAdd = touchTrack.currentPageY;
                            } else if (!ofCurrent && isXAxis) {
                                toAdd = touchTrack.previousPageX;
                            } else {
                                toAdd = touchTrack.previousPageY;
                            }
                            total += toAdd;
                            count++;
                        }
                    }
                }
                return count > 0 ? total / count : TouchHistoryMath.noCentroid;
            },

            currentCentroidXOfTouchesChangedAfter: function currentCentroidXOfTouchesChangedAfter(touchHistory, touchesChangedAfter) {
                return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, true,
                    true);

            },

            currentCentroidYOfTouchesChangedAfter: function currentCentroidYOfTouchesChangedAfter(touchHistory, touchesChangedAfter) {
                return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, false,
                    true);

            },

            previousCentroidXOfTouchesChangedAfter: function previousCentroidXOfTouchesChangedAfter(touchHistory, touchesChangedAfter) {
                return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, true,
                    false);

            },

            previousCentroidYOfTouchesChangedAfter: function previousCentroidYOfTouchesChangedAfter(touchHistory, touchesChangedAfter) {
                return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, false,
                    false);

            },

            currentCentroidX: function currentCentroidX(touchHistory) {
                return TouchHistoryMath.centroidDimension(touchHistory, 0,
                    true,
                    true);

            },

            currentCentroidY: function currentCentroidY(touchHistory) {
                return TouchHistoryMath.centroidDimension(touchHistory, 0,
                    false,
                    true);

            },

            noCentroid: -1
        };


        module.exports = TouchHistoryMath;

        /***/
    },
    /* 198 */
    /***/
    function(module, exports, __webpack_require__) {

        var createRange = __webpack_require__(199);



        var range = createRange();

        module.exports = range;

        /***/
    },
    /* 199 */
    /***/
    function(module, exports, __webpack_require__) {

        var baseRange = __webpack_require__(200),
            isIterateeCall = __webpack_require__(201),
            toNumber = __webpack_require__(35);



        function createRange(fromRight) {
            return function(start, end, step) {
                if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {
                    end = step = undefined;
                }

                start = toNumber(start);
                start = start === start ? start : 0;
                if (end === undefined) {
                    end = start;
                    start = 0;
                } else {
                    end = toNumber(end) || 0;
                }
                step = step === undefined ? start < end ? 1 : -1 : toNumber(step) || 0;
                return baseRange(start, end, step, fromRight);
            };
        }

        module.exports = createRange;

        /***/
    },
    /* 200 */
    /***/
    function(module, exports) {


        var nativeCeil = Math.ceil,
            nativeMax = Math.max;



        function baseRange(start, end, step, fromRight) {
            var index = -1,
                length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
                result = Array(length);

            while (length--) {
                result[fromRight ? length : ++index] = start;
                start += step;
            }
            return result;
        }

        module.exports = baseRange;

        /***/
    },
    /* 201 */
    /***/
    function(module, exports, __webpack_require__) {

        var eq = __webpack_require__(95),
            isArrayLike = __webpack_require__(150),
            isIndex = __webpack_require__(156),
            isObject = __webpack_require__(33);



        function isIterateeCall(value, index, object) {
            if (!isObject(object)) {
                return false;
            }
            var type = typeof index;
            if (type == 'number' ?
                isArrayLike(object) && isIndex(index, object.length) :
                type == 'string' && index in object) {
                return eq(object[index], value);
            }
            return false;
        }

        module.exports = isIterateeCall;

        /***/
    },
    /* 202 */
    /***/
    function(module, exports, __webpack_require__) {

        var _extends = Object.assign || function(target) {
            for (var i = 1; i < arguments.length; i++) {
                var source = arguments[i];
                for (var key in source) {
                    if (Object.prototype.hasOwnProperty.call(source, key)) {
                        target[key] = source[key];
                    }
                }
            }
            return target;
        };



        var React = __webpack_require__(10);
        var View = __webpack_require__(27);
        var StyleSheet = __webpack_require__(39);
        var LayoutMixin = __webpack_require__(28);
        var PropTypes = React.PropTypes;
        var NativeMethodsMixin = __webpack_require__(54);

        var RESIZE_MODE = {
            contain: 'contain',
            stretch: 'stretch',
            cover: 'cover',
            center: 'center',
            none: 'none',
            repeat: 'repeat'
        };



        function getUri(props) {
            if (typeof props !== 'object') {
                return;
            }
            var source = props.source || props.defaultSource,
                uri = void 0;
            if (source) {
                switch (typeof source) {
                    case 'string':
                        uri = source;
                        break;
                    case 'object':
                        uri = source.uri;
                        break;
                }

            }
            return uri || 'about:blank';
        }



        var _Image = React.createClass({
            displayName: '_Image',
            mixins: [LayoutMixin, NativeMethodsMixin],
            getInitialState: function getInitialState() {
                this.sourceUpdated = false;
                this.image = null;
                return {
                    source: {
                        uri: getUri(this.props)
                    }
                };

            },

            getDefaultProps: function getDefaultProps() {
                return {
                    style: {}
                };

            },
            componentWillReceiveProps: function componentWillReceiveProps(props) {
                var newSource = props.source ? {
                    uri: getUri(props)
                } : {};
                if (newSource.uri !== this.state.source.uri) {
                    this.sourceUpdated = true;
                    this.setState({
                        source: _extends({}, this.state.source, newSource)
                    });

                } else {
                    this.sourceUpdated = false;
                }
            },
            componentDidMount: function componentDidMount() {
                this._startImageLoader();
            },
            componentDidUpdate: function componentDidUpdate() {
                if (this.sourceUpdated === true) {
                    this._startImageLoader();
                }
            },
            componentWillUnmount: function componentWillUnmount() {
                this._stopImageLoader();
            },
            render: function render() {
                var props = this.props,
                    src = this.state.source.uri,
                    style = StyleSheet.fix(props.style),
                    resizeMode = this.props.resizeMode || style.resizeMode;

                if (this.props.children || !!resizeMode && resizeMode !== 'none') {
                    var backgroundImage = 'url("' + src.replace(/^http:/, '') + '")';
                    return (
                        (this && this.createElement || React.createElement)(View, {
                                style: [
                                    styles.initial, {
                                        backgroundImage: backgroundImage
                                    },
                                    resizeModeStyles[resizeMode],
                                    style
                                ],

                                'data-src': src
                            },

                            props.children || null));


                } else {
                    return (
                        (this && this.createElement || React.createElement)('img', {
                            style: style,
                            src: src,
                            className: props.className,
                            loop: 'infinite'
                        }));


                }
            },
            _startImageLoader: function _startImageLoader() {
                var _this = this;
                this._stopImageLoader();
                if (!this.props.onLoad && !this.props.onError) {
                    return;
                }
                this.image = new Image();
                this.image.src = this.state.source.uri;
                this.image.onload = function() {
                    _this.props.onLoad && _this.props.onLoad();
                };
                this.image.onerror = function() {
                    _this.props.onError && _this.props.onError();
                };
            },
            _stopImageLoader: function _stopImageLoader() {
                if (this.image) {
                    this.image.onload = null;
                    this.image.onerror = null;
                    this.image = null;
                }
            }
        });



        _Image.resizeMode = RESIZE_MODE;



        _Image.getSize = function(uri, success, failure) {
            var img = new Image();
            img.src = uri;
            img.onload = function() {
                success(img.width, img.height);
                img = img.onload = img.onerror = null;
            };
            img.onerror = function(err) {
                failure(err);
                img = img.onload = img.onerror = null;
            };
        };



        _Image.prefetch = function(uri) {
            var img = new Image();
            img.src = uri;
        };

        _Image.propTypes = {



            onLayout: PropTypes.func,



            onLoad: PropTypes.func,



            onLoadEnd: PropTypes.func,



            onLoadStart: PropTypes.func,



            onError: PropTypes.func,



            source: PropTypes.oneOfType([
                PropTypes.object,
                PropTypes.number
            ]),



            style: PropTypes.oneOfType([PropTypes.object, PropTypes.arrayOf(PropTypes.object)]),
            resizeMode: PropTypes.oneOf(Object.keys(RESIZE_MODE))
        };


        var styles = StyleSheet.create({
            initial: {
                backgroundColor: 'transparent',
                backgroundRepeat: 'no-repeat',
                backgroundSize: 'cover',
                backgroundPosition: 'center center'
            }
        });



        var resizeModeStyles = StyleSheet.create({
            center: {
                backgroundSize: 'auto',
                backgroundPosition: 'center'
            },

            contain: {
                backgroundSize: 'contain'
            },

            cover: {
                backgroundSize: 'cover'
            },

            none: {
                backgroundSize: 'auto'
            },

            repeat: {
                backgroundSize: 'auto',
                backgroundRepeat: 'repeat',
                backgroundPosition: '0 0'
            },

            stretch: {
                backgroundSize: '100% 100%'
            }
        });



        module.exports = _Image;

        /***/
    },
    /* 203 */
    /***/
    function(module, exports, __webpack_require__) {



        'use strict';
        var _extends = Object.assign || function(target) {
            for (var i = 1; i < arguments.length; i++) {
                var source = arguments[i];
                for (var key in source) {
                    if (Object.prototype.hasOwnProperty.call(source, key)) {
                        target[key] = source[key];
                    }
                }
            }
            return target;
        };
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor;
            };
        }();

        function _objectWithoutProperties(obj, keys) {
            var target = {};
            for (var i in obj) {
                if (keys.indexOf(i) >= 0) continue;
                if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;
                target[i] = obj[i];
            }
            return target;
        }

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
            }
        }

        function _possibleConstructorReturn(self, call) {
            if (!self) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            }
            return call && (typeof call === "object" || typeof call === "function") ? call : self;
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
        }

        var React = __webpack_require__(10);
        var ReactNative = __webpack_require__(6);
        var
            ScrollView = ReactNative.ScrollView,
            View = ReactNative.View;
        var ListViewDataSource = __webpack_require__(204);
        var StaticRenderer = __webpack_require__(206);

        var Rows = __webpack_require__(230);
        var SCROLL_VIEW = 'ScrollView';
        var TOP_PLACEHOLDER = 'top-placeholder';
        var BOTTOM_PLACEHOLDER = 'bottom-placeholder';
        var



            ListView = function(_React$Component) {
            _inherits(ListView, _React$Component);

            function ListView(props) {
                _classCallCheck(this, ListView);
                var _this = _possibleConstructorReturn(this, (ListView.__proto__ || Object.getPrototypeOf(ListView)).call(this,
                    props));


                _this.onScroll = _this.onScroll.bind(_this);

                var rows = new Rows(props);
                _this.rows = rows;

                _this.state = {

                    rows: rows.getNeedRenderRows({
                        initial: true,
                        limitRangeRowPerFrame: false
                    }),



                    placeholderHeight: {
                        top: 0,
                        bottom: 0
                    },


                    propsPassToScrollView: {}
                };
                return _this;

            }
            _createClass(ListView, [{
                key: 'componentWillReceiveProps',
                value: function componentWillReceiveProps(



                    props) {

                    if (this.props.dataSource !== props.dataSource) {
                        this.rows.update(props);
                        this.rows.setRenderOffset(this.rows.offset);
                        var rows = this.rows.getNeedRenderRows({
                            limitRangeRowPerFrame: false
                        });

                        this.setState({
                            rows: rows,
                            placeholderHeight: this.rows.getPlaceholderHeight()
                        });

                    }
                }
            }, {
                key: 'onRowHighlighted',
                value: function onRowHighlighted(



                    sectionIndex, rowIndex) {
                    this.setState({
                        highlightedRow: {
                            sectionIndex: sectionIndex,
                            rowIndex: rowIndex
                        }
                    });
                }
            }, {
                key: 'onScroll',
                value: function onScroll(
                    e) {
                    if (typeof this.props.onScroll === 'function') {
                        this.props.onScroll(e);
                    }


                    this.rows.setRenderOffset(e.nativeEvent.contentOffset);
                    var rows = this.rows.getNeedRenderRows();
                    if (rows.changed) {
                        this.setState({
                            rows: rows,
                            placeholderHeight: this.rows.getPlaceholderHeight()
                        });

                    }
                }
            }, {
                key: 'onRowLayout',
                value: function onRowLayout(


                    row, event) {
                    this.rows.setRowLayout(row.index, event.nativeEvent.layout);
                }
            }, {
                key: 'scrollToTop',
                value: function scrollToTop()



                {
                    var top = this.props.refreshControl ? this.props.refreshControl.props.height : 0;
                    var options = {
                        x: 0,
                        y: top
                    };

                    this.scrollTo(options);
                }
            }, {
                key: 'scrollTo',
                value: function scrollTo(

                    options) {
                    var ScrollViewComponent = this.refs[SCROLL_VIEW];
                    if (typeof options === 'object') {
                        options.animated = false;
                    }

                    if (ScrollViewComponent) {
                        ScrollViewComponent.scrollTo(options);
                        this.rows.setRenderOffset({
                            y: options.y
                        });
                        this.setState({
                            rows: this.rows.getNeedRenderRows({
                                limitRangeRowPerFrame: false
                            }),

                            placeholderHeight: this.rows.getPlaceholderHeight()
                        });

                    }
                }
            }, {
                key: 'getScrollResponder',
                value: function getScrollResponder()



                {
                    var scrollComponent = this.refs[SCROLL_VIEW];
                    if (scrollComponent) {
                        if (scrollComponent.getScrollResponder) {
                            return scrollComponent.getScrollResponder();
                        } else {
                            return scrollComponent;
                        }
                    }
                }
            }, {
                key: 'setNativeProps',
                value: function setNativeProps(

                    props) {
                    this.setState({
                        settedScrollResponderProps: _extends(this.state.propsPassToScrollView, props)
                    });

                }
            }, {
                key: 'startRefreshing',
                value: function startRefreshing(



                    config) {
                    if (this.refs[SCROLL_VIEW].startRefreshing) {
                        this.refs[SCROLL_VIEW].startRefreshing(config);
                    }
                }
            }, {
                key: 'stopRefreshing',
                value: function stopRefreshing()



                {
                    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
                    var refreshControl = this.props.refreshControl,
                        ScrollViewComponent = this.refs[SCROLL_VIEW];

                    if (refreshControl) {
                        if (this.rows.offset.y > this.rows.containerHeight) {
                            this.scrollToTop({
                                animated: false
                            });
                        }
                        ScrollViewComponent && ScrollViewComponent.stopRefreshing();
                    }
                }
            }, {
                key: 'startLoading',
                value: function startLoading(



                    config) {
                    if (this.refs[SCROLL_VIEW].startLoading) {
                        this.refs[SCROLL_VIEW].startLoading(config);
                    }
                }
            }, {
                key: 'stopLoading',
                value: function stopLoading(



                    config) {
                    if (this.refs[SCROLL_VIEW].stopLoading) {
                        this.refs[SCROLL_VIEW].stopLoading(config);
                    }
                }
            }, {
                key: 'renderHeader',
                value: function renderHeader(

                    children) {
                    this.scrollViewRowIndex += 1;
                    return children.push(this.props.renderHeader());
                }
            }, {
                key: 'renderStaticHeader',
                value: function renderStaticHeader(

                    children) {
                    this.scrollViewRowIndex += 1;
                    return children.push(
                        (this && this.createElement || React.createElement)(StaticRenderer, {
                            key: 'static-header',
                            shouldUpdate: false,
                            render: this.props.renderStaticHeader
                        }));

                }
            }, {
                key: 'renderFooter',
                value: function renderFooter(

                    children) {
                    this.scrollViewRowIndex += 1;
                    return children.push(this.props.renderFooter());
                }
            }, {
                key: 'renderStaticFooter',
                value: function renderStaticFooter(

                    children) {
                    this.scrollViewRowIndex += 1;
                    return children.push(
                        (this && this.createElement || React.createElement)(StaticRenderer, {
                            key: 'static-footer',
                            shouldUpdate: false,
                            render: this.props.renderStaticFooter
                        }));

                }
            }, {
                key: 'renderTopPlaceholder',
                value: function renderTopPlaceholder(

                    children) {
                    this.scrollViewRowIndex += 1;
                    var

                        placeholderHeight = this.state.placeholderHeight;
                    children.push(
                        (this && this.createElement || React.createElement)(View, {
                            ref: TOP_PLACEHOLDER,
                            key: 'top-placeholder',
                            style: {
                                height: placeholderHeight.top,
                                width: 1,

                                backgroundColor: 'transparent'
                            }
                        }));



                }
            }, {
                key: 'renderBottomPlaceholder',
                value: function renderBottomPlaceholder(

                    children) {
                    var
                        placeholderHeight = this.state.placeholderHeight;
                    children.push(
                        (this && this.createElement || React.createElement)(View, {
                            ref: BOTTOM_PLACEHOLDER,
                            key: 'bottom-placeholder',
                            style: {
                                height: placeholderHeight.bottom,
                                width: 1
                            }
                        }));



                }
            }, {
                key: 'renderSectionHeader',
                value: function renderSectionHeader(

                    children, row) {
                    this.scrollViewRowIndex += 1;
                    var _props =

                        this.props,
                        dataSource = _props.dataSource,
                        renderSectionHeader = _props.renderSectionHeader;
                    var shouldTriggerOnLayoutContent = !row.height;

                    children.push(
                        (this && this.createElement || React.createElement)(View, {
                                key: 'section-header-' + row.key,
                                onLayout: shouldTriggerOnLayoutContent ? this.onRowLayout.bind(this, row) : null
                            },
                            (this && this.createElement || React.createElement)(StaticRenderer, {
                                shouldUpdate: row.shouldUpdate,
                                render: renderSectionHeader.bind(
                                    null,
                                    dataSource.getSectionHeaderData(row.sectionIndex),
                                    row.sectionName)
                            })));



                }
            }, {
                key: 'renderSeparator',
                value: function renderSeparator(

                    children, renderIndex) {
                    this.scrollViewRowIndex += 1;

                    children.push(
                        (this && this.createElement || React.createElement)(View, {
                                key: 'separator-' + renderIndex
                            },
                            (this && this.createElement || React.createElement)(StaticRenderer, {
                                shouldUpdate: false,
                                render: this.props.renderSeparator
                            })));


                }
            }, {
                key: 'renderRow',
                value: function renderRow(

                    children, row) {
                    this.scrollViewRowIndex += 1;
                    var _props2 =

                        this.props,
                        dataSource = _props2.dataSource,
                        renderRow = _props2.renderRow;
                    var shouldTriggerOnLayoutContent = !row.height;
                    var separator = null;
                    if (this.rows.checkIfNeedSeparator(row)) {
                        separator = this.props.renderSeparator();
                    }

                    children.push(
                        (this && this.createElement || React.createElement)(View, {
                                key: 'row-' + row.key,
                                onLayout: shouldTriggerOnLayoutContent ? this.onRowLayout.bind(this, row) : null
                            },
                            (this && this.createElement || React.createElement)(StaticRenderer, {
                                shouldUpdate: row.shouldUpdate,
                                render: renderRow.bind(
                                    null,
                                    dataSource.getRowData(row.sectionIndex, row.rowIndex),
                                    row.sectionName,
                                    row.rowIndex,
                                    this.onRowHighlighted)
                            }),


                            separator));


                }
            }, {
                key: 'render',
                value: function render()

                {
                    var _this2 = this;

                    var rows = this.state.rows;

                    var children = [],
                        stickyHeaderIndices = [];

                    this.scrollViewRowIndex = 0;


                    if (this.props.renderHeader) {
                        this.renderHeader(children);
                    }
                    if (this.props.renderStaticHeader) {
                        this.renderStaticHeader(children);
                    }


                    this.renderTopPlaceholder(children);



                    for (var i = 0; i < rows.length; i++) {
                        var row = rows[i];
                        if (row.type === Rows.TYPES.SECTION_HEADER) {
                            stickyHeaderIndices.push(this.scrollViewRowIndex);
                            this.renderSectionHeader(children, row);
                        } else if (row.type === Rows.TYPES.ROW) {
                            this.renderRow(children, row);
                        }
                    }

                    this.renderBottomPlaceholder(children);

                    if (this.props.renderFooter) {
                        this.renderFooter(children);
                    }
                    if (this.props.renderStaticFooter) {
                        this.renderStaticFooter(children);
                    }
                    var _props3 =

                        this.props,
                        renderScrollComponent = _props3.renderScrollComponent,
                        props = _objectWithoutProperties(_props3, ['renderScrollComponent']);

                    if (!renderScrollComponent) {
                        renderScrollComponent = function renderScrollComponent(scrollViewProps) {
                            return (_this2 && _this2.createElement || React.createElement)(ScrollView, scrollViewProps);
                        };
                    }



                    var onLayoutHandle = null;
                    if (this.props.onLayout || !this.isContainerOnLayoutTriggered) {
                        onLayoutHandle = function onLayoutHandle(event) {
                            _this2.rows.containerHeight = event.nativeEvent.layout.height;
                            _this2.isContainerOnLayoutTriggered = true;
                            _this2.props.onLayout && _this2.props.onLayout(event);
                        };
                    }
                    _extends(props, {
                            ref: SCROLL_VIEW,
                            onScroll: this.onScroll,
                            onLayout: onLayoutHandle,
                            stickyHeaderIndices: stickyHeaderIndices
                        },
                        this.state.propsPassToScrollView);


                    if (props.removeClippedSubviews) {
                        delete props.removeClippedSubviews;
                    }

                    return React.cloneElement(renderScrollComponent(props), {}, children);
                }
            }]);
            return ListView;
        }(React.Component);
        ListView.DataSource = ListViewDataSource;


        ListView.propTypes = _extends({},
            ScrollView.propTypes, {



                dataSource: React.PropTypes.instanceOf(ListViewDataSource).isRequired,



                initialListSize: React.PropTypes.number,



                onChangeVisibleRows: React.PropTypes.func,



                onEndReached: React.PropTypes.func,



                onEndReachedThreshold: React.PropTypes.number,



                pageSize: React.PropTypes.number,



                renderHeader: React.PropTypes.func,



                renderFooter: React.PropTypes.func,



                renderStaticHeader: React.PropTypes.func,



                renderStaticFooter: React.PropTypes.func,



                renderRow: React.PropTypes.func.isRequired,



                renderScrollComponent: React.PropTypes.func,



                renderSeparator: React.PropTypes.func,



                scrollRenderAheadDistance: React.PropTypes.number,



                scrollEventThrottle: React.PropTypes.number
            });


        ListView.defaultProps = {
            scrollRenderAheadDistance: 500,
            onEndReachedThreshold: 0,
            pageSize: 5,
            initialListSize: 10,
            useOriginScrollView: false,
            scrollEventThrottle: 50
        };


        module.exports = ListView;

        /***/
    },
    /* 204 */
    /***/
    function(module, exports, __webpack_require__) {



        'use strict';
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor;
            };
        }();

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
            }
        }

        var invariant = __webpack_require__(19);
        var isEmpty = __webpack_require__(205);
        var warning = __webpack_require__(20);

        function defaultGetRowData(
            dataBlob,
            sectionID,
            rowID) {
            return dataBlob[sectionID][rowID];
        }

        function defaultGetSectionHeaderData(
            dataBlob,
            sectionID) {
            return dataBlob[sectionID];
        }
        var



            ListViewDataSource = function() {



            function ListViewDataSource(params) {
                _classCallCheck(this, ListViewDataSource);
                invariant(
                    params && typeof params.rowHasChanged === 'function',
                    'Must provide a rowHasChanged function.');

                this._rowHasChanged = params.rowHasChanged;
                this._getRowData = params.getRowData || defaultGetRowData;
                this._sectionHeaderHasChanged = params.sectionHeaderHasChanged;
                this._getSectionHeaderData =
                    params.getSectionHeaderData || defaultGetSectionHeaderData;

                this._dataBlob = null;
                this._dirtyRows = [];
                this._dirtySections = [];
                this._cachedRowCount = 0;



                this.rowIdentities = [];
                this.sectionIdentities = [];
            }
            _createClass(ListViewDataSource, [{
                key: 'cloneWithRows',
                value: function cloneWithRows(



                    dataBlob,
                    rowIdentities) {
                    var rowIds = rowIdentities ? [rowIdentities] : null;
                    if (!this._sectionHeaderHasChanged) {
                        this._sectionHeaderHasChanged = function() {
                            return false;
                        };
                    }
                    return this.cloneWithRowsAndSections({
                        s1: dataBlob
                    }, ['s1'], rowIds);
                }
            }, {
                key: 'cloneWithRowsAndSections',
                value: function cloneWithRowsAndSections(



                    dataBlob,
                    sectionIdentities,
                    rowIdentities) {
                    invariant(
                        typeof this._sectionHeaderHasChanged === 'function',
                        'Must provide a sectionHeaderHasChanged function with section data.');

                    invariant(!sectionIdentities || !rowIdentities || sectionIdentities.length === rowIdentities.length,
                        'row and section ids lengths must be the same');


                    var newSource = new ListViewDataSource({
                        getRowData: this._getRowData,
                        getSectionHeaderData: this._getSectionHeaderData,
                        rowHasChanged: this._rowHasChanged,
                        sectionHeaderHasChanged: this._sectionHeaderHasChanged
                    });

                    newSource._dataBlob = dataBlob;
                    if (sectionIdentities) {
                        newSource.sectionIdentities = sectionIdentities;
                    } else {
                        newSource.sectionIdentities = Object.keys(dataBlob);
                    }
                    if (rowIdentities) {
                        newSource.rowIdentities = rowIdentities;
                    } else {
                        newSource.rowIdentities = [];
                        newSource.sectionIdentities.forEach(function(sectionID) {
                            newSource.rowIdentities.push(Object.keys(dataBlob[sectionID]));
                        });
                    }
                    newSource._cachedRowCount = countRows(newSource.rowIdentities);

                    newSource._calculateDirtyArrays(
                        this._dataBlob,
                        this.sectionIdentities,
                        this.rowIdentities);


                    return newSource;
                }
            }, {
                key: 'getRowCount',
                value: function getRowCount()

                {
                    return this._cachedRowCount;
                }
            }, {
                key: 'getRowAndSectionCount',
                value: function getRowAndSectionCount()

                {
                    return this._cachedRowCount + this.sectionIdentities.length;
                }
            }, {
                key: 'rowShouldUpdate',
                value: function rowShouldUpdate(



                    sectionIndex, rowIndex) {
                    var needsUpdate = this._dirtyRows[sectionIndex][rowIndex];
                    warning(needsUpdate !== undefined,
                        'missing dirtyBit for section, row: ' + sectionIndex + ', ' + rowIndex);
                    return needsUpdate;
                }
            }, {
                key: 'getRowData',
                value: function getRowData(



                    sectionIndex, rowIndex) {
                    var sectionID = this.sectionIdentities[sectionIndex];
                    var rowID = this.rowIdentities[sectionIndex][rowIndex];
                    warning(
                        sectionID !== undefined && rowID !== undefined,
                        'rendering invalid section, row: ' + sectionIndex + ', ' + rowIndex);

                    return this._getRowData(this._dataBlob, sectionID, rowID);
                }
            }, {
                key: 'getRowIDForFlatIndex',
                value: function getRowIDForFlatIndex(



                    index) {
                    var accessIndex = index;
                    for (var ii = 0; ii < this.sectionIdentities.length; ii++) {
                        if (accessIndex >= this.rowIdentities[ii].length) {
                            accessIndex -= this.rowIdentities[ii].length;
                        } else {
                            return this.rowIdentities[ii][accessIndex];
                        }
                    }
                    return null;
                }
            }, {
                key: 'getSectionIDForFlatIndex',
                value: function getSectionIDForFlatIndex(



                    index) {
                    var accessIndex = index;
                    for (var ii = 0; ii < this.sectionIdentities.length; ii++) {
                        if (accessIndex >= this.rowIdentities[ii].length) {
                            accessIndex -= this.rowIdentities[ii].length;
                        } else {
                            return this.sectionIdentities[ii];
                        }
                    }
                    return null;
                }
            }, {
                key: 'getSectionLengths',
                value: function getSectionLengths()



                {
                    var results = [];
                    for (var ii = 0; ii < this.sectionIdentities.length; ii++) {
                        results.push(this.rowIdentities[ii].length);
                    }
                    return results;
                }
            }, {
                key: 'sectionHeaderShouldUpdate',
                value: function sectionHeaderShouldUpdate(



                    sectionIndex) {
                    var needsUpdate = this._dirtySections[sectionIndex];
                    warning(needsUpdate !== undefined,
                        'missing dirtyBit for section: ' + sectionIndex);
                    return needsUpdate;
                }
            }, {
                key: 'getSectionHeaderData',
                value: function getSectionHeaderData(



                    sectionIndex) {
                    if (!this._getSectionHeaderData) {
                        return null;
                    }
                    var sectionID = this.sectionIdentities[sectionIndex];
                    warning(sectionID !== undefined,
                        'renderSection called on invalid section: ' + sectionIndex);
                    return this._getSectionHeaderData(this._dataBlob, sectionID);
                }
            }, {
                key: '_calculateDirtyArrays',
                value: function _calculateDirtyArrays(



                    prevDataBlob,
                    prevSectionIDs,
                    prevRowIDs) {

                    var prevSectionsHash = keyedDictionaryFromArray(prevSectionIDs);
                    var prevRowsHash = {};
                    for (var ii = 0; ii < prevRowIDs.length; ii++) {
                        var sectionID = prevSectionIDs[ii];
                        warning(!prevRowsHash[sectionID],
                            'SectionID appears more than once: ' + sectionID);

                        prevRowsHash[sectionID] = keyedDictionaryFromArray(prevRowIDs[ii]);
                    }


                    this._dirtySections = [];
                    this._dirtyRows = [];

                    var dirty;
                    for (var sIndex = 0; sIndex < this.sectionIdentities.length; sIndex++) {
                        var sectionID = this.sectionIdentities[sIndex];

                        dirty = !prevSectionsHash[sectionID];
                        var sectionHeaderHasChanged = this._sectionHeaderHasChanged;
                        if (!dirty && sectionHeaderHasChanged) {
                            dirty = sectionHeaderHasChanged(
                                this._getSectionHeaderData(prevDataBlob, sectionID),
                                this._getSectionHeaderData(this._dataBlob, sectionID));

                        }
                        this._dirtySections.push(!!dirty);

                        this._dirtyRows[sIndex] = [];
                        for (var rIndex = 0; rIndex < this.rowIdentities[sIndex].length; rIndex++) {
                            var rowID = this.rowIdentities[sIndex][rIndex];

                            dirty = !prevSectionsHash[sectionID] ||
                                !prevRowsHash[sectionID][rowID] ||
                                this._rowHasChanged(
                                    this._getRowData(prevDataBlob, sectionID, rowID),
                                    this._getRowData(this._dataBlob, sectionID, rowID));

                            this._dirtyRows[sIndex].push(!!dirty);
                        }
                    }
                }
            }]);
            return ListViewDataSource;
        }();


        function countRows(allRowIDs) {
            var totalRows = 0;
            for (var sectionIdx = 0; sectionIdx < allRowIDs.length; sectionIdx++) {
                var rowIDs = allRowIDs[sectionIdx];
                totalRows += rowIDs.length;
            }
            return totalRows;
        }

        function keyedDictionaryFromArray(arr) {
            if (isEmpty(arr)) {
                return {};
            }
            var result = {};
            for (var ii = 0; ii < arr.length; ii++) {
                var key = arr[ii];
                warning(!result[key], 'Value appears more than once in array: ' + key);
                result[key] = true;
            }
            return result;
        }


        module.exports = ListViewDataSource;

        /***/
    },
    /* 205 */
    /***/
    function(module, exports) {



        function isEmpty(obj) {
            if (Array.isArray(obj)) {
                return obj.length === 0;
            } else if (typeof obj === 'object') {
                for (var i in obj) {
                    return false;
                }
                return true;
            } else {
                return !obj;
            }
        }

        module.exports = isEmpty;

        /***/
    },
    /* 206 */
    /***/
    function(module, exports, __webpack_require__) {



        'use strict';
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor;
            };
        }();

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
            }
        }

        function _possibleConstructorReturn(self, call) {
            if (!self) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            }
            return call && (typeof call === "object" || typeof call === "function") ? call : self;
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
        }

        var React = __webpack_require__(207);
        var

            StaticRenderer = function(_React$Component) {
            _inherits(StaticRenderer, _React$Component);

            function StaticRenderer() {
                _classCallCheck(this, StaticRenderer);
                return _possibleConstructorReturn(this, (StaticRenderer.__proto__ || Object.getPrototypeOf(StaticRenderer)).apply(this, arguments));
            }
            _createClass(StaticRenderer, [{
                key: 'shouldComponentUpdate',
                value: function shouldComponentUpdate(



                    nextProps) {
                    return nextProps.shouldUpdate;
                }
            }, {
                key: 'render',
                value: function render()

                {
                    return this.props.render();
                }
            }]);
            return StaticRenderer;
        }(React.Component);
        StaticRenderer.propTypes = {
            shouldUpdate: React.PropTypes.bool.isRequired,
            render: React.PropTypes.func.isRequired
        };


        module.exports = StaticRenderer;

        /***/
    },
    /* 207 */
    /***/
    function(module, exports, __webpack_require__) {



        'use strict';

        var _assign = __webpack_require__(208);

        var ReactChildren = __webpack_require__(209);
        var ReactComponent = __webpack_require__(215);
        var ReactPureComponent = __webpack_require__(218);
        var ReactClass = __webpack_require__(219);
        var ReactDOMFactories = __webpack_require__(224);
        var ReactElement = __webpack_require__(210);
        var ReactPropTypes = __webpack_require__(226);
        var ReactVersion = __webpack_require__(228);

        var onlyChild = __webpack_require__(229);
        var warning = __webpack_require__(20);

        var createElement = ReactElement.createElement;
        var createFactory = ReactElement.createFactory;
        var cloneElement = ReactElement.cloneElement;

        if (false) {
            var ReactElementValidator = require('./ReactElementValidator');
            createElement = ReactElementValidator.createElement;
            createFactory = ReactElementValidator.createFactory;
            cloneElement = ReactElementValidator.cloneElement;
        }

        var __spread = _assign;

        if (false) {
            var warned = false;
            __spread = function __spread() {
                process.env.NODE_ENV !== 'production' ? warning(warned, 'React.__spread is deprecated and should not be used. Use ' + 'Object.assign directly or another helper function with similar ' + 'semantics. You may be seeing this warning due to your compiler. ' + 'See https://fb.me/react-spread-deprecation for more details.') : void 0;
                warned = true;
                return _assign.apply(null, arguments);
            };
        }

        var React = {



            Children: {
                map: ReactChildren.map,
                forEach: ReactChildren.forEach,
                count: ReactChildren.count,
                toArray: ReactChildren.toArray,
                only: onlyChild
            },


            Component: ReactComponent,
            PureComponent: ReactPureComponent,

            createElement: createElement,
            cloneElement: cloneElement,
            isValidElement: ReactElement.isValidElement,



            PropTypes: ReactPropTypes,
            createClass: ReactClass.createClass,
            createFactory: createFactory,
            createMixin: function createMixin(mixin) {

                return mixin;
            },



            DOM: ReactDOMFactories,

            version: ReactVersion,


            __spread: __spread
        };


        module.exports = React;

        /***/
    },
    /* 208 */
    /***/
    function(module, exports) {

        'use strict';
        var _extends = Object.assign || function(target) {
            for (var i = 1; i < arguments.length; i++) {
                var source = arguments[i];
                for (var key in source) {
                    if (Object.prototype.hasOwnProperty.call(source, key)) {
                        target[key] = source[key];
                    }
                }
            }
            return target;
        };

        var hasOwnProperty = Object.prototype.hasOwnProperty;
        var propIsEnumerable = Object.prototype.propertyIsEnumerable;

        function toObject(val) {
            if (val === null || val === undefined) {
                throw new TypeError('Object.assign cannot be called with null or undefined');
            }

            return Object(val);
        }

        function shouldUseNative() {
            try {
                if (!Object.assign) {
                    return false;
                }



                var test1 = new String('abc');
                test1[5] = 'de';
                if (Object.getOwnPropertyNames(test1)[0] === '5') {
                    return false;
                }


                var test2 = {};
                for (var i = 0; i < 10; i++) {
                    test2['_' + String.fromCharCode(i)] = i;
                }
                var order2 = Object.getOwnPropertyNames(test2).map(function(n) {
                    return test2[n];
                });
                if (order2.join('') !== '0123456789') {
                    return false;
                }


                var test3 = {};
                'abcdefghijklmnopqrst'.split('').forEach(function(letter) {
                    test3[letter] = letter;
                });
                if (Object.keys(_extends({}, test3)).join('') !==
                    'abcdefghijklmnopqrst') {
                    return false;
                }

                return true;
            } catch (e) {

                return false;
            }
        }

        module.exports = shouldUseNative() ? Object.assign : function(target, source) {
            var from;
            var to = toObject(target);
            var symbols;

            for (var s = 1; s < arguments.length; s++) {
                from = Object(arguments[s]);

                for (var key in from) {
                    if (hasOwnProperty.call(from, key)) {
                        to[key] = from[key];
                    }
                }

                if (Object.getOwnPropertySymbols) {
                    symbols = Object.getOwnPropertySymbols(from);
                    for (var i = 0; i < symbols.length; i++) {
                        if (propIsEnumerable.call(from, symbols[i])) {
                            to[symbols[i]] = from[symbols[i]];
                        }
                    }
                }
            }

            return to;
        };

        /***/
    },
    /* 209 */
    /***/
    function(module, exports, __webpack_require__) {



        'use strict';

        var PooledClass = __webpack_require__(70);
        var ReactElement = __webpack_require__(210);

        var emptyFunction = __webpack_require__(21);
        var traverseAllChildren = __webpack_require__(212);

        var twoArgumentPooler = PooledClass.twoArgumentPooler;
        var fourArgumentPooler = PooledClass.fourArgumentPooler;

        var userProvidedKeyEscapeRegex = /\/+/g;

        function escapeUserProvidedKey(text) {
            return ('' + text).replace(userProvidedKeyEscapeRegex, '$&/');
        }



        function ForEachBookKeeping(forEachFunction, forEachContext) {
            this.func = forEachFunction;
            this.context = forEachContext;
            this.count = 0;
        }
        ForEachBookKeeping.prototype.destructor = function() {
            this.func = null;
            this.context = null;
            this.count = 0;
        };
        PooledClass.addPoolingTo(ForEachBookKeeping, twoArgumentPooler);

        function forEachSingleChild(bookKeeping, child, name) {
            var func = bookKeeping.func;
            var context = bookKeeping.context;

            func.call(context, child, bookKeeping.count++);
        }



        function forEachChildren(children, forEachFunc, forEachContext) {
            if (children == null) {
                return children;
            }
            var traverseContext = ForEachBookKeeping.getPooled(forEachFunc, forEachContext);
            traverseAllChildren(children, forEachSingleChild, traverseContext);
            ForEachBookKeeping.release(traverseContext);
        }



        function MapBookKeeping(mapResult, keyPrefix, mapFunction, mapContext) {
            this.result = mapResult;
            this.keyPrefix = keyPrefix;
            this.func = mapFunction;
            this.context = mapContext;
            this.count = 0;
        }
        MapBookKeeping.prototype.destructor = function() {
            this.result = null;
            this.keyPrefix = null;
            this.func = null;
            this.context = null;
            this.count = 0;
        };
        PooledClass.addPoolingTo(MapBookKeeping, fourArgumentPooler);

        function mapSingleChildIntoContext(bookKeeping, child, childKey) {
            var result = bookKeeping.result;
            var keyPrefix = bookKeeping.keyPrefix;
            var func = bookKeeping.func;
            var context = bookKeeping.context;


            var mappedChild = func.call(context, child, bookKeeping.count++);
            if (Array.isArray(mappedChild)) {
                mapIntoWithKeyPrefixInternal(mappedChild, result, childKey, emptyFunction.thatReturnsArgument);
            } else if (mappedChild != null) {
                if (ReactElement.isValidElement(mappedChild)) {
                    mappedChild = ReactElement.cloneAndReplaceKey(mappedChild,


                        keyPrefix + (mappedChild.key && (!child || child.key !== mappedChild.key) ? escapeUserProvidedKey(mappedChild.key) + '/' : '') + childKey);
                }
                result.push(mappedChild);
            }
        }

        function mapIntoWithKeyPrefixInternal(children, array, prefix, func, context) {
            var escapedPrefix = '';
            if (prefix != null) {
                escapedPrefix = escapeUserProvidedKey(prefix) + '/';
            }
            var traverseContext = MapBookKeeping.getPooled(array, escapedPrefix, func, context);
            traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);
            MapBookKeeping.release(traverseContext);
        }



        function mapChildren(children, func, context) {
            if (children == null) {
                return children;
            }
            var result = [];
            mapIntoWithKeyPrefixInternal(children, result, null, func, context);
            return result;
        }

        function forEachSingleChildDummy(traverseContext, child, name) {
            return null;
        }



        function countChildren(children, context) {
            return traverseAllChildren(children, forEachSingleChildDummy, null);
        }



        function toArray(children) {
            var result = [];
            mapIntoWithKeyPrefixInternal(children, result, null, emptyFunction.thatReturnsArgument);
            return result;
        }

        var ReactChildren = {
            forEach: forEachChildren,
            map: mapChildren,
            mapIntoWithKeyPrefixInternal: mapIntoWithKeyPrefixInternal,
            count: countChildren,
            toArray: toArray
        };


        module.exports = ReactChildren;

        /***/
    },
    /* 210 */
    /***/
    function(module, exports, __webpack_require__) {



        'use strict';

        var _assign = __webpack_require__(208);

        var ReactCurrentOwner = __webpack_require__(189);

        var warning = __webpack_require__(20);
        var canDefineProperty = __webpack_require__(211);
        var hasOwnProperty = Object.prototype.hasOwnProperty;



        var REACT_ELEMENT_TYPE = typeof Symbol === 'function' && Symbol['for'] && Symbol['for']('react.element') || 0xeac7;

        var RESERVED_PROPS = {
            key: true,
            ref: true,
            __self: true,
            __source: true
        };


        var specialPropKeyWarningShown, specialPropRefWarningShown;

        function hasValidRef(config) {
            if (false) {
                if (hasOwnProperty.call(config, 'ref')) {
                    var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;
                    if (getter && getter.isReactWarning) {
                        return false;
                    }
                }
            }
            return config.ref !== undefined;
        }

        function hasValidKey(config) {
            if (false) {
                if (hasOwnProperty.call(config, 'key')) {
                    var getter = Object.getOwnPropertyDescriptor(config, 'key').get;
                    if (getter && getter.isReactWarning) {
                        return false;
                    }
                }
            }
            return config.key !== undefined;
        }



        var ReactElement = function ReactElement(type, key, ref, self, source, owner, props) {
            var element = {

                $$typeof: REACT_ELEMENT_TYPE,


                type: type,
                key: key,
                ref: ref,
                props: props,


                _owner: owner
            };


            if (false) {



                element._store = {};
                var shadowChildren = Array.isArray(props.children) ? props.children.slice(0) : props.children;



                if (canDefineProperty) {
                    Object.defineProperty(element._store, 'validated', {
                        configurable: false,
                        enumerable: false,
                        writable: true,
                        value: false
                    });


                    Object.defineProperty(element, '_self', {
                        configurable: false,
                        enumerable: false,
                        writable: false,
                        value: self
                    });

                    Object.defineProperty(element, '_shadowChildren', {
                        configurable: false,
                        enumerable: false,
                        writable: false,
                        value: shadowChildren
                    });



                    Object.defineProperty(element, '_source', {
                        configurable: false,
                        enumerable: false,
                        writable: false,
                        value: source
                    });

                } else {
                    element._store.validated = false;
                    element._self = self;
                    element._shadowChildren = shadowChildren;
                    element._source = source;
                }
                if (Object.freeze) {
                    Object.freeze(element.props);
                    Object.freeze(element);
                }
            }

            return element;
        };



        ReactElement.createElement = function(type, config, children) {
            var propName;


            var props = {};

            var key = null;
            var ref = null;
            var self = null;
            var source = null;

            if (config != null) {
                if (false) {
                    process.env.NODE_ENV !== 'production' ? warning(

                        config.__proto__ == null || config.__proto__ === Object.prototype,

                        'React.createElement(...): Expected props argument to be a plain object. ' + 'Properties defined in its prototype chain will be ignored.') : void 0;
                }

                if (hasValidRef(config)) {
                    ref = config.ref;
                }
                if (hasValidKey(config)) {
                    key = '' + config.key;
                }

                self = config.__self === undefined ? null : config.__self;
                source = config.__source === undefined ? null : config.__source;

                for (propName in config) {
                    if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                        props[propName] = config[propName];
                    }
                }
            }



            var childrenLength = arguments.length - 2;
            if (childrenLength === 1) {
                props.children = children;
            } else if (childrenLength > 1) {
                var childArray = Array(childrenLength);
                for (var i = 0; i < childrenLength; i++) {
                    childArray[i] = arguments[i + 2];
                }
                props.children = childArray;
            }


            if (type && type.defaultProps) {
                var defaultProps = type.defaultProps;
                for (propName in defaultProps) {
                    if (props[propName] === undefined) {
                        props[propName] = defaultProps[propName];
                    }
                }
            }
            if (false) {
                var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;


                var warnAboutAccessingKey = function warnAboutAccessingKey() {
                    if (!specialPropKeyWarningShown) {
                        specialPropKeyWarningShown = true;
                        process.env.NODE_ENV !== 'production' ? warning(false, '%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName) : void 0;
                    }
                    return undefined;
                };
                warnAboutAccessingKey.isReactWarning = true;

                var warnAboutAccessingRef = function warnAboutAccessingRef() {
                    if (!specialPropRefWarningShown) {
                        specialPropRefWarningShown = true;
                        process.env.NODE_ENV !== 'production' ? warning(false, '%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName) : void 0;
                    }
                    return undefined;
                };
                warnAboutAccessingRef.isReactWarning = true;

                if (typeof props.$$typeof === 'undefined' || props.$$typeof !== REACT_ELEMENT_TYPE) {
                    if (!props.hasOwnProperty('key')) {
                        Object.defineProperty(props, 'key', {
                            get: warnAboutAccessingKey,
                            configurable: true
                        });

                    }
                    if (!props.hasOwnProperty('ref')) {
                        Object.defineProperty(props, 'ref', {
                            get: warnAboutAccessingRef,
                            configurable: true
                        });

                    }
                }
            }
            return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
        };



        ReactElement.createFactory = function(type) {
            var factory = ReactElement.createElement.bind(null, type);



            factory.type = type;
            return factory;
        };

        ReactElement.cloneAndReplaceKey = function(oldElement, newKey) {
            var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);

            return newElement;
        };



        ReactElement.cloneElement = function(element, config, children) {
            var propName;


            var props = _assign({}, element.props);


            var key = element.key;
            var ref = element.ref;

            var self = element._self;



            var source = element._source;


            var owner = element._owner;

            if (config != null) {
                if (false) {
                    process.env.NODE_ENV !== 'production' ? warning(

                        config.__proto__ == null || config.__proto__ === Object.prototype,

                        'React.cloneElement(...): Expected props argument to be a plain object. ' + 'Properties defined in its prototype chain will be ignored.') : void 0;
                }

                if (hasValidRef(config)) {

                    ref = config.ref;
                    owner = ReactCurrentOwner.current;
                }
                if (hasValidKey(config)) {
                    key = '' + config.key;
                }


                var defaultProps;
                if (element.type && element.type.defaultProps) {
                    defaultProps = element.type.defaultProps;
                }
                for (propName in config) {
                    if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                        if (config[propName] === undefined && defaultProps !== undefined) {

                            props[propName] = defaultProps[propName];
                        } else {
                            props[propName] = config[propName];
                        }
                    }
                }
            }



            var childrenLength = arguments.length - 2;
            if (childrenLength === 1) {
                props.children = children;
            } else if (childrenLength > 1) {
                var childArray = Array(childrenLength);
                for (var i = 0; i < childrenLength; i++) {
                    childArray[i] = arguments[i + 2];
                }
                props.children = childArray;
            }

            return ReactElement(element.type, key, ref, self, source, owner, props);
        };



        ReactElement.isValidElement = function(object) {
            return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
        };

        ReactElement.REACT_ELEMENT_TYPE = REACT_ELEMENT_TYPE;

        module.exports = ReactElement;

        /***/
    },
    /* 211 */
    /***/
    function(module, exports, __webpack_require__) {



        'use strict';

        var canDefineProperty = false;
        if (false) {
            try {
                Object.defineProperty({}, 'x', {
                    get: function get() {}
                });
                canDefineProperty = true;
            } catch (x) {

            }
        }

        module.exports = canDefineProperty;

        /***/
    },
    /* 212 */
    /***/
    function(module, exports, __webpack_require__) {



        'use strict';

        var _prodInvariant = __webpack_require__(71);

        var ReactCurrentOwner = __webpack_require__(189);
        var ReactElement = __webpack_require__(210);

        var getIteratorFn = __webpack_require__(213);
        var invariant = __webpack_require__(19);
        var KeyEscapeUtils = __webpack_require__(214);
        var warning = __webpack_require__(20);

        var SEPARATOR = '.';
        var SUBSEPARATOR = ':';



        var didWarnAboutMaps = false;



        function getComponentKey(component, index) {


            if (component && typeof component === 'object' && component.key != null) {

                return KeyEscapeUtils.escape(component.key);
            }

            return index.toString(36);
        }



        function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
            var type = typeof children;

            if (type === 'undefined' || type === 'boolean') {

                children = null;
            }

            if (children === null || type === 'string' || type === 'number' || ReactElement.isValidElement(children)) {
                callback(traverseContext, children,


                    nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);
                return 1;
            }

            var child;
            var nextName;
            var subtreeCount = 0;
            var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;

            if (Array.isArray(children)) {
                for (var i = 0; i < children.length; i++) {
                    child = children[i];
                    nextName = nextNamePrefix + getComponentKey(child, i);
                    subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
                }
            } else {
                var iteratorFn = getIteratorFn(children);
                if (iteratorFn) {
                    var iterator = iteratorFn.call(children);
                    var step;
                    if (iteratorFn !== children.entries) {
                        var ii = 0;
                        while (!(step = iterator.next()).done) {
                            child = step.value;
                            nextName = nextNamePrefix + getComponentKey(child, ii++);
                            subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
                        }
                    } else {
                        if (false) {
                            var mapsAsChildrenAddendum = '';
                            if (ReactCurrentOwner.current) {
                                var mapsAsChildrenOwnerName = ReactCurrentOwner.current.getName();
                                if (mapsAsChildrenOwnerName) {
                                    mapsAsChildrenAddendum = ' Check the render method of `' + mapsAsChildrenOwnerName + '`.';
                                }
                            }
                            process.env.NODE_ENV !== 'production' ? warning(didWarnAboutMaps, 'Using Maps as children is not yet fully supported. It is an ' + 'experimental feature that might be removed. Convert it to a ' + 'sequence / iterable of keyed ReactElements instead.%s', mapsAsChildrenAddendum) : void 0;
                            didWarnAboutMaps = true;
                        }

                        while (!(step = iterator.next()).done) {
                            var entry = step.value;
                            if (entry) {
                                child = entry[1];
                                nextName = nextNamePrefix + KeyEscapeUtils.escape(entry[0]) + SUBSEPARATOR + getComponentKey(child, 0);
                                subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
                            }
                        }
                    }
                } else if (type === 'object') {
                    var addendum = '';
                    if (false) {
                        addendum = ' If you meant to render a collection of children, use an array ' + 'instead or wrap the object using createFragment(object) from the ' + 'React add-ons.';
                        if (children._isReactElement) {
                            addendum = ' It looks like you\'re using an element created by a different ' + 'version of React. Make sure to use only one copy of React.';
                        }
                        if (ReactCurrentOwner.current) {
                            var name = ReactCurrentOwner.current.getName();
                            if (name) {
                                addendum += ' Check the render method of `' + name + '`.';
                            }
                        }
                    }
                    var childrenString = String(children);
                    true ? false ? invariant(false, 'Objects are not valid as a React child (found: %s).%s', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : _prodInvariant('31', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : void 0;
                }
            }

            return subtreeCount;
        }



        function traverseAllChildren(children, callback, traverseContext) {
            if (children == null) {
                return 0;
            }

            return traverseAllChildrenImpl(children, '', callback, traverseContext);
        }

        module.exports = traverseAllChildren;

        /***/
    },
    /* 213 */
    /***/
    function(module, exports) {



        'use strict';



        var ITERATOR_SYMBOL = typeof Symbol === 'function' && (typeof Symbol === 'function' ? Symbol.iterator : '@@iterator');
        var FAUX_ITERATOR_SYMBOL = '@@iterator';



        function getIteratorFn(maybeIterable) {
            var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
            if (typeof iteratorFn === 'function') {
                return iteratorFn;
            }
        }

        module.exports = getIteratorFn;

        /***/
    },
    /* 214 */
    /***/
    function(module, exports) {



        'use strict';



        function escape(key) {
            var escapeRegex = /[=:]/g;
            var escaperLookup = {
                '=': '=0',
                ':': '=2'
            };

            var escapedString = ('' + key).replace(escapeRegex, function(match) {
                return escaperLookup[match];
            });

            return '$' + escapedString;
        }



        function unescape(key) {
            var unescapeRegex = /(=0|=2)/g;
            var unescaperLookup = {
                '=0': '=',
                '=2': ':'
            };

            var keySubstring = key[0] === '.' && key[1] === '$' ? key.substring(2) : key.substring(1);

            return ('' + keySubstring).replace(unescapeRegex, function(match) {
                return unescaperLookup[match];
            });
        }

        var KeyEscapeUtils = {
            escape: escape,
            unescape: unescape
        };


        module.exports = KeyEscapeUtils;

        /***/
    },
    /* 215 */
    /***/
    function(module, exports, __webpack_require__) {



        'use strict';

        var _prodInvariant = __webpack_require__(71);

        var ReactNoopUpdateQueue = __webpack_require__(216);

        var canDefineProperty = __webpack_require__(211);
        var emptyObject = __webpack_require__(217);
        var invariant = __webpack_require__(19);
        var warning = __webpack_require__(20);



        function ReactComponent(props, context, updater) {
            this.props = props;
            this.context = context;
            this.refs = emptyObject;


            this.updater = updater || ReactNoopUpdateQueue;
        }

        ReactComponent.prototype.isReactComponent = {};



        ReactComponent.prototype.setState = function(partialState, callback) {
            !(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null) ? false ? invariant(false, 'setState(...): takes an object of state variables to update or a function which returns an object of state variables.') : _prodInvariant('85'): void 0;
            this.updater.enqueueSetState(this, partialState);
            if (callback) {
                this.updater.enqueueCallback(this, callback, 'setState');
            }
        };



        ReactComponent.prototype.forceUpdate = function(callback) {
            this.updater.enqueueForceUpdate(this);
            if (callback) {
                this.updater.enqueueCallback(this, callback, 'forceUpdate');
            }
        };



        if (false) {
            var deprecatedAPIs = {
                isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],
                replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).']
            };

            var defineDeprecationWarning = function defineDeprecationWarning(methodName, info) {
                if (canDefineProperty) {
                    Object.defineProperty(ReactComponent.prototype, methodName, {
                        get: function get() {
                            process.env.NODE_ENV !== 'production' ? warning(false, '%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]) : void 0;
                            return undefined;
                        }
                    });

                }
            };
            for (var fnName in deprecatedAPIs) {
                if (deprecatedAPIs.hasOwnProperty(fnName)) {
                    defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
                }
            }
        }

        module.exports = ReactComponent;

        /***/
    },
    /* 216 */
    /***/
    function(module, exports, __webpack_require__) {



        'use strict';

        var warning = __webpack_require__(20);

        function warnNoop(publicInstance, callerName) {
            if (false) {
                var constructor = publicInstance.constructor;
                process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, constructor && (constructor.displayName || constructor.name) || 'ReactClass') : void 0;
            }
        }



        var ReactNoopUpdateQueue = {



            isMounted: function isMounted(publicInstance) {
                return false;
            },



            enqueueCallback: function enqueueCallback(publicInstance, callback) {},



            enqueueForceUpdate: function enqueueForceUpdate(publicInstance) {
                warnNoop(publicInstance, 'forceUpdate');
            },



            enqueueReplaceState: function enqueueReplaceState(publicInstance, completeState) {
                warnNoop(publicInstance, 'replaceState');
            },



            enqueueSetState: function enqueueSetState(publicInstance, partialState) {
                warnNoop(publicInstance, 'setState');
            }
        };


        module.exports = ReactNoopUpdateQueue;

        /***/
    },
    /* 217 */
    /***/
    function(module, exports, __webpack_require__) {



        'use strict';

        var emptyObject = {};

        if (false) {
            Object.freeze(emptyObject);
        }

        module.exports = emptyObject;

        /***/
    },
    /* 218 */
    /***/
    function(module, exports, __webpack_require__) {



        'use strict';

        var _assign = __webpack_require__(208);

        var ReactComponent = __webpack_require__(215);
        var ReactNoopUpdateQueue = __webpack_require__(216);

        var emptyObject = __webpack_require__(217);



        function ReactPureComponent(props, context, updater) {

            this.props = props;
            this.context = context;
            this.refs = emptyObject;


            this.updater = updater || ReactNoopUpdateQueue;
        }

        function ComponentDummy() {}
        ComponentDummy.prototype = ReactComponent.prototype;
        ReactPureComponent.prototype = new ComponentDummy();
        ReactPureComponent.prototype.constructor = ReactPureComponent;

        _assign(ReactPureComponent.prototype, ReactComponent.prototype);
        ReactPureComponent.prototype.isPureReactComponent = true;

        module.exports = ReactPureComponent;

        /***/
    },
    /* 219 */
    /***/
    function(module, exports, __webpack_require__) {



        'use strict';

        var _prodInvariant = __webpack_require__(71),
            _assign = __webpack_require__(208);

        var ReactComponent = __webpack_require__(215);
        var ReactElement = __webpack_require__(210);
        var ReactPropTypeLocations = __webpack_require__(220);
        var ReactPropTypeLocationNames = __webpack_require__(222);
        var ReactNoopUpdateQueue = __webpack_require__(216);

        var emptyObject = __webpack_require__(217);
        var invariant = __webpack_require__(19);
        var keyMirror = __webpack_require__(221);
        var keyOf = __webpack_require__(223);
        var warning = __webpack_require__(20);

        var MIXINS_KEY = keyOf({
            mixins: null
        });



        var SpecPolicy = keyMirror({



            DEFINE_ONCE: null,



            DEFINE_MANY: null,



            OVERRIDE_BASE: null,



            DEFINE_MANY_MERGED: null
        });


        var injectedMixins = [];



        var ReactClassInterface = {



            mixins: SpecPolicy.DEFINE_MANY,



            statics: SpecPolicy.DEFINE_MANY,



            propTypes: SpecPolicy.DEFINE_MANY,



            contextTypes: SpecPolicy.DEFINE_MANY,



            childContextTypes: SpecPolicy.DEFINE_MANY,



            getDefaultProps: SpecPolicy.DEFINE_MANY_MERGED,



            getInitialState: SpecPolicy.DEFINE_MANY_MERGED,



            getChildContext: SpecPolicy.DEFINE_MANY_MERGED,



            render: SpecPolicy.DEFINE_ONCE,



            componentWillMount: SpecPolicy.DEFINE_MANY,



            componentDidMount: SpecPolicy.DEFINE_MANY,



            componentWillReceiveProps: SpecPolicy.DEFINE_MANY,



            shouldComponentUpdate: SpecPolicy.DEFINE_ONCE,



            componentWillUpdate: SpecPolicy.DEFINE_MANY,



            componentDidUpdate: SpecPolicy.DEFINE_MANY,



            componentWillUnmount: SpecPolicy.DEFINE_MANY,



            updateComponent: SpecPolicy.OVERRIDE_BASE
        };



        var RESERVED_SPEC_KEYS = {
            displayName: function displayName(Constructor, _displayName) {
                Constructor.displayName = _displayName;
            },
            mixins: function mixins(Constructor, _mixins) {
                if (_mixins) {
                    for (var i = 0; i < _mixins.length; i++) {
                        mixSpecIntoComponent(Constructor, _mixins[i]);
                    }
                }
            },
            childContextTypes: function childContextTypes(Constructor, _childContextTypes) {
                if (false) {
                    validateTypeDef(Constructor, _childContextTypes, ReactPropTypeLocations.childContext);
                }
                Constructor.childContextTypes = _assign({}, Constructor.childContextTypes, _childContextTypes);
            },
            contextTypes: function contextTypes(Constructor, _contextTypes) {
                if (false) {
                    validateTypeDef(Constructor, _contextTypes, ReactPropTypeLocations.context);
                }
                Constructor.contextTypes = _assign({}, Constructor.contextTypes, _contextTypes);
            },



            getDefaultProps: function getDefaultProps(Constructor, _getDefaultProps) {
                if (Constructor.getDefaultProps) {
                    Constructor.getDefaultProps = createMergedResultFunction(Constructor.getDefaultProps, _getDefaultProps);
                } else {
                    Constructor.getDefaultProps = _getDefaultProps;
                }
            },
            propTypes: function propTypes(Constructor, _propTypes) {
                if (false) {
                    validateTypeDef(Constructor, _propTypes, ReactPropTypeLocations.prop);
                }
                Constructor.propTypes = _assign({}, Constructor.propTypes, _propTypes);
            },
            statics: function statics(Constructor, _statics) {
                mixStaticSpecIntoComponent(Constructor, _statics);
            },
            autobind: function autobind() {}
        };


        function validateTypeDef(Constructor, typeDef, location) {
            for (var propName in typeDef) {
                if (typeDef.hasOwnProperty(propName)) {


                    false ? warning(typeof typeDef[propName] === 'function', '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'React.PropTypes.', Constructor.displayName || 'ReactClass', ReactPropTypeLocationNames[location], propName) : void 0;
                }
            }
        }

        function validateMethodOverride(isAlreadyDefined, name) {
            var specPolicy = ReactClassInterface.hasOwnProperty(name) ? ReactClassInterface[name] : null;


            if (ReactClassMixin.hasOwnProperty(name)) {
                !(specPolicy === SpecPolicy.OVERRIDE_BASE) ? false ? invariant(false, 'ReactClassInterface: You are attempting to override `%s` from your class specification. Ensure that your method names do not overlap with React methods.', name) : _prodInvariant('73', name): void 0;
            }


            if (isAlreadyDefined) {
                !(specPolicy === SpecPolicy.DEFINE_MANY || specPolicy === SpecPolicy.DEFINE_MANY_MERGED) ? false ? invariant(false, 'ReactClassInterface: You are attempting to define `%s` on your component more than once. This conflict may be due to a mixin.', name) : _prodInvariant('74', name): void 0;
            }
        }



        function mixSpecIntoComponent(Constructor, spec) {
            if (!spec) {
                if (false) {
                    var typeofSpec = typeof spec;
                    var isMixinValid = typeofSpec === 'object' && spec !== null;

                    process.env.NODE_ENV !== 'production' ? warning(isMixinValid, '%s: You\'re attempting to include a mixin that is either null ' + 'or not an object. Check the mixins included by the component, ' + 'as well as any mixins they include themselves. ' + 'Expected object but got %s.', Constructor.displayName || 'ReactClass', spec === null ? null : typeofSpec) : void 0;
                }

                return;
            }

            !(typeof spec !== 'function') ? false ? invariant(false, 'ReactClass: You\'re attempting to use a component class or function as a mixin. Instead, just use a regular object.') : _prodInvariant('75'): void 0;
            !!ReactElement.isValidElement(spec) ? false ? invariant(false, 'ReactClass: You\'re attempting to use a component as a mixin. Instead, just use a regular object.') : _prodInvariant('76') : void 0;

            var proto = Constructor.prototype;
            var autoBindPairs = proto.__reactAutoBindPairs;



            if (spec.hasOwnProperty(MIXINS_KEY)) {
                RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);
            }

            for (var name in spec) {
                if (!spec.hasOwnProperty(name)) {
                    continue;
                }

                if (name === MIXINS_KEY) {

                    continue;
                }

                var property = spec[name];
                var isAlreadyDefined = proto.hasOwnProperty(name);
                validateMethodOverride(isAlreadyDefined, name);

                if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {
                    RESERVED_SPEC_KEYS[name](Constructor, property);
                } else {



                    var isReactClassMethod = ReactClassInterface.hasOwnProperty(name);
                    var isFunction = typeof property === 'function';
                    var shouldAutoBind = isFunction && !isReactClassMethod && !isAlreadyDefined && spec.autobind !== false;

                    if (shouldAutoBind) {
                        autoBindPairs.push(name, property);
                        proto[name] = property;
                    } else {
                        if (isAlreadyDefined) {
                            var specPolicy = ReactClassInterface[name];


                            !(isReactClassMethod && (specPolicy === SpecPolicy.DEFINE_MANY_MERGED || specPolicy === SpecPolicy.DEFINE_MANY)) ? false ? invariant(false, 'ReactClass: Unexpected spec policy %s for key %s when mixing in component specs.', specPolicy, name) : _prodInvariant('77', specPolicy, name): void 0;



                            if (specPolicy === SpecPolicy.DEFINE_MANY_MERGED) {
                                proto[name] = createMergedResultFunction(proto[name], property);
                            } else if (specPolicy === SpecPolicy.DEFINE_MANY) {
                                proto[name] = createChainedFunction(proto[name], property);
                            }
                        } else {
                            proto[name] = property;
                            if (false) {


                                if (typeof property === 'function' && spec.displayName) {
                                    proto[name].displayName = spec.displayName + '_' + name;
                                }
                            }
                        }
                    }
                }
            }
        }

        function mixStaticSpecIntoComponent(Constructor, statics) {
            if (!statics) {
                return;
            }
            for (var name in statics) {
                var property = statics[name];
                if (!statics.hasOwnProperty(name)) {
                    continue;
                }

                var isReserved = name in RESERVED_SPEC_KEYS;
                !!isReserved ? false ? invariant(false, 'ReactClass: You are attempting to define a reserved property, `%s`, that shouldn\'t be on the "statics" key. Define it as an instance property instead; it will still be accessible on the constructor.', name) : _prodInvariant('78', name) : void 0;

                var isInherited = name in Constructor;
                !!isInherited ? false ? invariant(false, 'ReactClass: You are attempting to define `%s` on your component more than once. This conflict may be due to a mixin.', name) : _prodInvariant('79', name) : void 0;
                Constructor[name] = property;
            }
        }



        function mergeIntoWithNoDuplicateKeys(one, two) {
            !(one && two && typeof one === 'object' && typeof two === 'object') ? false ? invariant(false, 'mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects.') : _prodInvariant('80'): void 0;

            for (var key in two) {
                if (two.hasOwnProperty(key)) {
                    !(one[key] === undefined) ? false ? invariant(false, 'mergeIntoWithNoDuplicateKeys(): Tried to merge two objects with the same key: `%s`. This conflict may be due to a mixin; in particular, this may be caused by two getInitialState() or getDefaultProps() methods returning objects with clashing keys.', key) : _prodInvariant('81', key): void 0;
                    one[key] = two[key];
                }
            }
            return one;
        }



        function createMergedResultFunction(one, two) {
            return function mergedResult() {
                var a = one.apply(this, arguments);
                var b = two.apply(this, arguments);
                if (a == null) {
                    return b;
                } else if (b == null) {
                    return a;
                }
                var c = {};
                mergeIntoWithNoDuplicateKeys(c, a);
                mergeIntoWithNoDuplicateKeys(c, b);
                return c;
            };
        }



        function createChainedFunction(one, two) {
            return function chainedFunction() {
                one.apply(this, arguments);
                two.apply(this, arguments);
            };
        }



        function bindAutoBindMethod(component, method) {
            var boundMethod = method.bind(component);
            if (false) {
                boundMethod.__reactBoundContext = component;
                boundMethod.__reactBoundMethod = method;
                boundMethod.__reactBoundArguments = null;
                var componentName = component.constructor.displayName;
                var _bind = boundMethod.bind;
                boundMethod.bind = function(newThis) {
                    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                        args[_key - 1] = arguments[_key];
                    }



                    if (newThis !== component && newThis !== null) {
                        process.env.NODE_ENV !== 'production' ? warning(false, 'bind(): React component methods may only be bound to the ' + 'component instance. See %s', componentName) : void 0;
                    } else if (!args.length) {
                        process.env.NODE_ENV !== 'production' ? warning(false, 'bind(): You are binding a component method to the component. ' + 'React does this for you automatically in a high-performance ' + 'way, so you can safely remove this call. See %s', componentName) : void 0;
                        return boundMethod;
                    }
                    var reboundMethod = _bind.apply(boundMethod, arguments);
                    reboundMethod.__reactBoundContext = component;
                    reboundMethod.__reactBoundMethod = method;
                    reboundMethod.__reactBoundArguments = args;
                    return reboundMethod;
                };
            }
            return boundMethod;
        }



        function bindAutoBindMethods(component) {
            var pairs = component.__reactAutoBindPairs;
            for (var i = 0; i < pairs.length; i += 2) {
                var autoBindKey = pairs[i];
                var method = pairs[i + 1];
                component[autoBindKey] = bindAutoBindMethod(component, method);
            }
        }



        var ReactClassMixin = {



            replaceState: function replaceState(newState, callback) {
                this.updater.enqueueReplaceState(this, newState);
                if (callback) {
                    this.updater.enqueueCallback(this, callback, 'replaceState');
                }
            },



            isMounted: function isMounted() {
                return this.updater.isMounted(this);
            }
        };


        var ReactClassComponent = function ReactClassComponent() {};
        _assign(ReactClassComponent.prototype, ReactComponent.prototype, ReactClassMixin);



        var ReactClass = {



            createClass: function createClass(spec) {
                var Constructor = function Constructor(props, context, updater) {



                    if (false) {
                        process.env.NODE_ENV !== 'production' ? warning(this instanceof Constructor, 'Something is calling a React component directly. Use a factory or ' + 'JSX instead. See: https://fb.me/react-legacyfactory') : void 0;
                    }


                    if (this.__reactAutoBindPairs.length) {
                        bindAutoBindMethods(this);
                    }

                    this.props = props;
                    this.context = context;
                    this.refs = emptyObject;
                    this.updater = updater || ReactNoopUpdateQueue;

                    this.state = null;



                    var initialState = this.getInitialState ? this.getInitialState() : null;
                    if (false) {

                        if (initialState === undefined && this.getInitialState._isMockFunction) {


                            initialState = null;
                        }
                    }!(typeof initialState === 'object' && !Array.isArray(initialState)) ? false ? invariant(false, '%s.getInitialState(): must return an object or null', Constructor.displayName || 'ReactCompositeComponent') : _prodInvariant('82', Constructor.displayName || 'ReactCompositeComponent'): void 0;

                    this.state = initialState;
                };
                Constructor.prototype = new ReactClassComponent();
                Constructor.prototype.constructor = Constructor;
                Constructor.prototype.__reactAutoBindPairs = [];

                injectedMixins.forEach(mixSpecIntoComponent.bind(null, Constructor));

                mixSpecIntoComponent(Constructor, spec);


                if (Constructor.getDefaultProps) {
                    Constructor.defaultProps = Constructor.getDefaultProps();
                }

                if (false) {



                    if (Constructor.getDefaultProps) {
                        Constructor.getDefaultProps.isReactClassApproved = {};
                    }
                    if (Constructor.prototype.getInitialState) {
                        Constructor.prototype.getInitialState.isReactClassApproved = {};
                    }
                }

                !Constructor.prototype.render ? false ? invariant(false, 'createClass(...): Class specification must implement a `render` method.') : _prodInvariant('83') : void 0;

                if (false) {
                    process.env.NODE_ENV !== 'production' ? warning(!Constructor.prototype.componentShouldUpdate, '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', spec.displayName || 'A component') : void 0;
                    process.env.NODE_ENV !== 'production' ? warning(!Constructor.prototype.componentWillRecieveProps, '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', spec.displayName || 'A component') : void 0;
                }


                for (var methodName in ReactClassInterface) {
                    if (!Constructor.prototype[methodName]) {
                        Constructor.prototype[methodName] = null;
                    }
                }

                return Constructor;
            },

            injection: {
                injectMixin: function injectMixin(mixin) {
                    injectedMixins.push(mixin);
                }
            }
        };



        module.exports = ReactClass;

        /***/
    },
    /* 220 */
    /***/
    function(module, exports, __webpack_require__) {



        'use strict';

        var keyMirror = __webpack_require__(221);

        var ReactPropTypeLocations = keyMirror({
            prop: null,
            context: null,
            childContext: null
        });


        module.exports = ReactPropTypeLocations;

        /***/
    },
    /* 221 */
    /***/
    function(module, exports, __webpack_require__) {



        'use strict';

        var invariant = __webpack_require__(19);



        var keyMirror = function keyMirror(obj) {
            var ret = {};
            var key;
            !(obj instanceof Object && !Array.isArray(obj)) ? false ? invariant(false, 'keyMirror(...): Argument must be an object.') : invariant(false): void 0;
            for (key in obj) {
                if (!obj.hasOwnProperty(key)) {
                    continue;
                }
                ret[key] = key;
            }
            return ret;
        };

        module.exports = keyMirror;

        /***/
    },
    /* 222 */
    /***/
    function(module, exports, __webpack_require__) {



        'use strict';

        var ReactPropTypeLocationNames = {};

        if (false) {
            ReactPropTypeLocationNames = {
                prop: 'prop',
                context: 'context',
                childContext: 'child context'
            };

        }

        module.exports = ReactPropTypeLocationNames;

        /***/
    },
    /* 223 */
    /***/
    function(module, exports) {

        "use strict";



        var keyOf = function keyOf(oneKeyObj) {
            var key;
            for (key in oneKeyObj) {
                if (!oneKeyObj.hasOwnProperty(key)) {
                    continue;
                }
                return key;
            }
            return null;
        };

        module.exports = keyOf;

        /***/
    },
    /* 224 */
    /***/
    function(module, exports, __webpack_require__) {



        'use strict';

        var ReactElement = __webpack_require__(210);

        var mapObject = __webpack_require__(225);



        function createDOMFactory(tag) {
            if (false) {
                var ReactElementValidator = require('./ReactElementValidator');
                return ReactElementValidator.createFactory(tag);
            }
            return ReactElement.createFactory(tag);
        }



        var ReactDOMFactories = mapObject({
                a: 'a',
                abbr: 'abbr',
                address: 'address',
                area: 'area',
                article: 'article',
                aside: 'aside',
                audio: 'audio',
                b: 'b',
                base: 'base',
                bdi: 'bdi',
                bdo: 'bdo',
                big: 'big',
                blockquote: 'blockquote',
                body: 'body',
                br: 'br',
                button: 'button',
                canvas: 'canvas',
                caption: 'caption',
                cite: 'cite',
                code: 'code',
                col: 'col',
                colgroup: 'colgroup',
                data: 'data',
                datalist: 'datalist',
                dd: 'dd',
                del: 'del',
                details: 'details',
                dfn: 'dfn',
                dialog: 'dialog',
                div: 'div',
                dl: 'dl',
                dt: 'dt',
                em: 'em',
                embed: 'embed',
                fieldset: 'fieldset',
                figcaption: 'figcaption',
                figure: 'figure',
                footer: 'footer',
                form: 'form',
                h1: 'h1',
                h2: 'h2',
                h3: 'h3',
                h4: 'h4',
                h5: 'h5',
                h6: 'h6',
                head: 'head',
                header: 'header',
                hgroup: 'hgroup',
                hr: 'hr',
                html: 'html',
                i: 'i',
                iframe: 'iframe',
                img: 'img',
                input: 'input',
                ins: 'ins',
                kbd: 'kbd',
                keygen: 'keygen',
                label: 'label',
                legend: 'legend',
                li: 'li',
                link: 'link',
                main: 'main',
                map: 'map',
                mark: 'mark',
                menu: 'menu',
                menuitem: 'menuitem',
                meta: 'meta',
                meter: 'meter',
                nav: 'nav',
                noscript: 'noscript',
                object: 'object',
                ol: 'ol',
                optgroup: 'optgroup',
                option: 'option',
                output: 'output',
                p: 'p',
                param: 'param',
                picture: 'picture',
                pre: 'pre',
                progress: 'progress',
                q: 'q',
                rp: 'rp',
                rt: 'rt',
                ruby: 'ruby',
                s: 's',
                samp: 'samp',
                script: 'script',
                section: 'section',
                select: 'select',
                small: 'small',
                source: 'source',
                span: 'span',
                strong: 'strong',
                style: 'style',
                sub: 'sub',
                summary: 'summary',
                sup: 'sup',
                table: 'table',
                tbody: 'tbody',
                td: 'td',
                textarea: 'textarea',
                tfoot: 'tfoot',
                th: 'th',
                thead: 'thead',
                time: 'time',
                title: 'title',
                tr: 'tr',
                track: 'track',
                u: 'u',
                ul: 'ul',
                'var': 'var',
                video: 'video',
                wbr: 'wbr',


                circle: 'circle',
                clipPath: 'clipPath',
                defs: 'defs',
                ellipse: 'ellipse',
                g: 'g',
                image: 'image',
                line: 'line',
                linearGradient: 'linearGradient',
                mask: 'mask',
                path: 'path',
                pattern: 'pattern',
                polygon: 'polygon',
                polyline: 'polyline',
                radialGradient: 'radialGradient',
                rect: 'rect',
                stop: 'stop',
                svg: 'svg',
                text: 'text',
                tspan: 'tspan'
            },

            createDOMFactory);

        module.exports = ReactDOMFactories;

        /***/
    },
    /* 225 */
    /***/
    function(module, exports) {



        'use strict';

        var hasOwnProperty = Object.prototype.hasOwnProperty;



        function mapObject(object, callback, context) {
            if (!object) {
                return null;
            }
            var result = {};
            for (var name in object) {
                if (hasOwnProperty.call(object, name)) {
                    result[name] = callback.call(context, object[name], name, object);
                }
            }
            return result;
        }

        module.exports = mapObject;

        /***/
    },
    /* 226 */
    /***/
    function(module, exports, __webpack_require__) {



        'use strict';

        var ReactElement = __webpack_require__(210);
        var ReactPropTypeLocationNames = __webpack_require__(222);
        var ReactPropTypesSecret = __webpack_require__(227);

        var emptyFunction = __webpack_require__(21);
        var getIteratorFn = __webpack_require__(213);
        var warning = __webpack_require__(20);



        var ANONYMOUS = '<<anonymous>>';

        var ReactPropTypes = {
            array: createPrimitiveTypeChecker('array'),
            bool: createPrimitiveTypeChecker('boolean'),
            func: createPrimitiveTypeChecker('function'),
            number: createPrimitiveTypeChecker('number'),
            object: createPrimitiveTypeChecker('object'),
            string: createPrimitiveTypeChecker('string'),
            symbol: createPrimitiveTypeChecker('symbol'),

            any: createAnyTypeChecker(),
            arrayOf: createArrayOfTypeChecker,
            element: createElementTypeChecker(),
            instanceOf: createInstanceTypeChecker,
            node: createNodeChecker(),
            objectOf: createObjectOfTypeChecker,
            oneOf: createEnumTypeChecker,
            oneOfType: createUnionTypeChecker,
            shape: createShapeTypeChecker
        };



        function is(x, y) {

            if (x === y) {


                return x !== 0 || 1 / x === 1 / y;
            } else {

                return x !== x && y !== y;
            }
        }


        function createChainableTypeChecker(validate) {
            if (false) {
                var manualPropTypeCallCache = {};
            }

            function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
                componentName = componentName || ANONYMOUS;
                propFullName = propFullName || propName;
                if (false) {
                    if (secret !== ReactPropTypesSecret && typeof console !== 'undefined') {
                        var cacheKey = componentName + ':' + propName;
                        if (!manualPropTypeCallCache[cacheKey]) {
                            process.env.NODE_ENV !== 'production' ? warning(false, 'You are manually calling a React.PropTypes validation ' + 'function for the `%s` prop on `%s`. This is deprecated ' + 'and will not work in the next major version. You may be ' + 'seeing this warning due to a third-party PropTypes library. ' + 'See https://fb.me/react-warning-dont-call-proptypes for details.', propFullName, componentName) : void 0;
                            manualPropTypeCallCache[cacheKey] = true;
                        }
                    }
                }
                if (props[propName] == null) {
                    var locationName = ReactPropTypeLocationNames[location];
                    if (isRequired) {
                        return new Error('Required ' + locationName + ' `' + propFullName + '` was not specified in ' + ('`' + componentName + '`.'));
                    }
                    return null;
                } else {
                    return validate(props, propName, componentName, location, propFullName);
                }
            }

            var chainedCheckType = checkType.bind(null, false);
            chainedCheckType.isRequired = checkType.bind(null, true);

            return chainedCheckType;
        }

        function createPrimitiveTypeChecker(expectedType) {
            function validate(props, propName, componentName, location, propFullName, secret) {
                var propValue = props[propName];
                var propType = getPropType(propValue);
                if (propType !== expectedType) {
                    var locationName = ReactPropTypeLocationNames[location];



                    var preciseType = getPreciseType(propValue);

                    return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));
                }
                return null;
            }
            return createChainableTypeChecker(validate);
        }

        function createAnyTypeChecker() {
            return createChainableTypeChecker(emptyFunction.thatReturns(null));
        }

        function createArrayOfTypeChecker(typeChecker) {
            function validate(props, propName, componentName, location, propFullName) {
                if (typeof typeChecker !== 'function') {
                    return new Error('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
                }
                var propValue = props[propName];
                if (!Array.isArray(propValue)) {
                    var locationName = ReactPropTypeLocationNames[location];
                    var propType = getPropType(propValue);
                    return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
                }
                for (var i = 0; i < propValue.length; i++) {
                    var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret);
                    if (error instanceof Error) {
                        return error;
                    }
                }
                return null;
            }
            return createChainableTypeChecker(validate);
        }

        function createElementTypeChecker() {
            function validate(props, propName, componentName, location, propFullName) {
                var propValue = props[propName];
                if (!ReactElement.isValidElement(propValue)) {
                    var locationName = ReactPropTypeLocationNames[location];
                    var propType = getPropType(propValue);
                    return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));
                }
                return null;
            }
            return createChainableTypeChecker(validate);
        }

        function createInstanceTypeChecker(expectedClass) {
            function validate(props, propName, componentName, location, propFullName) {
                if (!(props[propName] instanceof expectedClass)) {
                    var locationName = ReactPropTypeLocationNames[location];
                    var expectedClassName = expectedClass.name || ANONYMOUS;
                    var actualClassName = getClassName(props[propName]);
                    return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
                }
                return null;
            }
            return createChainableTypeChecker(validate);
        }

        function createEnumTypeChecker(expectedValues) {
            if (!Array.isArray(expectedValues)) {
                false ? warning(false, 'Invalid argument supplied to oneOf, expected an instance of array.') : void 0;
                return emptyFunction.thatReturnsNull;
            }

            function validate(props, propName, componentName, location, propFullName) {
                var propValue = props[propName];
                for (var i = 0; i < expectedValues.length; i++) {
                    if (is(propValue, expectedValues[i])) {
                        return null;
                    }
                }

                var locationName = ReactPropTypeLocationNames[location];
                var valuesString = JSON.stringify(expectedValues);
                return new Error('Invalid ' + locationName + ' `' + propFullName + '` of value `' + propValue + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
            }
            return createChainableTypeChecker(validate);
        }

        function createObjectOfTypeChecker(typeChecker) {
            function validate(props, propName, componentName, location, propFullName) {
                if (typeof typeChecker !== 'function') {
                    return new Error('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
                }
                var propValue = props[propName];
                var propType = getPropType(propValue);
                if (propType !== 'object') {
                    var locationName = ReactPropTypeLocationNames[location];
                    return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
                }
                for (var key in propValue) {
                    if (propValue.hasOwnProperty(key)) {
                        var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
                        if (error instanceof Error) {
                            return error;
                        }
                    }
                }
                return null;
            }
            return createChainableTypeChecker(validate);
        }

        function createUnionTypeChecker(arrayOfTypeCheckers) {
            if (!Array.isArray(arrayOfTypeCheckers)) {
                false ? warning(false, 'Invalid argument supplied to oneOfType, expected an instance of array.') : void 0;
                return emptyFunction.thatReturnsNull;
            }

            function validate(props, propName, componentName, location, propFullName) {
                for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
                    var checker = arrayOfTypeCheckers[i];
                    if (checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret) == null) {
                        return null;
                    }
                }

                var locationName = ReactPropTypeLocationNames[location];
                return new Error('Invalid ' + locationName + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));
            }
            return createChainableTypeChecker(validate);
        }

        function createNodeChecker() {
            function validate(props, propName, componentName, location, propFullName) {
                if (!isNode(props[propName])) {
                    var locationName = ReactPropTypeLocationNames[location];
                    return new Error('Invalid ' + locationName + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
                }
                return null;
            }
            return createChainableTypeChecker(validate);
        }

        function createShapeTypeChecker(shapeTypes) {
            function validate(props, propName, componentName, location, propFullName) {
                var propValue = props[propName];
                var propType = getPropType(propValue);
                if (propType !== 'object') {
                    var locationName = ReactPropTypeLocationNames[location];
                    return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
                }
                for (var key in shapeTypes) {
                    var checker = shapeTypes[key];
                    if (!checker) {
                        continue;
                    }
                    var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
                    if (error) {
                        return error;
                    }
                }
                return null;
            }
            return createChainableTypeChecker(validate);
        }

        function isNode(propValue) {
            switch (typeof propValue) {
                case 'number':
                case 'string':
                case 'undefined':
                    return true;
                case 'boolean':
                    return !propValue;
                case 'object':
                    if (Array.isArray(propValue)) {
                        return propValue.every(isNode);
                    }
                    if (propValue === null || ReactElement.isValidElement(propValue)) {
                        return true;
                    }

                    var iteratorFn = getIteratorFn(propValue);
                    if (iteratorFn) {
                        var iterator = iteratorFn.call(propValue);
                        var step;
                        if (iteratorFn !== propValue.entries) {
                            while (!(step = iterator.next()).done) {
                                if (!isNode(step.value)) {
                                    return false;
                                }
                            }
                        } else {

                            while (!(step = iterator.next()).done) {
                                var entry = step.value;
                                if (entry) {
                                    if (!isNode(entry[1])) {
                                        return false;
                                    }
                                }
                            }
                        }
                    } else {
                        return false;
                    }

                    return true;
                default:
                    return false;
            }

        }

        function isSymbol(propType, propValue) {

            if (propType === 'symbol') {
                return true;
            }


            if (propValue['@@toStringTag'] === 'Symbol') {
                return true;
            }


            if (typeof Symbol === 'function' && propValue instanceof Symbol) {
                return true;
            }

            return false;
        }


        function getPropType(propValue) {
            var propType = typeof propValue;
            if (Array.isArray(propValue)) {
                return 'array';
            }
            if (propValue instanceof RegExp) {



                return 'object';
            }
            if (isSymbol(propType, propValue)) {
                return 'symbol';
            }
            return propType;
        }



        function getPreciseType(propValue) {
            var propType = getPropType(propValue);
            if (propType === 'object') {
                if (propValue instanceof Date) {
                    return 'date';
                } else if (propValue instanceof RegExp) {
                    return 'regexp';
                }
            }
            return propType;
        }


        function getClassName(propValue) {
            if (!propValue.constructor || !propValue.constructor.name) {
                return ANONYMOUS;
            }
            return propValue.constructor.name;
        }

        module.exports = ReactPropTypes;

        /***/
    },
    /* 227 */
    /***/
    function(module, exports) {



        'use strict';

        var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

        module.exports = ReactPropTypesSecret;

        /***/
    },
    /* 228 */
    /***/
    function(module, exports) {



        'use strict';

        module.exports = '15.3.0';

        /***/
    },
    /* 229 */
    /***/
    function(module, exports, __webpack_require__) {



        'use strict';

        var _prodInvariant = __webpack_require__(71);

        var ReactElement = __webpack_require__(210);

        var invariant = __webpack_require__(19);



        function onlyChild(children) {
            !ReactElement.isValidElement(children) ? false ? invariant(false, 'onlyChild must be passed a children with exactly one child.') : _prodInvariant('23') : void 0;
            return children;
        }

        module.exports = onlyChild;

        /***/
    },
    /* 230 */
    /***/
    function(module, exports) {

        var TYPES = {
            ROW: 'row',
            SECTION_HEADER: 'section-header'
        };



        var DIRECTION = {
            UP: 'up',
            DOWN: 'down'
        };



        function Rows(props) {
            this.props = props;



            this.containerHeight = 0;

            this.renderRange = {
                start: 0,
                end: 0
            };


            this.needRenderRows = [];

            this.defaultRowHeight = 0;

            this.allRows = this.getAllRows(this.props.dataSource);


            this.renderRowsIndexRange = null;


            this.direction = DIRECTION.UP;



            this.placeholderHeight = {
                top: 0,
                bottom: 0
            };



            this.offset = {
                y: 0
            };


            this.keys = {
                _cache: [],
                _count: 0,
                get: function get(newKey) {
                    if (this._cache.length && !newKey) {
                        return this._cache.shift();
                    } else {
                        this._count += 1;
                        return this._count;
                    }
                },
                size: function size() {
                    return this._cache.length;
                },
                put: function put(key) {
                    this._cache.push(key);
                }
            };

        }



        Rows.prototype.getNeedRenderRows = function() {
            var _this = this;
            var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};



            var limitRangeRowPerFrame = true;

            if (options.limitRangeRowPerFrame === false) {
                limitRangeRowPerFrame = false;
            }
            if (options.initial === true) {
                this.renderRowsIndexRange = {
                    start: 0,
                    end: this.props.initialListSize - 1
                };

            }

            var changedRows = {};
            var pageSize = this.props.pageSize;

            var needBeRemovedRows = [],
                needBeAddedRows = [];
            if (this.direction === DIRECTION.DOWN) {
                for (var i = 0; i < this.allRows.length; i++) {
                    var row = this.allRows[i];
                    if (i > this.renderRowsIndexRange.end && row.key) {
                        needBeRemovedRows.push(row);
                    }
                    if (i >= this.renderRowsIndexRange.start && i <= this.renderRowsIndexRange.end) {
                        if (!row.key) {
                            needBeAddedRows.push(row);
                        } else {
                            row.shouldUpdate = false;
                        }
                    }
                }
            } else {
                for (var _i = 0; _i < this.allRows.length; _i++) {
                    var _row = this.allRows[_i];
                    changedRows[_row.sectionName] = changedRows[_row.sectionName] || {};

                    if (_i < this.renderRowsIndexRange.start && _row.key && _row.type !== TYPES.SECTION_HEADER) {
                        needBeRemovedRows.push(_row);
                    }
                    if (_i >= this.renderRowsIndexRange.start && _i <= this.renderRowsIndexRange.end) {
                        if (!_row.key) {
                            needBeAddedRows.push(_row);
                        } else {
                            _row.shouldUpdate = false;
                        }
                    }
                }
            }

            var rowsHasChanged = false;
            for (var _i2 = 0, len = needBeAddedRows.length; _i2 < len; _i2++) {

                var needBeAddedRow = needBeAddedRows.pop();
                var needBeRemovedRow = needBeRemovedRows.shift();

                if (needBeRemovedRow) {
                    rowsHasChanged = true;

                    this.keys.put(needBeRemovedRow.key);
                    needBeRemovedRow.key = null;

                    changedRows[needBeRemovedRow.sectionName] = changedRows[needBeRemovedRow.sectionName] || {};
                    changedRows[needBeRemovedRow.sectionName][needBeRemovedRow.rowIndex] = false;
                }

                if (limitRangeRowPerFrame ? _i2 < pageSize : true) {
                    rowsHasChanged = true;
                    if (this.direction === DIRECTION.DOWN) {
                        needBeAddedRow.key = this.keys.get('new');
                    } else {
                        needBeAddedRow.key = limitRangeRowPerFrame ? this.keys.get() : this.keys.get('new');
                    }
                    needBeAddedRow.shouldUpdate = true;

                    changedRows[needBeAddedRow.sectionName] = changedRows[needBeAddedRow.sectionName] || {};
                    changedRows[needBeAddedRow.sectionName][needBeAddedRow.rowIndex] = true;
                }
            }


            var needRenderRows = [];
            for (var _i3 = 0; _i3 < this.allRows.length; _i3++) {
                if (this.allRows[_i3].key) {
                    needRenderRows.push(this.allRows[_i3]);
                }
            }



            if (this.props.onChangeVisibleRows) {
                (function() {
                    var visibleRows = {};
                    needRenderRows.forEach(function(row) {
                        if (!visibleRows[row.sectionName]) {
                            visibleRows[row.sectionName] = {};
                        }
                        visibleRows[row.sectionName][row.rowIndex] = true;
                    });
                    _this.props.onChangeVisibleRows(visibleRows, changedRows);
                })();
            }


            needRenderRows.changed = rowsHasChanged;

            this.needRenderRows = needRenderRows;
            return this.needRenderRows;
        };



        Rows.prototype.update = function(props) {
            this.props = props;
            var allRows = this.getAllRows();
            var dataSource = props.dataSource;
            for (var i = 0; i < this.allRows.length; i++) {
                var row = this.allRows[i];
                if (allRows[i]) {
                    var shouldUpdate = dataSource.rowShouldUpdate(allRows[i].sectionIndex, allRows[i].rowIndex);
                    allRows[i].shouldUpdate = shouldUpdate;
                    if (shouldUpdate === false) {
                        allRows[i].key = row.key;
                    } else {
                        row.key && this.keys.put(row.key);
                    }
                } else {
                    row.key && this.keys.put(row.key);
                }
            }
            this.allRows = allRows;
        };



        Rows.prototype.setRenderOffset = function(offset) {
            offset.y = Math.round(offset.y);
            var direction = this.direction;
            if (offset.y - this.offset.y > 0) {
                direction = DIRECTION.UP;
            } else if (offset.y - this.offset.y < 0) {
                direction = DIRECTION.DOWN;
            }
            this.offset = offset;

            this.direction = direction;
            var distance = this.props.scrollRenderAheadDistance;

            var renderOffset = void 0;
            if (this.direction === DIRECTION.DOWN) {
                renderOffset = {
                    start: offset.y - distance,
                    end: offset.y + this.containerHeight + distance
                };

            } else {
                renderOffset = {
                    start: offset.y - distance,
                    end: offset.y + this.containerHeight + distance
                };

            }
            if (renderOffset.start < 0) {
                renderOffset.end += Math.abs(renderOffset.start);
            }
            var lastRow = this.allRows[this.allRows.length - 1];
            if (lastRow && lastRow.offsetY) {
                var lastRowBottom = lastRow.offsetY + lastRow.height;
                if (renderOffset.end > lastRowBottom) {
                    renderOffset.start -= renderOffset.end - lastRowBottom;
                }
            }
            this.setRenderRowsIndexRange(renderOffset);
        };



        Rows.prototype.setRenderRowsIndexRange = function(renderRange) {
            var heightSum = 0;

            this.renderRange = renderRange;

            var startIndex = -1,
                endIndex = -1;
            for (var i = 0; i < this.allRows.length; i++) {
                var row = this.allRows[i];
                heightSum += row.height || this.defaultRowHeight;

                if (startIndex === -1 && heightSum >= renderRange.start) {
                    startIndex = i;
                }

                if (endIndex === -1 && (heightSum >= renderRange.end || i === this.allRows.length - 1)) {
                    endIndex = i;
                }
            }

            this.renderRowsIndexRange = {
                start: startIndex,
                end: endIndex
            };



            var placeholderHeight = {
                top: 0,
                bottom: 0
            };

            for (var _i4 = 0; _i4 < this.allRows.length; _i4++) {
                if (_i4 < this.renderRowsIndexRange.start) {
                    placeholderHeight.top += this.allRows[_i4].height || this.defaultRowHeight;
                }
                if (_i4 > this.renderRowsIndexRange.end) {
                    placeholderHeight.bottom += this.allRows[_i4].height || this.defaultRowHeight;
                }
            }

            this.placeholderHeight = placeholderHeight;


            if (heightSum - (this.renderRange.end - this.props.scrollRenderAheadDistance) < this.props.onEndReachedThreshold) {
                if (this.props.onEndReached && !this.belowReacheEndThreshold && this.direction === DIRECTION.DOWN) {
                    this.props.onEndReached();
                    this.belowReacheEndThreshold = true;
                }
            } else {
                this.belowReacheEndThreshold = false;
            }
        };

        Rows.prototype.checkIfNeedSeparator = function(row) {
            var nextRow = this.allRows[row.index + 1];
            if (this.props.renderSeparator && row.type === TYPES.ROW && nextRow && nextRow.type === TYPES.ROW) {
                return true;
            } else {
                return false;
            }
        };



        Rows.prototype.getPlaceholderHeight = function() {
            return this.placeholderHeight;
        };



        Rows.prototype.setRowLayout = function(index, layout) {
            if (this.allRows.length > index) {
                var row = this.allRows[index];
                row.offsetY = layout.y;
                row.height = layout.height;
                if (!this.defaultRowHeight) {
                    this.defaultRowHeight = layout.height;
                }
            }
        };



        Rows.prototype.getAllRows = function() {
            var _this2 = this;
            var dataSource = this.props.dataSource;
            var allRows = [],
                rowIndex = 0;


            var sectionLengths = dataSource.getSectionLengths();
            sectionLengths.forEach(function(rowLength, sectionIndex) {
                if (_this2.props.renderSectionHeader) {
                    allRows.push({

                        index: rowIndex,
                        type: TYPES.SECTION_HEADER,
                        sectionIndex: sectionIndex,
                        sectionName: dataSource.sectionIdentities[sectionIndex],
                        shouldUpdate: true,
                        offsetY: null,
                        height: null
                    });

                    rowIndex += 1;
                }
                for (var rowIndexWithinSection = 0; rowIndexWithinSection < rowLength; rowIndexWithinSection++) {
                    allRows.push({
                        index: rowIndex,
                        type: TYPES.ROW,
                        sectionIndex: sectionIndex,
                        sectionName: dataSource.sectionIdentities[sectionIndex],
                        rowIndex: rowIndexWithinSection,
                        shouldUpdate: true,
                        offsetY: null,
                        height: null
                    });

                    rowIndex += 1;
                }
            });

            return allRows;
        };

        Rows.TYPES = TYPES;

        module.exports = Rows;

        /***/
    },
    /* 231 */
    /***/
    function(module, exports, __webpack_require__) {



        var React = __webpack_require__(10);
        var PropTypes = React.PropTypes;
        var View = __webpack_require__(27);
        var TouchableWithoutFeedback = __webpack_require__(187);
        var StyleSheet = __webpack_require__(39);
        var ReactDOM = __webpack_require__(10);
        var modalControl = __webpack_require__(84);


        var noop = function noop() {};



        var MODAL = 'MODAL';



        var Modal = React.createClass({
            displayName: 'Modal',
            propTypes: {



                visible: PropTypes.bool,



                onShow: PropTypes.func,



                onHide: PropTypes.func,



                onMaskPress: PropTypes.func,



                animation: PropTypes.oneOfType([PropTypes.shape({
                        show: PropTypes.object,
                        hide: PropTypes.object
                    }),
                    PropTypes.oneOf(['fade', 'none', 'slideFromBottom', 'slideFromLeft', 'slideFromRight', 'slideFromTop'])
                ]),



                maskOpacity: PropTypes.number,



                offset: PropTypes.number,



                position: PropTypes.oneOf(['center', 'top', 'bottom', 'left', 'right']),



                showNavBarMask: PropTypes.bool
            },

            getDefaultProps: function getDefaultProps() {
                return {
                    visible: false,
                    onMaskPress: noop,
                    position: 'center',
                    animation: 'none',
                    offset: 0,
                    maskOpacity: 0.3
                };

            },
            getInitialState: function getInitialState() {
                this.gid = 'lower-' + modalControl.getGid();
                this.ModalComponent = null;
                return {};
            },
            componentDidMount: function componentDidMount() {
                this.renderModal();
            },
            componentDidUpdate: function componentDidUpdate() {
                this.renderModal();
            },
            componentWillUnmount: function componentWillUnmount() {
                modalControl.destory(this.gid);
            },
            render: function render() {
                var props = this.props;
                if (props.visible) {
                    var animation = props.animation;

                    if (typeof animation === 'object') {
                        animation = 'none';
                    }
                    this.ModalComponent =
                        (this && this.createElement || React.createElement)(TouchableWithoutFeedback, {
                                key: this.gid,
                                onPress: function onPress(e) {
                                    return e.target.className.indexOf('rn-modal-wrapper') > -1 && props.onMaskPress();
                                }
                            },

                            (this && this.createElement || React.createElement)(View, {
                                    className: 'rn-modal-wrapper',
                                    style: [
                                        modalStyles.base,
                                        modalStyles[props.position], {
                                            backgroundColor: 'rgba(0,0,0,' + props.maskOpacity + ')'
                                        }
                                    ]
                                },


                                (this && this.createElement || React.createElement)(View, {
                                        ref: MODAL,
                                        className: 'rn-modal-animated',
                                        style: {
                                            top: props.offset,
                                            animationName: animation
                                        }
                                    },


                                    props.children)));



                } else {
                    this.ModalComponent = null;
                }
                return null;
            },
            renderModal: function renderModal() {
                var _this = this;
                var props = this.props;
                if (this.ModalComponent) {
                    modalControl.mount(this.ModalComponent, function() {
                        _this._onShow();
                        props.onShow && props.onShow();
                    });
                } else {
                    modalControl.destory(this.gid, function() {
                        props.onHide && props.onHide();
                    });
                }
            },
            _onShow: function _onShow() {
                var modal = ReactDOM.findDOMNode(this.refs[MODAL]),
                    animation = this.props.animation;

                if (typeof animation === 'object') {
                    console.warn('Modal 暂时不支持自定义动画');
                }
                if (modal) {
                    if ('animation' in modal.style) {
                        modal.style.animationPlayState = 'running';
                    } else {
                        modal.style.webkitAnimationPlayState = 'running';
                    }
                }
            }
        });



        var modalStyles = StyleSheet.create({
            base: {
                flex: 1
            },

            center: {
                justifyContent: 'center',
                alignItems: 'center'
            },

            left: {
                justifyContent: 'center',
                alignItems: 'flex-start'
            },

            right: {
                justifyContent: 'center',
                alignItems: 'flex-end'
            },

            top: {
                justifyContent: 'flex-start',
                alignItems: 'center'
            },

            bottom: {
                justifyContent: 'flex-end',
                alignItems: 'center'
            }
        });



        module.exports = Modal;

        /***/
    },
    /* 232 */
    /***/
    function(module, exports, __webpack_require__) {

        var _extends = Object.assign || function(target) {
            for (var i = 1; i < arguments.length; i++) {
                var source = arguments[i];
                for (var key in source) {
                    if (Object.prototype.hasOwnProperty.call(source, key)) {
                        target[key] = source[key];
                    }
                }
            }
            return target;
        };


        var React = __webpack_require__(10);
        var PropTypes = React.PropTypes;
        var Dimensions = __webpack_require__(52);
        var InteractionMixin = __webpack_require__(233);
        var Map = __webpack_require__(234);
        var NavigationContext = __webpack_require__(302);
        var NavigatorBreadcrumbNavigationBar = __webpack_require__(306);
        var NavigatorNavigationBar = __webpack_require__(313);
        var NavigatorSceneConfigs = __webpack_require__(314);
        var PanResponder = __webpack_require__(195);
        var StyleSheet = __webpack_require__(39);
        var Subscribable = __webpack_require__(315);
        var TimerMixin = __webpack_require__(186);
        var View = __webpack_require__(27);
        var clamp = __webpack_require__(316);
        var _require =
            __webpack_require__(39),
            flatten = _require.flatten;
        var invariant = __webpack_require__(19);
        var rebound = __webpack_require__(317);
        var NativeMethodsMixin = __webpack_require__(54);
        var AppRegistry = __webpack_require__(74);
        var Utils = __webpack_require__(80);
        var modalControl = __webpack_require__(84);
        var Platform = __webpack_require__(311);
        var TextInputState = __webpack_require__(318);
        var
            __dispatch = AppRegistry.__dispatch;
        var ReactPromise = __webpack_require__(2);



        var SCREEN_WIDTH = Dimensions.get('window').width;
        var SCREEN_HEIGHT = Dimensions.get('window').height;
        var SCENE_DISABLED_NATIVE_PROPS = {
            pointerEvents: 'none',
            style: {
                top: SCREEN_HEIGHT,
                bottom: -SCREEN_HEIGHT,
                opacity: 0
            }
        };



        var styles = StyleSheet.create({
            container: {
                flex: 1,
                overflow: 'hidden'
            },

            defaultSceneStyle: {
                position: 'absolute',
                left: 0,
                right: 0,
                bottom: 0,
                top: 0
            },

            baseScene: {
                position: 'absolute',
                overflow: 'hidden',
                left: 0,
                right: 0,
                bottom: 0,
                top: 0
            },

            disabledScene: {
                top: SCREEN_HEIGHT,
                bottom: -SCREEN_HEIGHT
            },

            transitioner: {
                flex: 1,
                backgroundColor: 'transparent',
                overflow: 'hidden'
            }
        });



        var GESTURE_ACTIONS = [
            'pop',
            'jumpBack',
            'jumpForward'
        ];



        var Navigator = React.createClass({
            displayName: 'Navigator',
            mixins: [TimerMixin, InteractionMixin, Subscribable.Mixin, NativeMethodsMixin],
            propTypes: {



                configureScene: PropTypes.func,



                renderScene: PropTypes.func.isRequired,



                initialRoute: PropTypes.object,



                initialRouteStack: PropTypes.arrayOf(PropTypes.object),



                onWillFocus: PropTypes.func,



                onDidFocus: PropTypes.func,



                navigationBar: PropTypes.node,



                navigator: PropTypes.object,



                sceneStyle: View.propTypes.style
            },


            statics: {
                BreadcrumbNavigationBar: NavigatorBreadcrumbNavigationBar,
                NavigationBar: NavigatorNavigationBar,
                SceneConfigs: NavigatorSceneConfigs
            },


            getDefaultProps: function getDefaultProps() {
                return {
                    configureScene: function configureScene() {
                        return NavigatorSceneConfigs.PushFromRight;
                    },
                    sceneStyle: styles.defaultSceneStyle
                };

            },

            getInitialState: function getInitialState() {
                var _this = this;
                this._renderedSceneMap = new Map();
                var initialRoute = this.props.initialRoute;
                var routeStack = this.props.initialRouteStack || [initialRoute];
                invariant(
                    routeStack.length >= 1,
                    'Navigator requires props.initialRoute or props.initialRouteStack.');

                var routeFromUrl = Navigator.parseUrlToRoute(this, initialRoute);
                if (routeFromUrl) routeStack.push(routeFromUrl);
                var initialRouteIndex = routeStack.length - 1;

                return {
                    sceneConfigStack: routeStack.map(
                        function(route) {
                            return _this.props.configureScene(route);
                        }),

                    routeStack: routeStack,
                    presentedIndex: initialRouteIndex,
                    transitionFromIndex: null,
                    activeGesture: null,
                    pendingGestureProgress: null,
                    transitionQueue: []
                };

            },

            componentWillMount: function componentWillMount() {
                var _this2 = this;

                this.__defineGetter__('navigationContext', this._getNavigationContext);

                this._subRouteFocus = [];
                this.parentNavigator = this.props.navigator;
                this._handlers = {};
                this.springSystem = new rebound.SpringSystem();
                this.spring = this.springSystem.createSpring();
                this.spring.setRestSpeedThreshold(0.05);
                this.spring.setCurrentValue(0).setAtRest();
                this.spring.addListener({
                    onSpringEndStateChange: function onSpringEndStateChange() {
                        if (!_this2._interactionHandle) {
                            _this2._interactionHandle = _this2.createInteractionHandle();
                        }
                    },
                    onSpringUpdate: function onSpringUpdate() {
                        _this2._handleSpringUpdate();
                    },
                    onSpringAtRest: function onSpringAtRest() {
                        _this2._completeTransition();
                    }
                });

                this.panGesture = PanResponder.create({
                    onMoveShouldSetPanResponder: this._handleMoveShouldSetPanResponder,
                    onPanResponderGrant: this._handlePanResponderGrant,
                    onPanResponderRelease: this._handlePanResponderRelease,
                    onPanResponderMove: this._handlePanResponderMove,
                    onPanResponderTerminate: this._handlePanResponderTerminate
                });

                this._interactionHandle = null;
                this._emitWillFocus(this.state.routeStack[this.state.presentedIndex]);
            },

            componentDidMount: function componentDidMount() {
                var routeStack = this.state.routeStack,
                    route = routeStack[this.state.presentedIndex];
                this._handleSpringUpdate();
                this._emitDidFocus(route);
                if ((process).browser) {
                    EventEmitter.emit('rn:NavigatorDidmount', {
                        instance: this
                    });
                    __dispatch({
                        type: 'PV',
                        e: route
                    });
                }
            },

            componentWillUnmount: function componentWillUnmount() {
                searchLocation = null;
                if (this._navigationContext) {
                    this._navigationContext.dispose();
                    this._navigationContext = null;
                }
                EventEmitter.emit('rn:NavigatorWillUnmount', {
                    instance: this
                });
            },



            immediatelyResetRouteStack: function immediatelyResetRouteStack(nextRouteStack) {

            },

            _transitionTo: function _transitionTo(destIndex, velocity, jumpSpringTo, cb) {
                var _this3 = this;
                if (destIndex === this.state.presentedIndex) {
                    return;
                }

                TextInputState.blur(TextInputState.currentFocus());

                modalControl.destory('all');

                if (this.state.transitionFromIndex !== null) {
                    this.state.transitionQueue.push({
                        destIndex: destIndex,
                        velocity: velocity,
                        cb: cb
                    });

                    return;
                }
                this.state.transitionFromIndex = this.state.presentedIndex;
                this.state.presentedIndex = destIndex;
                this.state.transitionCb = function() {
                    __dispatch({
                        type: 'PV',
                        e: _this3.state.routeStack[destIndex]
                    });
                    Navigator.runAnimationCBS();
                    cb && cb();
                };

                this._onAnimationStart();

                var sceneConfig = this.state.sceneConfigStack[this.state.transitionFromIndex] ||
                    this.state.sceneConfigStack[this.state.presentedIndex];
                invariant(
                    sceneConfig,
                    'Cannot configure scene at index ' + this.state.transitionFromIndex);

                if (jumpSpringTo != null) {
                    this.spring.setCurrentValue(jumpSpringTo);
                }
                this.spring.setOvershootClampingEnabled(true);
                this.spring.getSpringConfig().friction = sceneConfig.springFriction;
                this.spring.getSpringConfig().tension = sceneConfig.springTension;
                this.spring.setVelocity(velocity || sceneConfig.defaultTransitionVelocity);
                this.spring.setEndValue(1);



                Navigator.parseRouteToUrl(this.state.routeStack[destIndex], this);
            },



            _handleSpringUpdate: function _handleSpringUpdate() {

                if (this.state.transitionFromIndex != null) {
                    this._transitionBetween(
                        this.state.transitionFromIndex,
                        this.state.presentedIndex,
                        this.spring.getCurrentValue());

                } else if (this.state.activeGesture != null) {
                    var presentedToIndex = this.state.presentedIndex + this._deltaForGestureAction(this.state.activeGesture);
                    this._transitionBetween(
                        this.state.presentedIndex,
                        presentedToIndex,
                        this.spring.getCurrentValue());

                }
            },



            _completeTransition: function _completeTransition() {
                Navigator.isTransationing = null;
                if (this.spring.getCurrentValue() !== 1 && this.spring.getCurrentValue() !== 0) {


                    if (this.state.pendingGestureProgress) {
                        this.state.pendingGestureProgress = null;
                    }
                    return;
                }
                this._onAnimationEnd();
                var presentedIndex = this.state.presentedIndex;
                var didFocusRoute = this._subRouteFocus[presentedIndex] || this.state.routeStack[presentedIndex];
                this._emitDidFocus(didFocusRoute);
                this.state.transitionFromIndex = null;
                this.spring.setCurrentValue(0).setAtRest();
                this._hideScenes();
                if (this.state.transitionCb) {
                    this.state.transitionCb();
                    this.state.transitionCb = null;
                }
                if (this._interactionHandle) {
                    this.clearInteractionHandle(this._interactionHandle);
                    this._interactionHandle = null;
                }
                if (this.state.pendingGestureProgress) {


                    var gestureToIndex = this.state.presentedIndex + this._deltaForGestureAction(this.state.activeGesture);
                    this._enableScene(gestureToIndex);
                    this.spring.setEndValue(this.state.pendingGestureProgress);
                    return;
                }
                if (this.state.transitionQueue.length) {
                    var queuedTransition = this.state.transitionQueue.shift();
                    this._enableScene(queuedTransition.destIndex);
                    this._emitWillFocus(this.state.routeStack[queuedTransition.destIndex]);
                    this._transitionTo(
                        queuedTransition.destIndex,
                        queuedTransition.velocity,
                        null,
                        queuedTransition.cb);

                }
            },

            _emitDidFocus: function _emitDidFocus(route) {
                this.navigationContext.emit('didfocus', {
                    route: route
                });

                if (this.props.onDidFocus) {
                    this.props.onDidFocus(route);
                }
            },

            _emitWillFocus: function _emitWillFocus(route) {
                this.navigationContext.emit('willfocus', {
                    route: route
                });

                var navBar = this._navBar;
                if (navBar && navBar.handleWillFocus) {
                    navBar.handleWillFocus(route);
                }
                if (this.props.onWillFocus) {
                    this.props.onWillFocus(route);
                }
            },



            _hideScenes: function _hideScenes() {
                var gesturingToIndex = null;
                if (this.state.activeGesture) {
                    gesturingToIndex = this.state.presentedIndex + this._deltaForGestureAction(this.state.activeGesture);
                }
                for (var i = 0; i < this.state.routeStack.length; i++) {
                    if (i === this.state.presentedIndex ||
                        i === this.state.transitionFromIndex ||
                        i === gesturingToIndex) {
                        continue;
                    }
                    this._disableScene(i);
                }
            },



            _disableScene: function _disableScene(sceneIndex) {
                this.refs['scene_' + sceneIndex] &&
                    this.refs['scene_' + sceneIndex].setNativeProps(SCENE_DISABLED_NATIVE_PROPS);
            },



            _enableScene: function _enableScene(sceneIndex) {

                var sceneStyle = flatten([styles.baseScene, this.props.sceneStyle]);

                var enabledSceneNativeProps = {
                    pointerEvents: 'auto',
                    style: {
                        top: sceneStyle.top,
                        bottom: sceneStyle.bottom
                    }
                };


                if (sceneIndex !== this.state.transitionFromIndex &&
                    sceneIndex !== this.state.presentedIndex) {


                    enabledSceneNativeProps.style.opacity = 0;
                }
                if (this.refs['scene_' + sceneIndex]) {
                    this.refs['scene_' + sceneIndex].setNativeProps(enabledSceneNativeProps);
                } else {
                    this.setState({
                        presentedIndex: sceneIndex
                    });

                }
            },

            _onAnimationStart: function _onAnimationStart() {
                var fromIndex = this.state.presentedIndex;
                var toIndex = this.state.presentedIndex;
                if (this.state.transitionFromIndex != null) {
                    fromIndex = this.state.transitionFromIndex;
                } else if (this.state.activeGesture) {
                    toIndex = this.state.presentedIndex + this._deltaForGestureAction(this.state.activeGesture);
                }
                var navBar = this._navBar;
                if (navBar && navBar.onAnimationStart) {
                    navBar.onAnimationStart(fromIndex, toIndex);
                }
            },

            _onAnimationEnd: function _onAnimationEnd() {
                var navBar = this._navBar;
                if (navBar && navBar.onAnimationEnd) {
                    navBar.onAnimationEnd();
                }
            },

            _handleTouchStart: function _handleTouchStart() {
                this._eligibleGestures = GESTURE_ACTIONS;
            },

            _handleMoveShouldSetPanResponder: function _handleMoveShouldSetPanResponder(e, gestureState) {
                var sceneConfig = this.state.sceneConfigStack[this.state.presentedIndex];
                if (!sceneConfig) {
                    return false;
                }
                this._expectingGestureGrant = this._matchGestureAction(this._eligibleGestures, sceneConfig.gestures, gestureState);
                return !!this._expectingGestureGrant;
            },

            _doesGestureOverswipe: function _doesGestureOverswipe(gestureName) {
                var wouldOverswipeBack = this.state.presentedIndex <= 0 && (
                    gestureName === 'pop' || gestureName === 'jumpBack');
                var wouldOverswipeForward = this.state.presentedIndex >= this.state.routeStack.length - 1 &&
                    gestureName === 'jumpForward';
                return wouldOverswipeForward || wouldOverswipeBack;
            },

            _handlePanResponderGrant: function _handlePanResponderGrant(e, gestureState) {
                invariant(
                    this._expectingGestureGrant,
                    'Responder granted unexpectedly.');

                this._attachGesture(this._expectingGestureGrant);
                this._onAnimationStart();
                this._expectingGestureGrant = null;
            },

            _deltaForGestureAction: function _deltaForGestureAction(gestureAction) {
                switch (gestureAction) {
                    case 'pop':
                    case 'jumpBack':
                        return -1;
                    case 'jumpForward':
                        return 1;
                    default:
                        invariant(false, 'Unsupported gesture action ' + gestureAction);
                        return;
                }

            },

            _handlePanResponderRelease: function _handlePanResponderRelease(e, gestureState) {
                var _this4 = this;
                var sceneConfig = this.state.sceneConfigStack[this.state.presentedIndex];
                var releaseGestureAction = this.state.activeGesture;
                if (!releaseGestureAction) {

                    return;
                }
                var releaseGesture = sceneConfig.gestures[releaseGestureAction];
                var destIndex = this.state.presentedIndex + this._deltaForGestureAction(this.state.activeGesture);
                if (this.spring.getCurrentValue() === 0) {

                    this.spring.setCurrentValue(0).setAtRest();
                    this._completeTransition();
                    return;
                }
                var isTravelVertical = releaseGesture.direction === 'top-to-bottom' || releaseGesture.direction === 'bottom-to-top';
                var isTravelInverted = releaseGesture.direction === 'right-to-left' || releaseGesture.direction === 'bottom-to-top';
                var velocity = void 0,
                    gestureDistance = void 0;
                if (isTravelVertical) {
                    velocity = isTravelInverted ? -gestureState.vy : gestureState.vy;
                    gestureDistance = isTravelInverted ? -gestureState.dy : gestureState.dy;
                } else {
                    velocity = isTravelInverted ? -gestureState.vx : gestureState.vx;
                    gestureDistance = isTravelInverted ? -gestureState.dx : gestureState.dx;
                }
                var transitionVelocity = clamp(-10, velocity, 10);
                if (Math.abs(velocity) < releaseGesture.notMoving) {

                    var hasGesturedEnoughToComplete = gestureDistance > releaseGesture.fullDistance * releaseGesture.stillCompletionRatio;
                    transitionVelocity = hasGesturedEnoughToComplete ? releaseGesture.snapVelocity : -releaseGesture.snapVelocity;
                }
                if (transitionVelocity < 0 || this._doesGestureOverswipe(releaseGestureAction)) {


                    if (this.state.transitionFromIndex == null) {

                        var transitionBackToPresentedIndex = this.state.presentedIndex;

                        this.state.presentedIndex = destIndex;
                        this._transitionTo(
                            transitionBackToPresentedIndex, -transitionVelocity,
                            1 - this.spring.getCurrentValue());

                    }
                } else {

                    this._emitWillFocus(this.state.routeStack[destIndex]);
                    this._transitionTo(
                        destIndex,
                        transitionVelocity,
                        null,
                        function() {
                            if (releaseGestureAction === 'pop') {
                                _this4._cleanScenesPastIndex(destIndex);
                            }
                        });

                }
                this._detachGesture();
            },

            _handlePanResponderTerminate: function _handlePanResponderTerminate(e, gestureState) {
                if (this.state.activeGesture == null) {
                    return;
                }
                var destIndex = this.state.presentedIndex + this._deltaForGestureAction(this.state.activeGesture);
                this._detachGesture();
                var transitionBackToPresentedIndex = this.state.presentedIndex;

                this.state.presentedIndex = destIndex;
                this._transitionTo(
                    transitionBackToPresentedIndex,
                    null,
                    1 - this.spring.getCurrentValue());

            },

            _attachGesture: function _attachGesture(gestureId) {
                this.state.activeGesture = gestureId;
                var gesturingToIndex = this.state.presentedIndex + this._deltaForGestureAction(this.state.activeGesture);
                this._enableScene(gesturingToIndex);
            },

            _detachGesture: function _detachGesture() {
                this.state.activeGesture = null;
                this.state.pendingGestureProgress = null;
                this._hideScenes();
            },

            _handlePanResponderMove: function _handlePanResponderMove(e, gestureState) {
                var sceneConfig = this.state.sceneConfigStack[this.state.presentedIndex];
                if (this.state.activeGesture) {
                    var gesture = sceneConfig.gestures[this.state.activeGesture];
                    return this._moveAttachedGesture(gesture, gestureState);
                }
                var matchedGesture = this._matchGestureAction(GESTURE_ACTIONS, sceneConfig.gestures, gestureState);
                if (matchedGesture) {
                    this._attachGesture(matchedGesture);
                }
            },

            _moveAttachedGesture: function _moveAttachedGesture(gesture, gestureState) {
                var isTravelVertical = gesture.direction === 'top-to-bottom' || gesture.direction === 'bottom-to-top';
                var isTravelInverted = gesture.direction === 'right-to-left' || gesture.direction === 'bottom-to-top';
                var distance = isTravelVertical ? gestureState.dy : gestureState.dx;
                distance = isTravelInverted ? -distance : distance;
                var gestureDetectMovement = gesture.gestureDetectMovement;
                var nextProgress = (distance - gestureDetectMovement) / (
                    gesture.fullDistance - gestureDetectMovement);
                if (nextProgress < 0 && gesture.isDetachable) {
                    var gesturingToIndex = this.state.presentedIndex + this._deltaForGestureAction(this.state.activeGesture);
                    this._transitionBetween(this.state.presentedIndex, gesturingToIndex, 0);
                    this._detachGesture();
                    if (this.state.pendingGestureProgress != null) {
                        this.spring.setCurrentValue(0);
                    }
                    return;
                }
                if (this._doesGestureOverswipe(this.state.activeGesture)) {
                    var frictionConstant = gesture.overswipe.frictionConstant;
                    var frictionByDistance = gesture.overswipe.frictionByDistance;
                    var frictionRatio = 1 / (frictionConstant + Math.abs(nextProgress) * frictionByDistance);
                    nextProgress *= frictionRatio;
                }
                nextProgress = clamp(0, nextProgress, 1);
                if (this.state.transitionFromIndex != null) {
                    this.state.pendingGestureProgress = nextProgress;
                } else if (this.state.pendingGestureProgress) {
                    this.spring.setEndValue(nextProgress);
                } else {
                    this.spring.setCurrentValue(nextProgress);
                }
            },

            _matchGestureAction: function _matchGestureAction(eligibleGestures, gestures, gestureState) {
                var _this5 = this;
                if (!gestures || !eligibleGestures) {
                    return null;
                }
                var matchedGesture = null;
                eligibleGestures.some(function(gestureName, gestureIndex) {
                    var gesture = gestures[gestureName];
                    if (!gesture) {
                        return;
                    }
                    if (gesture.overswipe == null && _this5._doesGestureOverswipe(gestureName)) {

                        return false;
                    }
                    var isTravelVertical = gesture.direction === 'top-to-bottom' || gesture.direction === 'bottom-to-top';
                    var isTravelInverted = gesture.direction === 'right-to-left' || gesture.direction === 'bottom-to-top';
                    var currentLoc = isTravelVertical ? gestureState.moveY : gestureState.moveX;
                    var travelDist = isTravelVertical ? gestureState.dy : gestureState.dx;
                    var oppositeAxisTravelDist =
                        isTravelVertical ? gestureState.dx : gestureState.dy;
                    var edgeHitWidth = gesture.edgeHitWidth;
                    if (isTravelInverted) {
                        currentLoc = -currentLoc;
                        travelDist = -travelDist;
                        oppositeAxisTravelDist = -oppositeAxisTravelDist;
                        edgeHitWidth = isTravelVertical ?
                            -(SCREEN_HEIGHT - edgeHitWidth) :
                            -(SCREEN_WIDTH - edgeHitWidth);
                    }
                    var moveStartedInRegion = gesture.edgeHitWidth == null ||
                        currentLoc < edgeHitWidth;
                    if (!moveStartedInRegion) {
                        return false;
                    }
                    var moveTravelledFarEnough = travelDist >= gesture.gestureDetectMovement;
                    if (!moveTravelledFarEnough) {
                        return false;
                    }
                    var directionIsCorrect = Math.abs(travelDist) > Math.abs(oppositeAxisTravelDist) * gesture.directionRatio;
                    if (directionIsCorrect) {
                        matchedGesture = gestureName;
                        return true;
                    } else {
                        _this5._eligibleGestures = _this5._eligibleGestures.slice().splice(gestureIndex, 1);
                    }
                });
                return matchedGesture;
            },

            _transitionSceneStyle: function _transitionSceneStyle(fromIndex, toIndex, progress, index) {
                var viewAtIndex = this.refs['scene_' + index];
                if (viewAtIndex === null || viewAtIndex === undefined) {
                    return;
                }

                var sceneConfigIndex = fromIndex < toIndex ? toIndex : fromIndex;
                var sceneConfig = this.state.sceneConfigStack[sceneConfigIndex];

                if (!sceneConfig) {
                    sceneConfig = this.state.sceneConfigStack[sceneConfigIndex - 1];
                }
                var styleToUse = {};
                var useFn = index < fromIndex || index < toIndex ?
                    sceneConfig.animationInterpolators.out :
                    sceneConfig.animationInterpolators.into;
                var directionAdjustedProgress = fromIndex < toIndex ? progress : 1 - progress;
                var didChange = useFn(styleToUse, directionAdjustedProgress);
                if (didChange) {
                    viewAtIndex.setNativeProps({
                        style: styleToUse
                    });
                }
            },

            _transitionBetween: function _transitionBetween(fromIndex, toIndex, progress) {
                this._transitionSceneStyle(fromIndex, toIndex, progress, fromIndex);
                this._transitionSceneStyle(fromIndex, toIndex, progress, toIndex);
                var navBar = this._navBar;
                if (navBar && navBar.updateProgress && toIndex >= 0 && fromIndex >= 0) {
                    navBar.updateProgress(progress, fromIndex, toIndex);
                }
            },

            _handleResponderTerminationRequest: function _handleResponderTerminationRequest() {
                return false;
            },

            _getDestIndexWithinBounds: function _getDestIndexWithinBounds(n) {
                var currentIndex = this.state.presentedIndex;
                var destIndex = currentIndex + n;
                invariant(
                    destIndex >= 0,
                    'Cannot jump before the first route.');

                var maxIndex = this.state.routeStack.length - 1;
                invariant(
                    maxIndex >= destIndex,
                    'Cannot jump past the last route.');

                return destIndex;
            },

            _jumpN: function _jumpN(n) {
                var destIndex = this._getDestIndexWithinBounds(n);
                this._enableScene(destIndex);
                this._emitWillFocus(this.state.routeStack[destIndex]);
                this._transitionTo(destIndex);
                if (!this.historyChanged) {
                    return;
                }
            },



            jumpTo: function jumpTo(route) {
                var destIndex = this.state.routeStack.indexOf(route);
                invariant(
                    destIndex !== -1,
                    'Cannot jump to route that is not in the route stack');

                this._jumpN(destIndex - this.state.presentedIndex);
            },



            jumpForward: function jumpForward() {
                this._jumpN(1);
            },

            jumpBack: function jumpBack() {
                this._jumpN(-1);
            },



            push: function push(route, cb) {
                Navigator.isTransationing = true;
                invariant(!!route, 'Must supply route to push');
                var me = this;
                Navigator.resolveRoute(route).then(function(route) {
                    var activeLength = me.state.presentedIndex + 1;
                    var activeStack = me.state.routeStack.slice(0, activeLength);
                    var activeAnimationConfigStack = me.state.sceneConfigStack.slice(0, activeLength);
                    var nextStack = activeStack.concat([route]);
                    var destIndex = nextStack.length - 1;
                    var nextAnimationConfigStack = activeAnimationConfigStack.concat([
                        me.props.configureScene(route)
                    ]);

                    me._emitWillFocus(nextStack[destIndex]);
                    me.setState({
                            routeStack: nextStack,
                            sceneConfigStack: nextAnimationConfigStack
                        },
                        function() {
                            me._enableScene(destIndex);
                            me._transitionTo(destIndex, null, null, cb);
                        });
                });
            },

            _popN: function _popN(n) {
                var _this6 = this;
                if (n === 0) {
                    return;
                }
                Navigator.isTransationing = true;
                invariant(
                    this.state.presentedIndex - n >= 0,
                    'Cannot pop below zero');

                var popIndex = this.state.presentedIndex - n;
                this._enableScene(popIndex);
                var route = this.state.routeStack[popIndex];
                this._emitWillFocus(route);
                this._transitionTo(
                    popIndex,
                    null,
                    null,
                    function() {
                        _this6._cleanScenesPastIndex(popIndex);
                    });

            },

            pop: function pop() {
                if (this.state.transitionQueue.length) {



                    return;
                }

                if (this.state.presentedIndex > 0) {
                    this._popN(1);
                }
            },



            replaceAtIndex: function replaceAtIndex(route, index, cb) {
                if (index < 0) {
                    index += this.state.routeStack.length;
                }

                if (this.state.routeStack.length <= index) {
                    return;
                }

                var me = this;
                Navigator.resolveRoute(route).then(function(route) {
                    var nextRouteStack = me.state.routeStack.slice();
                    var nextAnimationModeStack = me.state.sceneConfigStack.slice();
                    nextRouteStack[index] = route;
                    nextAnimationModeStack[index] = me.props.configureScene(route);

                    me.setState({
                            routeStack: nextRouteStack,
                            sceneConfigStack: nextAnimationModeStack
                        },
                        function() {
                            if (index === me.state.presentedIndex) {
                                me._emitDidFocus(route);
                            } else {
                                me._enableScene(index);
                                me._transitionTo(index, null, null, cb);
                            }

                        });
                });
            },



            replace: function replace(route) {
                this.replaceAtIndex(route, this.state.presentedIndex);
            },



            replacePrevious: function replacePrevious(route) {
                this.replaceAtIndex(route, this.state.presentedIndex - 1);
            },

            popToTop: function popToTop() {
                this.popToRoute(this.state.routeStack[0]);
            },

            popToRoute: function popToRoute(route) {
                var indexOfRoute = this.state.routeStack.indexOf(route);
                invariant(
                    indexOfRoute !== -1,
                    'Calling popToRoute for a route that doesn\'t exist!');

                var numToPop = this.state.presentedIndex - indexOfRoute;
                this._popN(numToPop);
            },

            replacePreviousAndPop: function replacePreviousAndPop(route) {
                if (this.state.routeStack.length < 2) {
                    return;
                }
                this.replacePrevious(route);
                this.pop();
            },

            resetTo: function resetTo(route) {
                var _this7 = this;
                invariant(!!route, 'Must supply route to push');
                this.replaceAtIndex(route, 0, function() {


                    if (_this7.state.presentedIndex > 0) {
                        _this7._popN(_this7.state.presentedIndex);
                    }
                });
            },

            getCurrentRoutes: function getCurrentRoutes() {

                return this.state.routeStack.slice();
            },

            _cleanScenesPastIndex: function _cleanScenesPastIndex(index) {
                var newStackLength = index + 1;

                if (newStackLength < this.state.routeStack.length) {
                    this.setState({
                        sceneConfigStack: this.state.sceneConfigStack.slice(0, newStackLength),
                        routeStack: this.state.routeStack.slice(0, newStackLength)
                    });

                }
            },

            _renderScene: function _renderScene(route, i) {
                var _this8 = this;
                var disabledSceneStyle = null;
                var disabledScenePointerEvents = 'auto';
                if (i !== this.state.presentedIndex) {
                    disabledSceneStyle = styles.disabledScene;
                    disabledScenePointerEvents = 'none';
                }
                return (
                    (this && this.createElement || React.createElement)(View, {
                            key: 'scene_' + i,
                            ref: 'scene_' + i,
                            onStartShouldSetResponderCapture: function onStartShouldSetResponderCapture() {
                                return _this8.state.transitionFromIndex != null || _this8.state.transitionFromIndex != null;
                            },
                            pointerEvents: disabledScenePointerEvents,
                            style: [styles.baseScene, this.props.sceneStyle, disabledSceneStyle]
                        },
                        this.props.renderScene(
                            route,
                            this)));



            },

            _renderNavigationBar: function _renderNavigationBar() {
                var _this9 = this;
                if (!this.props.navigationBar) {
                    return null;
                }
                return React.cloneElement(this.props.navigationBar, {
                    ref: function ref(navBar) {
                        _this9._navBar = navBar;
                    },
                    navigator: this,
                    navState: this.state
                });

            },

            render: function render() {
                var _this10 = this;
                var newRenderedSceneMap = new Map();
                var me = this;
                var scenes = this.state.routeStack.map(function(route, index) {
                    var renderedScene = void 0;
                    if (_this10._renderedSceneMap.has(route) &&
                        index !== _this10.state.presentedIndex) {
                        renderedScene = _this10._renderedSceneMap.get(route);
                    } else {
                        renderedScene = _this10._renderScene(route, index);
                    }
                    newRenderedSceneMap.set(route, renderedScene);
                    return renderedScene;
                });
                this._renderedSceneMap = newRenderedSceneMap;
                return (
                    (this && this.createElement || React.createElement)(View, {
                            style: [styles.container, this.props.style]
                        },
                        (this && this.createElement || React.createElement)(View, _extends({
                                    style: styles.transitioner
                                },
                                this.panGesture.panHandlers, {
                                    onTouchStart: this._handleTouchStart,
                                    onResponderTerminationRequest: this._handleResponderTerminationRequest
                                }),

                            scenes),

                        this._renderNavigationBar()));


            },

            _getNavigationContext: function _getNavigationContext() {
                if (!this._navigationContext) {
                    this._navigationContext = new NavigationContext();
                }
                return this._navigationContext;
            }
        });


        Navigator.isReactNativeComponent = true;


        Navigator.resolveRoute = function(route) {
            return new ReactPromise(function(rs) {
                rs(route);
            });
        };


        Navigator.parseUrlToRoute = function() {
            return !1;
        };


        Navigator.parseRouteToUrl = function() {};


        var cbs = [];
        Navigator.runAfterAnimation = function(cb) {
            cb && (Navigator.isTransationing ? cbs.push(cb) : cb());
        };
        Navigator.runAnimationCBS = function() {
            cbs.forEach(function(cb) {
                cb && cb();
            });
            cbs = [];
        };

        module.exports = Navigator;

        /***/
    },
    /* 233 */
    /***/
    function(module, exports) {



        'use strict';



        var InteractionMixin = {
            componentWillUnmount: function componentWillUnmount() {},

            _interactionMixinHandles: [],

            createInteractionHandle: function createInteractionHandle() {},

            clearInteractionHandle: function clearInteractionHandle(clearHandle) {},



            runAfterInteractions: function runAfterInteractions(callback) {}
        };


        module.exports = InteractionMixin;

        /***/
    },
    /* 234 */
    /***/
    function(module, exports, __webpack_require__) {

        /* WEBPACK VAR INJECTION */
        (function(global) {



            module.exports = global.Map = __webpack_require__(235);
            /* WEBPACK VAR INJECTION */
        }.call(exports, (function() {
            return this;
        }())))

        /***/
    },
    /* 235 */
    /***/
    function(module, exports, __webpack_require__) {

        __webpack_require__(236);
        __webpack_require__(256);
        __webpack_require__(282);
        __webpack_require__(286);
        module.exports = __webpack_require__(255).Map;

        /***/
    },
    /* 236 */
    /***/
    function(module, exports, __webpack_require__) {

        'use strict';

        var classof = __webpack_require__(237),
            test = {};
        test[__webpack_require__(239)('toStringTag')] = 'z';
        if (test + '' != '[object z]') {
            __webpack_require__(243)(Object.prototype, 'toString', function toString() {
                return '[object ' + classof(this) + ']';
            }, true);
        }

        /***/
    },
    /* 237 */
    /***/
    function(module, exports, __webpack_require__) {


        var cof = __webpack_require__(238),
            TAG = __webpack_require__(239)('toStringTag'),

            ARG = cof(function() {
                return arguments;
            }()) == 'Arguments';


        var tryGet = function tryGet(it, key) {
            try {
                return it[key];
            } catch (e) {}
        };

        module.exports = function(it) {
            var O, T, B;
            return it === undefined ? 'Undefined' : it === null ? 'Null' :

                typeof(T = tryGet(O = Object(it), TAG)) == 'string' ? T :

                ARG ? cof(O) :

                (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
        };

        /***/
    },
    /* 238 */
    /***/
    function(module, exports) {

        var toString = {}.toString;

        module.exports = function(it) {
            return toString.call(it).slice(8, -1);
        };

        /***/
    },
    /* 239 */
    /***/
    function(module, exports, __webpack_require__) {

        var store = __webpack_require__(240)('wks'),
            uid = __webpack_require__(242),
            Symbol = __webpack_require__(241).Symbol,
            USE_SYMBOL = typeof Symbol == 'function';

        var $exports = module.exports = function(name) {
            return store[name] || (store[name] =
                USE_SYMBOL && (typeof Symbol === 'function' ? Symbol[name] : '@@name') || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));
        };

        $exports.store = store;

        /***/
    },
    /* 240 */
    /***/
    function(module, exports, __webpack_require__) {

        var global = __webpack_require__(241),
            SHARED = '__core-js_shared__',
            store = global[SHARED] || (global[SHARED] = {});
        module.exports = function(key) {
            return store[key] || (store[key] = {});
        };

        /***/
    },
    /* 241 */
    /***/
    function(module, exports) {


        var global = module.exports = typeof window != 'undefined' && window.Math == Math ?
            window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();
        if (typeof __g == 'number') __g = global;

        /***/
    },
    /* 242 */
    /***/
    function(module, exports) {

        var id = 0,
            px = Math.random();
        module.exports = function(key) {
            return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
        };

        /***/
    },
    /* 243 */
    /***/
    function(module, exports, __webpack_require__) {

        var global = __webpack_require__(241),
            hide = __webpack_require__(244),
            has = __webpack_require__(254),
            SRC = __webpack_require__(242)('src'),
            TO_STRING = 'toString',
            $toString = Function[TO_STRING],
            TPL = ('' + $toString).split(TO_STRING);

        __webpack_require__(255).inspectSource = function(it) {
            return $toString.call(it);
        };

        (module.exports = function(O, key, val, safe) {
            var isFunction = typeof val == 'function';
            if (isFunction) has(val, 'name') || hide(val, 'name', key);
            if (O[key] === val) return;
            if (isFunction) has(val, SRC) || hide(val, SRC, O[key] ? '' + O[key] : TPL.join(String(key)));
            if (O === global) {
                O[key] = val;
            } else {
                if (!safe) {
                    delete O[key];
                    hide(O, key, val);
                } else {
                    if (O[key]) O[key] = val;
                    else
                        hide(O, key, val);
                }
            }

        })(Function.prototype, TO_STRING, function toString() {
            return typeof this == 'function' && this[SRC] || $toString.call(this);
        });

        /***/
    },
    /* 244 */
    /***/
    function(module, exports, __webpack_require__) {

        var dP = __webpack_require__(245),
            createDesc = __webpack_require__(253);
        module.exports = __webpack_require__(249) ? function(object, key, value) {
            return dP.f(object, key, createDesc(1, value));
        } : function(object, key, value) {
            object[key] = value;
            return object;
        };

        /***/
    },
    /* 245 */
    /***/
    function(module, exports, __webpack_require__) {

        var anObject = __webpack_require__(246),
            IE8_DOM_DEFINE = __webpack_require__(248),
            toPrimitive = __webpack_require__(252),
            dP = Object.defineProperty;

        exports.f = __webpack_require__(249) ? Object.defineProperty : function defineProperty(O, P, Attributes) {
            anObject(O);
            P = toPrimitive(P, true);
            anObject(Attributes);
            if (IE8_DOM_DEFINE) try {
                return dP(O, P, Attributes);
            } catch (e) {}
            if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');
            if ('value' in Attributes) O[P] = Attributes.value;
            return O;
        };

        /***/
    },
    /* 246 */
    /***/
    function(module, exports, __webpack_require__) {

        var isObject = __webpack_require__(247);
        module.exports = function(it) {
            if (!isObject(it)) throw TypeError(it + ' is not an object!');
            return it;
        };

        /***/
    },
    /* 247 */
    /***/
    function(module, exports) {

        module.exports = function(it) {
            return typeof it === 'object' ? it !== null : typeof it === 'function';
        };

        /***/
    },
    /* 248 */
    /***/
    function(module, exports, __webpack_require__) {

        module.exports = !__webpack_require__(249) && !__webpack_require__(250)(function() {
            return Object.defineProperty(__webpack_require__(251)('div'), 'a', {
                get: function get() {
                    return 7;
                }
            }).a != 7;
        });

        /***/
    },
    /* 249 */
    /***/
    function(module, exports, __webpack_require__) {


        module.exports = !__webpack_require__(250)(function() {
            return Object.defineProperty({}, 'a', {
                get: function get() {
                    return 7;
                }
            }).a != 7;
        });

        /***/
    },
    /* 250 */
    /***/
    function(module, exports) {

        module.exports = function(exec) {
            try {
                return !!exec();
            } catch (e) {
                return true;
            }
        };

        /***/
    },
    /* 251 */
    /***/
    function(module, exports, __webpack_require__) {

        var isObject = __webpack_require__(247),
            document = __webpack_require__(241).document,

            is = isObject(document) && isObject(document.createElement);
        module.exports = function(it) {
            return is ? document.createElement(it) : {};
        };

        /***/
    },
    /* 252 */
    /***/
    function(module, exports, __webpack_require__) {


        var isObject = __webpack_require__(247);


        module.exports = function(it, S) {
            if (!isObject(it)) return it;
            var fn, val;
            if (S && typeof(fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
            if (typeof(fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;
            if (!S && typeof(fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
            throw TypeError("Can't convert object to primitive value");
        };

        /***/
    },
    /* 253 */
    /***/
    function(module, exports) {

        module.exports = function(bitmap, value) {
            return {
                enumerable: !(bitmap & 1),
                configurable: !(bitmap & 2),
                writable: !(bitmap & 4),
                value: value
            };

        };

        /***/
    },
    /* 254 */
    /***/
    function(module, exports) {

        var hasOwnProperty = {}.hasOwnProperty;
        module.exports = function(it, key) {
            return hasOwnProperty.call(it, key);
        };

        /***/
    },
    /* 255 */
    /***/
    function(module, exports) {

        var core = module.exports = {
            version: '2.4.0'
        };
        if (typeof __e == 'number') __e = core;

        /***/
    },
    /* 256 */
    /***/
    function(module, exports, __webpack_require__) {

        'use strict';
        var $at = __webpack_require__(257)(true);


        __webpack_require__(260)(String, 'String', function(iterated) {
            this._t = String(iterated);
            this._i = 0;

        }, function() {
            var O = this._t,
                index = this._i,
                point;
            if (index >= O.length) return {
                value: undefined,
                done: true
            };
            point = $at(O, index);
            this._i += point.length;
            return {
                value: point,
                done: false
            };
        });

        /***/
    },
    /* 257 */
    /***/
    function(module, exports, __webpack_require__) {

        var toInteger = __webpack_require__(258),
            defined = __webpack_require__(259);


        module.exports = function(TO_STRING) {
            return function(that, pos) {
                var s = String(defined(that)),
                    i = toInteger(pos),
                    l = s.length,
                    a, b;
                if (i < 0 || i >= l) return TO_STRING ? '' : undefined;
                a = s.charCodeAt(i);
                return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff ?
                    TO_STRING ? s.charAt(i) : a :
                    TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
            };
        };

        /***/
    },
    /* 258 */
    /***/
    function(module, exports) {


        var ceil = Math.ceil,
            floor = Math.floor;
        module.exports = function(it) {
            return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
        };

        /***/
    },
    /* 259 */
    /***/
    function(module, exports) {


        module.exports = function(it) {
            if (it == undefined) throw TypeError("Can't call method on  " + it);
            return it;
        };

        /***/
    },
    /* 260 */
    /***/
    function(module, exports, __webpack_require__) {

        'use strict';
        var LIBRARY = __webpack_require__(261),
            $export = __webpack_require__(262),
            redefine = __webpack_require__(243),
            hide = __webpack_require__(244),
            has = __webpack_require__(254),
            Iterators = __webpack_require__(265),
            $iterCreate = __webpack_require__(266),
            setToStringTag = __webpack_require__(279),
            getPrototypeOf = __webpack_require__(280),
            ITERATOR = __webpack_require__(239)('iterator'),
            BUGGY = !([].keys && 'next' in [].keys()),
            FF_ITERATOR = '@@iterator',
            KEYS = 'keys',
            VALUES = 'values';

        var returnThis = function returnThis() {
            return this;
        };

        module.exports = function(Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {
            $iterCreate(Constructor, NAME, next);
            var getMethod = function getMethod(kind) {
                if (!BUGGY && kind in proto) return proto[kind];
                switch (kind) {
                    case KEYS:
                        return function keys() {
                            return new Constructor(this, kind);
                        };
                    case VALUES:
                        return function values() {
                            return new Constructor(this, kind);
                        };
                }
                return function entries() {
                    return new Constructor(this, kind);
                };
            };
            var TAG = NAME + ' Iterator',
                DEF_VALUES = DEFAULT == VALUES,
                VALUES_BUG = false,
                proto = Base.prototype,
                $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT],
                $default = $native || getMethod(DEFAULT),
                $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined,
                $anyNative = NAME == 'Array' ? proto.entries || $native : $native,
                methods, key, IteratorPrototype;

            if ($anyNative) {
                IteratorPrototype = getPrototypeOf($anyNative.call(new Base()));
                if (IteratorPrototype !== Object.prototype) {

                    setToStringTag(IteratorPrototype, TAG, true);

                    if (!LIBRARY && !has(IteratorPrototype, ITERATOR)) hide(IteratorPrototype, ITERATOR, returnThis);
                }
            }

            if (DEF_VALUES && $native && $native.name !== VALUES) {
                VALUES_BUG = true;
                $default = function values() {
                    return $native.call(this);
                };
            }

            if ((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {
                hide(proto, ITERATOR, $default);
            }

            Iterators[NAME] = $default;
            Iterators[TAG] = returnThis;
            if (DEFAULT) {
                methods = {
                    values: DEF_VALUES ? $default : getMethod(VALUES),
                    keys: IS_SET ? $default : getMethod(KEYS),
                    entries: $entries
                };

                if (FORCED)
                    for (key in methods) {
                        if (!(key in proto)) redefine(proto, key, methods[key]);
                    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
            }
            return methods;
        };

        /***/
    },
    /* 261 */
    /***/
    function(module, exports) {

        module.exports = false;

        /***/
    },
    /* 262 */
    /***/
    function(module, exports, __webpack_require__) {

        var global = __webpack_require__(241),
            core = __webpack_require__(255),
            hide = __webpack_require__(244),
            redefine = __webpack_require__(243),
            ctx = __webpack_require__(263),
            PROTOTYPE = 'prototype';

        var $export = function $export(type, name, source) {
            var IS_FORCED = type & $export.F,
                IS_GLOBAL = type & $export.G,
                IS_STATIC = type & $export.S,
                IS_PROTO = type & $export.P,
                IS_BIND = type & $export.B,
                target = IS_GLOBAL ? global : IS_STATIC ? global[name] || (global[name] = {}) : (global[name] || {})[PROTOTYPE],
                exports = IS_GLOBAL ? core : core[name] || (core[name] = {}),
                expProto = exports[PROTOTYPE] || (exports[PROTOTYPE] = {}),
                key, own, out, exp;
            if (IS_GLOBAL) source = name;
            for (key in source) {

                own = !IS_FORCED && target && target[key] !== undefined;

                out = (own ? target : source)[key];

                exp = IS_BIND && own ? ctx(out, global) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;

                if (target) redefine(target, key, out, type & $export.U);

                if (exports[key] != out) hide(exports, key, exp);
                if (IS_PROTO && expProto[key] != out) expProto[key] = out;
            }
        };
        global.core = core;

        $export.F = 1;
        $export.G = 2;
        $export.S = 4;
        $export.P = 8;
        $export.B = 16;
        $export.W = 32;
        $export.U = 64;
        $export.R = 128;
        module.exports = $export;

        /***/
    },
    /* 263 */
    /***/
    function(module, exports, __webpack_require__) {


        var aFunction = __webpack_require__(264);
        module.exports = function(fn, that, length) {
            aFunction(fn);
            if (that === undefined) return fn;
            switch (length) {
                case 1:
                    return function(a) {
                        return fn.call(that, a);
                    };
                case 2:
                    return function(a, b) {
                        return fn.call(that, a, b);
                    };
                case 3:
                    return function(a, b, c) {
                        return fn.call(that, a, b, c);
                    };
            }

            return function() {
                return fn.apply(that, arguments);
            };
        };

        /***/
    },
    /* 264 */
    /***/
    function(module, exports) {

        module.exports = function(it) {
            if (typeof it != 'function') throw TypeError(it + ' is not a function!');
            return it;
        };

        /***/
    },
    /* 265 */
    /***/
    function(module, exports) {

        module.exports = {};

        /***/
    },
    /* 266 */
    /***/
    function(module, exports, __webpack_require__) {

        'use strict';
        var create = __webpack_require__(267),
            descriptor = __webpack_require__(253),
            setToStringTag = __webpack_require__(279),
            IteratorPrototype = {};


        __webpack_require__(244)(IteratorPrototype, __webpack_require__(239)('iterator'), function() {
            return this;
        });

        module.exports = function(Constructor, NAME, next) {
            Constructor.prototype = create(IteratorPrototype, {
                next: descriptor(1, next)
            });
            setToStringTag(Constructor, NAME + ' Iterator');
        };

        /***/
    },
    /* 267 */
    /***/
    function(module, exports, __webpack_require__) {


        var anObject = __webpack_require__(246),
            dPs = __webpack_require__(268),
            enumBugKeys = __webpack_require__(277),
            IE_PROTO = __webpack_require__(276)('IE_PROTO'),
            Empty = function Empty() {},
            PROTOTYPE = 'prototype';


        var _createDict = function createDict() {

            var iframe = __webpack_require__(251)('iframe'),
                i = enumBugKeys.length,
                lt = '<',
                gt = '>',
                iframeDocument;
            iframe.style.display = 'none';
            __webpack_require__(278).appendChild(iframe);
            iframe.src = 'javascript:';


            iframeDocument = iframe.contentWindow.document;
            iframeDocument.open();
            iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
            iframeDocument.close();
            _createDict = iframeDocument.F;
            while (i--) {
                delete _createDict[PROTOTYPE][enumBugKeys[i]];
            }
            return _createDict();
        };

        module.exports = Object.create || function create(O, Properties) {
            var result;
            if (O !== null) {
                Empty[PROTOTYPE] = anObject(O);
                result = new Empty();
                Empty[PROTOTYPE] = null;

                result[IE_PROTO] = O;
            } else result = _createDict();
            return Properties === undefined ? result : dPs(result, Properties);
        };

        /***/
    },
    /* 268 */
    /***/
    function(module, exports, __webpack_require__) {

        var dP = __webpack_require__(245),
            anObject = __webpack_require__(246),
            getKeys = __webpack_require__(269);

        module.exports = __webpack_require__(249) ? Object.defineProperties : function defineProperties(O, Properties) {
            anObject(O);
            var keys = getKeys(Properties),
                length = keys.length,
                i = 0,
                P;
            while (length > i) {
                dP.f(O, P = keys[i++], Properties[P]);
            }
            return O;
        };

        /***/
    },
    /* 269 */
    /***/
    function(module, exports, __webpack_require__) {


        var $keys = __webpack_require__(270),
            enumBugKeys = __webpack_require__(277);

        module.exports = Object.keys || function keys(O) {
            return $keys(O, enumBugKeys);
        };

        /***/
    },
    /* 270 */
    /***/
    function(module, exports, __webpack_require__) {

        var has = __webpack_require__(254),
            toIObject = __webpack_require__(271),
            arrayIndexOf = __webpack_require__(273)(false),
            IE_PROTO = __webpack_require__(276)('IE_PROTO');

        module.exports = function(object, names) {
            var O = toIObject(object),
                i = 0,
                result = [],
                key;
            for (key in O) {
                if (key != IE_PROTO) has(O, key) && result.push(key);
            }

            while (names.length > i) {
                if (has(O, key = names[i++])) {
                    ~arrayIndexOf(result, key) || result.push(key);
                }
            }
            return result;
        };

        /***/
    },
    /* 271 */
    /***/
    function(module, exports, __webpack_require__) {


        var IObject = __webpack_require__(272),
            defined = __webpack_require__(259);
        module.exports = function(it) {
            return IObject(defined(it));
        };

        /***/
    },
    /* 272 */
    /***/
    function(module, exports, __webpack_require__) {


        var cof = __webpack_require__(238);
        module.exports = Object('z').propertyIsEnumerable(0) ? Object : function(it) {
            return cof(it) == 'String' ? it.split('') : Object(it);
        };

        /***/
    },
    /* 273 */
    /***/
    function(module, exports, __webpack_require__) {



        var toIObject = __webpack_require__(271),
            toLength = __webpack_require__(274),
            toIndex = __webpack_require__(275);
        module.exports = function(IS_INCLUDES) {
            return function($this, el, fromIndex) {
                var O = toIObject($this),
                    length = toLength(O.length),
                    index = toIndex(fromIndex, length),
                    value;

                if (IS_INCLUDES && el != el)
                    while (length > index) {
                        value = O[index++];
                        if (value != value) return true;

                    } else
                        for (; length > index; index++) {
                            if (IS_INCLUDES || index in O) {
                                if (O[index] === el) return IS_INCLUDES || index || 0;
                            }
                        }
                return !IS_INCLUDES && -1;
            };
        };

        /***/
    },
    /* 274 */
    /***/
    function(module, exports, __webpack_require__) {


        var toInteger = __webpack_require__(258),
            min = Math.min;
        module.exports = function(it) {
            return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0;
        };

        /***/
    },
    /* 275 */
    /***/
    function(module, exports, __webpack_require__) {

        var toInteger = __webpack_require__(258),
            max = Math.max,
            min = Math.min;
        module.exports = function(index, length) {
            index = toInteger(index);
            return index < 0 ? max(index + length, 0) : min(index, length);
        };

        /***/
    },
    /* 276 */
    /***/
    function(module, exports, __webpack_require__) {

        var shared = __webpack_require__(240)('keys'),
            uid = __webpack_require__(242);
        module.exports = function(key) {
            return shared[key] || (shared[key] = uid(key));
        };

        /***/
    },
    /* 277 */
    /***/
    function(module, exports) {


        module.exports =
            'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'.
        split(',');

        /***/
    },
    /* 278 */
    /***/
    function(module, exports, __webpack_require__) {

        module.exports = __webpack_require__(241).document && document.documentElement;

        /***/
    },
    /* 279 */
    /***/
    function(module, exports, __webpack_require__) {

        var def = __webpack_require__(245).f,
            has = __webpack_require__(254),
            TAG = __webpack_require__(239)('toStringTag');

        module.exports = function(it, tag, stat) {
            if (it && !has(it = stat ? it : it.prototype, TAG)) def(it, TAG, {
                configurable: true,
                value: tag
            });
        };

        /***/
    },
    /* 280 */
    /***/
    function(module, exports, __webpack_require__) {


        var has = __webpack_require__(254),
            toObject = __webpack_require__(281),
            IE_PROTO = __webpack_require__(276)('IE_PROTO'),
            ObjectProto = Object.prototype;

        module.exports = Object.getPrototypeOf || function(O) {
            O = toObject(O);
            if (has(O, IE_PROTO)) return O[IE_PROTO];
            if (typeof O.constructor == 'function' && O instanceof O.constructor) {
                return O.constructor.prototype;
            }
            return O instanceof Object ? ObjectProto : null;
        };

        /***/
    },
    /* 281 */
    /***/
    function(module, exports, __webpack_require__) {


        var defined = __webpack_require__(259);
        module.exports = function(it) {
            return Object(defined(it));
        };

        /***/
    },
    /* 282 */
    /***/
    function(module, exports, __webpack_require__) {

        var $iterators = __webpack_require__(283),
            redefine = __webpack_require__(243),
            global = __webpack_require__(241),
            hide = __webpack_require__(244),
            Iterators = __webpack_require__(265),
            wks = __webpack_require__(239),
            ITERATOR = wks('iterator'),
            TO_STRING_TAG = wks('toStringTag'),
            ArrayValues = Iterators.Array;

        for (var collections = ['NodeList', 'DOMTokenList', 'MediaList', 'StyleSheetList', 'CSSRuleList'], i = 0; i < 5; i++) {
            var NAME = collections[i],
                Collection = global[NAME],
                proto = Collection && Collection.prototype,
                key;
            if (proto) {
                if (!proto[ITERATOR]) hide(proto, ITERATOR, ArrayValues);
                if (!proto[TO_STRING_TAG]) hide(proto, TO_STRING_TAG, NAME);
                Iterators[NAME] = ArrayValues;
                for (key in $iterators) {
                    if (!proto[key]) redefine(proto, key, $iterators[key], true);
                }
            }
        }

        /***/
    },
    /* 283 */
    /***/
    function(module, exports, __webpack_require__) {

        'use strict';
        var addToUnscopables = __webpack_require__(284),
            step = __webpack_require__(285),
            Iterators = __webpack_require__(265),
            toIObject = __webpack_require__(271);



        module.exports = __webpack_require__(260)(Array, 'Array', function(iterated, kind) {
            this._t = toIObject(iterated);
            this._i = 0;
            this._k = kind;

        }, function() {
            var O = this._t,
                kind = this._k,
                index = this._i++;
            if (!O || index >= O.length) {
                this._t = undefined;
                return step(1);
            }
            if (kind == 'keys') return step(0, index);
            if (kind == 'values') return step(0, O[index]);
            return step(0, [index, O[index]]);
        }, 'values');


        Iterators.Arguments = Iterators.Array;

        addToUnscopables('keys');
        addToUnscopables('values');
        addToUnscopables('entries');

        /***/
    },
    /* 284 */
    /***/
    function(module, exports, __webpack_require__) {


        var UNSCOPABLES = __webpack_require__(239)('unscopables'),
            ArrayProto = Array.prototype;
        if (ArrayProto[UNSCOPABLES] == undefined) __webpack_require__(244)(ArrayProto, UNSCOPABLES, {});
        module.exports = function(key) {
            ArrayProto[UNSCOPABLES][key] = true;
        };

        /***/
    },
    /* 285 */
    /***/
    function(module, exports) {

        module.exports = function(done, value) {
            return {
                value: value,
                done: !!done
            };
        };

        /***/
    },
    /* 286 */
    /***/
    function(module, exports, __webpack_require__) {

        'use strict';
        var strong = __webpack_require__(287);


        module.exports = __webpack_require__(296)('Map', function(get) {
                return function Map() {
                    return get(this, arguments.length > 0 ? arguments[0] : undefined);
                };
            }, {

                get: function get(key) {
                    var entry = strong.getEntry(this, key);
                    return entry && entry.v;
                },

                set: function set(key, value) {
                    return strong.def(this, key === 0 ? 0 : key, value);
                }
            },
            strong, true);

        /***/
    },
    /* 287 */
    /***/
    function(module, exports, __webpack_require__) {

        'use strict';
        var dP = __webpack_require__(245).f,
            create = __webpack_require__(267),
            redefineAll = __webpack_require__(288),
            ctx = __webpack_require__(263),
            anInstance = __webpack_require__(289),
            defined = __webpack_require__(259),
            forOf = __webpack_require__(290),
            $iterDefine = __webpack_require__(260),
            step = __webpack_require__(285),
            setSpecies = __webpack_require__(294),
            DESCRIPTORS = __webpack_require__(249),
            fastKey = __webpack_require__(295).fastKey,
            SIZE = DESCRIPTORS ? '_s' : 'size';

        var getEntry = function getEntry(that, key) {

            var index = fastKey(key),
                entry;
            if (index !== 'F') return that._i[index];

            for (entry = that._f; entry; entry = entry.n) {
                if (entry.k == key) return entry;
            }
        };

        module.exports = {
            getConstructor: function getConstructor(wrapper, NAME, IS_MAP, ADDER) {
                var C = wrapper(function(that, iterable) {
                    anInstance(that, C, NAME, '_i');
                    that._i = create(null);
                    that._f = undefined;
                    that._l = undefined;
                    that[SIZE] = 0;
                    if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
                });
                redefineAll(C.prototype, {


                    clear: function clear() {
                        for (var that = this, data = that._i, entry = that._f; entry; entry = entry.n) {
                            entry.r = true;
                            if (entry.p) entry.p = entry.p.n = undefined;
                            delete data[entry.i];
                        }
                        that._f = that._l = undefined;
                        that[SIZE] = 0;
                    },


                    'delete': function _delete(key) {
                        var that = this,
                            entry = getEntry(that, key);
                        if (entry) {
                            var next = entry.n,
                                prev = entry.p;
                            delete that._i[entry.i];
                            entry.r = true;
                            if (prev) prev.n = next;
                            if (next) next.p = prev;
                            if (that._f == entry) that._f = next;
                            if (that._l == entry) that._l = prev;
                            that[SIZE]--;
                        }
                        return !!entry;
                    },


                    forEach: function forEach(callbackfn) {
                        anInstance(this, C, 'forEach');
                        var f = ctx(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3),
                            entry;
                        while (entry = entry ? entry.n : this._f) {
                            f(entry.v, entry.k, this);

                            while (entry && entry.r) {
                                entry = entry.p;
                            }
                        }
                    },


                    has: function has(key) {
                        return !!getEntry(this, key);
                    }
                });

                if (DESCRIPTORS) dP(C.prototype, 'size', {
                    get: function get() {
                        return defined(this[SIZE]);
                    }
                });

                return C;
            },
            def: function def(that, key, value) {
                var entry = getEntry(that, key),
                    prev, index;

                if (entry) {
                    entry.v = value;

                } else {
                    that._l = entry = {
                        i: index = fastKey(key, true),
                        k: key,
                        v: value,
                        p: prev = that._l,
                        n: undefined,
                        r: false
                    };

                    if (!that._f) that._f = entry;
                    if (prev) prev.n = entry;
                    that[SIZE]++;

                    if (index !== 'F') that._i[index] = entry;
                }
                return that;
            },
            getEntry: getEntry,
            setStrong: function setStrong(C, NAME, IS_MAP) {


                $iterDefine(C, NAME, function(iterated, kind) {
                    this._t = iterated;
                    this._k = kind;
                    this._l = undefined;
                }, function() {
                    var that = this,
                        kind = that._k,
                        entry = that._l;

                    while (entry && entry.r) {
                        entry = entry.p;
                    }

                    if (!that._t || !(that._l = entry = entry ? entry.n : that._t._f)) {

                        that._t = undefined;
                        return step(1);
                    }

                    if (kind == 'keys') return step(0, entry.k);
                    if (kind == 'values') return step(0, entry.v);
                    return step(0, [entry.k, entry.v]);
                }, IS_MAP ? 'entries' : 'values', !IS_MAP, true);


                setSpecies(NAME);
            }
        };

        /***/
    },
    /* 288 */
    /***/
    function(module, exports, __webpack_require__) {

        var redefine = __webpack_require__(243);
        module.exports = function(target, src, safe) {
            for (var key in src) {
                redefine(target, key, src[key], safe);
            }
            return target;
        };

        /***/
    },
    /* 289 */
    /***/
    function(module, exports) {

        module.exports = function(it, Constructor, name, forbiddenField) {
            if (!(it instanceof Constructor) || forbiddenField !== undefined && forbiddenField in it) {
                throw TypeError(name + ': incorrect invocation!');
            }
            return it;
        };

        /***/
    },
    /* 290 */
    /***/
    function(module, exports, __webpack_require__) {

        var ctx = __webpack_require__(263),
            call = __webpack_require__(291),
            isArrayIter = __webpack_require__(292),
            anObject = __webpack_require__(246),
            toLength = __webpack_require__(274),
            getIterFn = __webpack_require__(293),
            BREAK = {},
            RETURN = {};
        var _exports = module.exports = function(iterable, entries, fn, that, ITERATOR) {
            var iterFn = ITERATOR ? function() {
                    return iterable;
                } : getIterFn(iterable),
                f = ctx(fn, that, entries ? 2 : 1),
                index = 0,
                length, step, iterator, result;
            if (typeof iterFn != 'function') throw TypeError(iterable + ' is not iterable!');

            if (isArrayIter(iterFn))
                for (length = toLength(iterable.length); length > index; index++) {
                    result = entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);
                    if (result === BREAK || result === RETURN) return result;
                } else
                    for (iterator = iterFn.call(iterable); !(step = iterator.next()).done;) {
                        result = call(iterator, f, step.value, entries);
                        if (result === BREAK || result === RETURN) return result;
                    }
        };
        _exports.BREAK = BREAK;
        _exports.RETURN = RETURN;

        /***/
    },
    /* 291 */
    /***/
    function(module, exports, __webpack_require__) {


        var anObject = __webpack_require__(246);
        module.exports = function(iterator, fn, value, entries) {
            try {
                return entries ? fn(anObject(value)[0], value[1]) : fn(value);

            } catch (e) {
                var ret = iterator['return'];
                if (ret !== undefined) anObject(ret.call(iterator));
                throw e;
            }
        };

        /***/
    },
    /* 292 */
    /***/
    function(module, exports, __webpack_require__) {


        var Iterators = __webpack_require__(265),
            ITERATOR = __webpack_require__(239)('iterator'),
            ArrayProto = Array.prototype;

        module.exports = function(it) {
            return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);
        };

        /***/
    },
    /* 293 */
    /***/
    function(module, exports, __webpack_require__) {

        var classof = __webpack_require__(237),
            ITERATOR = __webpack_require__(239)('iterator'),
            Iterators = __webpack_require__(265);
        module.exports = __webpack_require__(255).getIteratorMethod = function(it) {
            if (it != undefined) return it[ITERATOR] ||
                it['@@iterator'] ||
                Iterators[classof(it)];
        };

        /***/
    },
    /* 294 */
    /***/
    function(module, exports, __webpack_require__) {

        'use strict';
        var global = __webpack_require__(241),
            dP = __webpack_require__(245),
            DESCRIPTORS = __webpack_require__(249),
            SPECIES = __webpack_require__(239)('species');

        module.exports = function(KEY) {
            var C = global[KEY];
            if (DESCRIPTORS && C && !C[SPECIES]) dP.f(C, SPECIES, {
                configurable: true,
                get: function get() {
                    return this;
                }
            });

        };

        /***/
    },
    /* 295 */
    /***/
    function(module, exports, __webpack_require__) {

        var META = __webpack_require__(242)('meta'),
            isObject = __webpack_require__(247),
            has = __webpack_require__(254),
            setDesc = __webpack_require__(245).f,
            id = 0;
        var isExtensible = Object.isExtensible || function() {
            return true;
        };
        var FREEZE = !__webpack_require__(250)(function() {
            return isExtensible(Object.preventExtensions({}));
        });
        var setMeta = function setMeta(it) {
            setDesc(it, META, {
                value: {
                    i: 'O' + ++id,
                    w: {}
                }
            });

        };
        var fastKey = function fastKey(it, create) {

            if (!isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
            if (!has(it, META)) {

                if (!isExtensible(it)) return 'F';

                if (!create) return 'E';

                setMeta(it);

            }
            return it[META].i;
        };
        var getWeak = function getWeak(it, create) {
            if (!has(it, META)) {

                if (!isExtensible(it)) return true;

                if (!create) return false;

                setMeta(it);

            }
            return it[META].w;
        };

        var onFreeze = function onFreeze(it) {
            if (FREEZE && meta.NEED && isExtensible(it) && !has(it, META)) setMeta(it);
            return it;
        };
        var meta = module.exports = {
            KEY: META,
            NEED: false,
            fastKey: fastKey,
            getWeak: getWeak,
            onFreeze: onFreeze
        };

        /***/
    },
    /* 296 */
    /***/
    function(module, exports, __webpack_require__) {

        'use strict';
        var global = __webpack_require__(241),
            $export = __webpack_require__(262),
            redefine = __webpack_require__(243),
            redefineAll = __webpack_require__(288),
            meta = __webpack_require__(295),
            forOf = __webpack_require__(290),
            anInstance = __webpack_require__(289),
            isObject = __webpack_require__(247),
            fails = __webpack_require__(250),
            $iterDetect = __webpack_require__(297),
            setToStringTag = __webpack_require__(279),
            inheritIfRequired = __webpack_require__(298);

        module.exports = function(NAME, wrapper, methods, common, IS_MAP, IS_WEAK) {
            var Base = global[NAME],
                C = Base,
                ADDER = IS_MAP ? 'set' : 'add',
                proto = C && C.prototype,
                O = {};
            var fixMethod = function fixMethod(KEY) {
                var fn = proto[KEY];
                redefine(proto, KEY,
                    KEY == 'delete' ? function(a) {
                        return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);
                    } : KEY == 'has' ? function has(a) {
                        return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);
                    } : KEY == 'get' ? function get(a) {
                        return IS_WEAK && !isObject(a) ? undefined : fn.call(this, a === 0 ? 0 : a);
                    } : KEY == 'add' ? function add(a) {
                        fn.call(this, a === 0 ? 0 : a);
                        return this;
                    } :
                    function set(a, b) {
                        fn.call(this, a === 0 ? 0 : a, b);
                        return this;
                    });

            };
            if (typeof C != 'function' || !(IS_WEAK || proto.forEach && !fails(function() {
                    new C().entries().next();
                }))) {

                C = common.getConstructor(wrapper, NAME, IS_MAP, ADDER);
                redefineAll(C.prototype, methods);
                meta.NEED = true;
            } else {
                var instance = new C(),

                    HASNT_CHAINING = instance[ADDER](IS_WEAK ? {} : -0, 1) != instance,

                    THROWS_ON_PRIMITIVES = fails(function() {
                        instance.has(1);
                    }),

                    ACCEPT_ITERABLES = $iterDetect(function(iter) {
                        new C(iter);
                    }),

                    BUGGY_ZERO = !IS_WEAK && fails(function() {

                        var $instance = new C(),
                            index = 5;
                        while (index--) {
                            $instance[ADDER](index, index);
                        }
                        return !$instance.has(-0);
                    });
                if (!ACCEPT_ITERABLES) {
                    C = wrapper(function(target, iterable) {
                        anInstance(target, C, NAME);
                        var that = inheritIfRequired(new Base(), target, C);
                        if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
                        return that;
                    });
                    C.prototype = proto;
                    proto.constructor = C;
                }
                if (THROWS_ON_PRIMITIVES || BUGGY_ZERO) {
                    fixMethod('delete');
                    fixMethod('has');
                    IS_MAP && fixMethod('get');
                }
                if (BUGGY_ZERO || HASNT_CHAINING) fixMethod(ADDER);

                if (IS_WEAK && proto.clear) delete proto.clear;
            }

            setToStringTag(C, NAME);

            O[NAME] = C;
            $export($export.G + $export.W + $export.F * (C != Base), O);

            if (!IS_WEAK) common.setStrong(C, NAME, IS_MAP);

            return C;
        };

        /***/
    },
    /* 297 */
    /***/
    function(module, exports, __webpack_require__) {

        var ITERATOR = __webpack_require__(239)('iterator'),
            SAFE_CLOSING = false;

        try {
            var riter = [7][ITERATOR]();
            riter['return'] = function() {
                SAFE_CLOSING = true;
            };
            Array.from(riter, function() {
                throw 2;
            });
        } catch (e) {}

        module.exports = function(exec, skipClosing) {
            if (!skipClosing && !SAFE_CLOSING) return false;
            var safe = false;
            try {
                var arr = [7],
                    iter = arr[ITERATOR]();
                iter.next = function() {
                    return {
                        done: safe = true
                    };
                };
                arr[ITERATOR] = function() {
                    return iter;
                };
                exec(arr);
            } catch (e) {}
            return safe;
        };

        /***/
    },
    /* 298 */
    /***/
    function(module, exports, __webpack_require__) {

        var isObject = __webpack_require__(247),
            setPrototypeOf = __webpack_require__(299).set;
        module.exports = function(that, target, C) {
            var P, S = target.constructor;
            if (S !== C && typeof S == 'function' && (P = S.prototype) !== C.prototype && isObject(P) && setPrototypeOf) {
                setPrototypeOf(that, P);
            }
            return that;
        };

        /***/
    },
    /* 299 */
    /***/
    function(module, exports, __webpack_require__) {



        var isObject = __webpack_require__(247),
            anObject = __webpack_require__(246);
        var check = function check(O, proto) {
            anObject(O);
            if (!isObject(proto) && proto !== null) throw TypeError(proto + ": can't set as prototype!");
        };
        module.exports = {
            set: Object.setPrototypeOf || ('__proto__' in {} ?
                function(test, buggy, set) {
                    try {
                        set = __webpack_require__(263)(Function.call, __webpack_require__(300).f(Object.prototype, '__proto__').set, 2);
                        set(test, []);
                        buggy = !(test instanceof Array);
                    } catch (e) {
                        buggy = true;
                    }
                    return function setPrototypeOf(O, proto) {
                        check(O, proto);
                        if (buggy) O.__proto__ = proto;
                        else
                            set(O, proto);
                        return O;
                    };
                }({}, false) : undefined),
            check: check
        };

        /***/
    },
    /* 300 */
    /***/
    function(module, exports, __webpack_require__) {

        var pIE = __webpack_require__(301),
            createDesc = __webpack_require__(253),
            toIObject = __webpack_require__(271),
            toPrimitive = __webpack_require__(252),
            has = __webpack_require__(254),
            IE8_DOM_DEFINE = __webpack_require__(248),
            gOPD = Object.getOwnPropertyDescriptor;

        exports.f = __webpack_require__(249) ? gOPD : function getOwnPropertyDescriptor(O, P) {
            O = toIObject(O);
            P = toPrimitive(P, true);
            if (IE8_DOM_DEFINE) try {
                return gOPD(O, P);
            } catch (e) {}
            if (has(O, P)) return createDesc(!pIE.f.call(O, P), O[P]);
        };

        /***/
    },
    /* 301 */
    /***/
    function(module, exports) {

        exports.f = {}.propertyIsEnumerable;

        /***/
    },
    /* 302 */
    /***/
    function(module, exports, __webpack_require__) {



        'use strict';
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor;
            };
        }();


        var _NavigationEventEmitter = __webpack_require__(303);
        var _NavigationEventEmitter2 = _interopRequireDefault(_NavigationEventEmitter);
        var _NavigationTreeNode = __webpack_require__(305);
        var _NavigationTreeNode2 = _interopRequireDefault(_NavigationTreeNode);
        var _emptyFunction = __webpack_require__(21);
        var _emptyFunction2 = _interopRequireDefault(_emptyFunction);
        var _invariant = __webpack_require__(19);
        var _invariant2 = _interopRequireDefault(_invariant);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
            }
        }
        var NavigationEvent = __webpack_require__(304);
        var



            AT_TARGET =


            NavigationEvent.AT_TARGET,
            BUBBLING_PHASE = NavigationEvent.BUBBLING_PHASE,
            CAPTURING_PHASE = NavigationEvent.CAPTURING_PHASE;
        var



            NavigationContext = function() {



            function NavigationContext() {
                _classCallCheck(this, NavigationContext);
                this._bubbleEventEmitter = new _NavigationEventEmitter2.default(this);
                this._captureEventEmitter = new _NavigationEventEmitter2.default(this);
                this._currentRoute = null;


                this.__node = new _NavigationTreeNode2.default(this);

                this._emitCounter = 0;
                this._emitQueue = [];

                this.addListener('willfocus', this._onFocus, this);
                this.addListener('didfocus', this._onFocus, this);
            }
            _createClass(NavigationContext, [{
                key: 'appendChild',
                value: function appendChild(



                    childContext) {
                    this.__node.appendChild(childContext.__node);
                }
            }, {
                key: 'addListener',
                value: function addListener(


                    eventType,
                    listener,
                    context,
                    useCapture) {
                    var emitter = useCapture ?
                        this._captureEventEmitter :
                        this._bubbleEventEmitter;
                    if (emitter) {
                        return emitter.addListener(eventType, listener, context);
                    } else {
                        return {
                            remove: _emptyFunction2.default
                        };
                    }
                }
            }, {
                key: 'emit',
                value: function emit(

                    eventType, data, didEmitCallback) {
                    var _this = this;
                    if (this._emitCounter > 0) {


                        var args = Array.prototype.slice.call(arguments);
                        this._emitQueue.push(args);
                        return;
                    }

                    this._emitCounter++;

                    var targets = [this];
                    var parentTarget = this.parent;
                    while (parentTarget) {
                        targets.unshift(parentTarget);
                        parentTarget = parentTarget.parent;
                    }

                    var propagationStopped = false;
                    var defaultPrevented = false;
                    var callback = function callback(event) {
                        propagationStopped = propagationStopped || event.isPropagationStopped();
                        defaultPrevented = defaultPrevented || event.defaultPrevented;
                    };


                    targets.some(function(currentTarget) {
                        if (propagationStopped) {
                            return true;
                        }

                        var extraInfo = {
                            defaultPrevented: defaultPrevented,
                            eventPhase: CAPTURING_PHASE,
                            propagationStopped: propagationStopped,
                            target: _this
                        };


                        currentTarget.__emit(eventType, data, callback, extraInfo);
                    }, this);


                    targets.reverse().some(function(currentTarget) {
                        if (propagationStopped) {
                            return true;
                        }
                        var extraInfo = {
                            defaultPrevented: defaultPrevented,
                            eventPhase: BUBBLING_PHASE,
                            propagationStopped: propagationStopped,
                            target: _this
                        };

                        currentTarget.__emit(eventType, data, callback, extraInfo);
                    }, this);

                    if (didEmitCallback) {
                        var event = NavigationEvent.pool(eventType, this, data);
                        propagationStopped && event.stopPropagation();
                        defaultPrevented && event.preventDefault();
                        didEmitCallback.call(this, event);
                        event.dispose();
                    }

                    this._emitCounter--;
                    while (this._emitQueue.length) {
                        var args = this._emitQueue.shift();
                        this.emit.apply(this, args);
                    }
                }
            }, {
                key: 'dispose',
                value: function dispose()

                {

                    this._bubbleEventEmitter && this._bubbleEventEmitter.removeAllListeners();
                    this._captureEventEmitter && this._captureEventEmitter.removeAllListeners();
                    this._bubbleEventEmitter = null;
                    this._captureEventEmitter = null;
                    this._currentRoute = null;
                }
            }, {
                key: '__emit',
                value: function __emit(



                    eventType,
                    data,
                    didEmitCallback,
                    extraInfo) {
                    var emitter;
                    switch (extraInfo.eventPhase) {
                        case CAPTURING_PHASE:
                            emitter = this._captureEventEmitter;
                            break;
                        case BUBBLING_PHASE:
                            emitter = this._bubbleEventEmitter;
                            break;
                        default:
                            (0, _invariant2.default)(false, 'invalid event phase %s', extraInfo.eventPhase);
                    }


                    if (extraInfo.target === this) {

                        extraInfo.eventPhase = AT_TARGET;
                    }

                    if (emitter) {
                        emitter.emit(
                            eventType,
                            data,
                            didEmitCallback,
                            extraInfo);

                    }
                }
            }, {
                key: '_onFocus',
                value: function _onFocus(

                    event) {
                    (0, _invariant2.default)(
                        event.data && event.data.hasOwnProperty('route'),
                        'didfocus event should provide route');

                    this._currentRoute = event.data.route;
                }
            }, {
                key: 'parent',
                get: function get() {
                    var parent = this.__node.getParent();
                    return parent ? parent.getValue() : null;
                }
            }, {
                key: 'currentRoute',
                get: function get() {
                    return this._currentRoute;
                }
            }]);
            return NavigationContext;
        }();


        module.exports = NavigationContext;

        /***/
    },
    /* 303 */
    /***/
    function(module, exports, __webpack_require__) {



        'use strict';
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor;
            };
        }();
        var _get = function get(object, property, receiver) {
            if (object === null) object = Function.prototype;
            var desc = Object.getOwnPropertyDescriptor(object, property);
            if (desc === undefined) {
                var parent = Object.getPrototypeOf(object);
                if (parent === null) {
                    return undefined;
                } else {
                    return get(parent, property, receiver);
                }
            } else if ("value" in desc) {
                return desc.value;
            } else {
                var getter = desc.get;
                if (getter === undefined) {
                    return undefined;
                }
                return getter.call(receiver);
            }
        };

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
            }
        }

        function _possibleConstructorReturn(self, call) {
            if (!self) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            }
            return call && (typeof call === "object" || typeof call === "function") ? call : self;
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
        }

        var EventEmitter = __webpack_require__(76);
        var NavigationEvent = __webpack_require__(304);
        var



            NavigationEventEmitter = function(_EventEmitter) {
            _inherits(NavigationEventEmitter, _EventEmitter);



            function NavigationEventEmitter(target) {
                _classCallCheck(this, NavigationEventEmitter);
                var _this = _possibleConstructorReturn(this, (NavigationEventEmitter.__proto__ || Object.getPrototypeOf(NavigationEventEmitter)).call(this));

                _this._emitting = false;
                _this._emitQueue = [];
                _this._target = target;
                return _this;
            }
            _createClass(NavigationEventEmitter, [{
                key: 'emit',
                value: function emit(


                    eventType,
                    data,
                    didEmitCallback,
                    extraInfo) {
                    if (this._emitting) {


                        var args = Array.prototype.slice.call(arguments);
                        this._emitQueue.unshift(args);
                        return;
                    }

                    this._emitting = true;

                    var event = NavigationEvent.pool(eventType, this._target, data);

                    if (extraInfo) {
                        if (extraInfo.target) {
                            event.target = extraInfo.target;
                        }

                        if (extraInfo.eventPhase) {
                            event.eventPhase = extraInfo.eventPhase;
                        }

                        if (extraInfo.defaultPrevented) {
                            event.preventDefault();
                        }

                        if (extraInfo.propagationStopped) {
                            event.stopPropagation();
                        }
                    }



                    _get(NavigationEventEmitter.prototype.__proto__ || Object.getPrototypeOf(NavigationEventEmitter.prototype), 'emit', this).call(this, String(eventType), event);

                    if (typeof didEmitCallback === 'function') {
                        didEmitCallback.call(this._target, event);
                    }
                    event.dispose();

                    this._emitting = false;

                    while (this._emitQueue.length) {
                        var args = this._emitQueue.shift();
                        this.emit.apply(this, args);
                    }
                }
            }]);
            return NavigationEventEmitter;
        }(EventEmitter);


        module.exports = NavigationEventEmitter;

        /***/
    },
    /* 304 */
    /***/
    function(module, exports, __webpack_require__) {



        'use strict';
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor;
            };
        }();

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
            }
        }

        var invariant = __webpack_require__(19);
        var

            NavigationEventPool = function() {


            function NavigationEventPool() {
                _classCallCheck(this, NavigationEventPool);
                this._list = [];
            }
            _createClass(NavigationEventPool, [{
                key: 'get',
                value: function get(

                    type, currentTarget, data) {
                    var event;
                    if (this._list.length > 0) {
                        event = this._list.pop();
                        event.constructor.call(event, type, currentTarget, data);
                    } else {
                        event = new NavigationEvent(type, currentTarget, data);
                    }
                    return event;
                }
            }, {
                key: 'put',
                value: function put(

                    event) {
                    this._list.push(event);
                }
            }]);
            return NavigationEventPool;
        }();


        var _navigationEventPool = new NavigationEventPool();
        var



            NavigationEvent = function() {
            _createClass(NavigationEvent, null, [{
                key: 'pool',
                value: function pool(



                    type, currentTarget, data) {
                    return _navigationEventPool.get(type, currentTarget, data);
                }
            }]);

            function NavigationEvent(type, currentTarget, data) {
                _classCallCheck(this, NavigationEvent);
                this.target = currentTarget;
                this.eventPhase = NavigationEvent.NONE;

                this._type = type;
                this._currentTarget = currentTarget;
                this._data = data;
                this._defaultPrevented = false;
                this._disposed = false;
                this._propagationStopped = false;
            }
            _createClass(NavigationEvent, [{
                key: 'preventDefault',
                value: function preventDefault()



                {
                    this._defaultPrevented = true;
                }
            }, {
                key: 'stopPropagation',
                value: function stopPropagation()

                {
                    this._propagationStopped = true;
                }
            }, {
                key: 'stop',
                value: function stop()

                {
                    this.preventDefault();
                    this.stopPropagation();
                }
            }, {
                key: 'isPropagationStopped',
                value: function isPropagationStopped()

                {
                    return this._propagationStopped;
                }
            }, {
                key: 'dispose',
                value: function dispose()



                {
                    invariant(!this._disposed, 'NavigationEvent is already disposed');
                    this._disposed = true;


                    this.target = null;
                    this.eventPhase = NavigationEvent.NONE;
                    this._type = null;
                    this._currentTarget = null;
                    this._data = null;
                    this._defaultPrevented = false;


                    _navigationEventPool.put(this);
                }
            }, {
                key: 'type',
                get: function get() {
                    return this._type;
                }
            }, {
                key: 'currentTarget',
                get: function get() {
                    return this._currentTarget;
                }
            }, {
                key: 'data',
                get: function get() {
                    return this._data;
                }
            }, {
                key: 'defaultPrevented',
                get: function get() {
                    return this._defaultPrevented;
                }
            }]);
            return NavigationEvent;
        }();



        NavigationEvent.NONE = 0;


        NavigationEvent.CAPTURING_PHASE = 1;



        NavigationEvent.AT_TARGET = 2;



        NavigationEvent.BUBBLING_PHASE = 3;

        module.exports = NavigationEvent;

        /***/
    },
    /* 305 */
    /***/
    function(module, exports, __webpack_require__) {



        'use strict';
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor;
            };
        }();

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
            }
        }



        var List = Array;

        var invariant = __webpack_require__(19);
        var



            NavigationTreeNode = function() {



            function NavigationTreeNode(value) {
                _classCallCheck(this, NavigationTreeNode);
                this.__parent = null;
                this._children = new List();
                this._value = value;
            }
            _createClass(NavigationTreeNode, [{
                key: 'getValue',
                value: function getValue()

                {
                    return this._value;
                }
            }, {
                key: 'getParent',
                value: function getParent()

                {
                    return this.__parent;
                }
            }, {
                key: 'getChildrenCount',
                value: function getChildrenCount()

                {
                    return this._children.size;
                }
            }, {
                key: 'getChildAt',
                value: function getChildAt(

                    index) {
                    return index > -1 && index < this._children.size ?
                        this._children.get(index) :
                        null;
                }
            }, {
                key: 'appendChild',
                value: function appendChild(

                    child) {
                    if (child.__parent) {
                        child.__parent.removeChild(child);
                    }
                    child.__parent = this;
                    this._children = this._children.push(child);
                }
            }, {
                key: 'removeChild',
                value: function removeChild(

                    child) {
                    var index = this._children.indexOf(child);

                    invariant(
                        index > -1,
                        'The node to be removed is not a child of this node.');


                    child.__parent = null;

                    this._children = this._children.splice(index, 1);
                }
            }, {
                key: 'indexOf',
                value: function indexOf(

                    child) {
                    return this._children.indexOf(child);
                }
            }, {
                key: 'forEach',
                value: function forEach(

                    callback, context) {
                    this._children.forEach(callback, context);
                }
            }, {
                key: 'map',
                value: function map(

                    callback, context) {
                    return this._children.map(callback, context).toJS();
                }
            }, {
                key: 'some',
                value: function some(

                    callback, context) {
                    return this._children.some(callback, context);
                }
            }]);
            return NavigationTreeNode;
        }();



        module.exports = NavigationTreeNode;

        /***/
    },
    /* 306 */
    /***/
    function(module, exports, __webpack_require__) {



        'use strict';
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor;
            };
        }();

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
            }
        }

        function _possibleConstructorReturn(self, call) {
            if (!self) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            }
            return call && (typeof call === "object" || typeof call === "function") ? call : self;
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
        }
        var React = __webpack_require__(10);
        var PropTypes = React.PropTypes;
        var NavigatorBreadcrumbNavigationBarStyles = __webpack_require__(307);
        var NavigatorNavigationBarStylesIOS = __webpack_require__(308);

        var Platform = __webpack_require__(311);
        var StyleSheet = __webpack_require__(39);
        var View = __webpack_require__(27);
        var Map = __webpack_require__(234);

        var invariant = __webpack_require__(19);
        var autobind = __webpack_require__(312);

        var Interpolators = NavigatorBreadcrumbNavigationBarStyles.Interpolators;
        var NavigatorNavigationBarStyles = NavigatorNavigationBarStylesIOS;



        var CRUMB_PROPS = Interpolators.map(function() {
            return {
                style: {}
            };
        });
        var ICON_PROPS = Interpolators.map(function() {
            return {
                style: {}
            };
        });
        var SEPARATOR_PROPS = Interpolators.map(function() {
            return {
                style: {}
            };
        });
        var TITLE_PROPS = Interpolators.map(function() {
            return {
                style: {}
            };
        });
        var RIGHT_BUTTON_PROPS = Interpolators.map(function() {
            return {
                style: {}
            };
        });


        var navStatePresentedIndex = function navStatePresentedIndex(navState) {
            if (navState.presentedIndex !== undefined) {
                return navState.presentedIndex;
            }

            return navState.observedTopOfStack;
        };



        var initStyle = function initStyle(index, presentedIndex) {
            return index === presentedIndex ? NavigatorBreadcrumbNavigationBarStyles.Center[index] :
                index < presentedIndex ? NavigatorBreadcrumbNavigationBarStyles.Left[index] :
                NavigatorBreadcrumbNavigationBarStyles.Right[index];
        };
        var

            NavigatorBreadcrumbNavigationBar = function(_React$Component) {
            _inherits(NavigatorBreadcrumbNavigationBar, _React$Component);

            function NavigatorBreadcrumbNavigationBar() {
                _classCallCheck(this, NavigatorBreadcrumbNavigationBar);
                return _possibleConstructorReturn(this, (NavigatorBreadcrumbNavigationBar.__proto__ || Object.getPrototypeOf(NavigatorBreadcrumbNavigationBar)).apply(this, arguments));
            }
            _createClass(NavigatorBreadcrumbNavigationBar, [{
                key: '_updateIndexProgress',
                value: function _updateIndexProgress(



                    progress, index, fromIndex, toIndex) {
                    var amount = toIndex > fromIndex ? progress : 1 - progress;
                    var oldDistToCenter = index - fromIndex;
                    var newDistToCenter = index - toIndex;
                    var interpolate;
                    invariant(
                        Interpolators[index],
                        'Cannot find breadcrumb interpolators for ' + index);

                    if (oldDistToCenter > 0 && newDistToCenter === 0 ||
                        newDistToCenter > 0 && oldDistToCenter === 0) {
                        interpolate = Interpolators[index].RightToCenter;
                    } else if (oldDistToCenter < 0 && newDistToCenter === 0 ||
                        newDistToCenter < 0 && oldDistToCenter === 0) {
                        interpolate = Interpolators[index].CenterToLeft;
                    } else if (oldDistToCenter === newDistToCenter) {
                        interpolate = Interpolators[index].RightToCenter;
                    } else {
                        interpolate = Interpolators[index].RightToLeft;
                    }

                    if (interpolate.Crumb(CRUMB_PROPS[index].style, amount)) {
                        this._setPropsIfExists('crumb_' + index, CRUMB_PROPS[index]);
                    }
                    if (interpolate.Icon(ICON_PROPS[index].style, amount)) {
                        this._setPropsIfExists('icon_' + index, ICON_PROPS[index]);
                    }
                    if (interpolate.Separator(SEPARATOR_PROPS[index].style, amount)) {
                        this._setPropsIfExists('separator_' + index, SEPARATOR_PROPS[index]);
                    }
                    if (interpolate.Title(TITLE_PROPS[index].style, amount)) {
                        this._setPropsIfExists('title_' + index, TITLE_PROPS[index]);
                    }
                    var right = this.refs['right_' + index];
                    if (right &&
                        interpolate.RightItem(RIGHT_BUTTON_PROPS[index].style, amount)) {
                        right.setNativeProps(RIGHT_BUTTON_PROPS[index]);
                    }
                }
            }, {
                key: 'updateProgress',
                value: function updateProgress(

                    progress, fromIndex, toIndex) {
                    var max = Math.max(fromIndex, toIndex);
                    var min = Math.min(fromIndex, toIndex);
                    for (var index = min; index <= max; index++) {
                        this._updateIndexProgress(progress, index, fromIndex, toIndex);
                    }
                }
            }, {
                key: 'onAnimationStart',
                value: function onAnimationStart(

                    fromIndex, toIndex) {
                    var max = Math.max(fromIndex, toIndex);
                    var min = Math.min(fromIndex, toIndex);
                    for (var index = min; index <= max; index++) {
                        this._setRenderViewsToHardwareTextureAndroid(index, true);
                    }
                }
            }, {
                key: 'onAnimationEnd',
                value: function onAnimationEnd()

                {
                    var max = this.props.navState.routeStack.length - 1;
                    for (var index = 0; index <= max; index++) {
                        this._setRenderViewsToHardwareTextureAndroid(index, false);
                    }
                }
            }, {
                key: '_setRenderViewsToHardwareTextureAndroid',
                value: function _setRenderViewsToHardwareTextureAndroid(

                    index, renderToHardwareTexture) {
                    var props = {
                        renderToHardwareTextureAndroid: renderToHardwareTexture
                    };


                    this._setPropsIfExists('icon_' + index, props);
                    this._setPropsIfExists('separator_' + index, props);
                    this._setPropsIfExists('title_' + index, props);
                    this._setPropsIfExists('right_' + index, props);
                }
            }, {
                key: 'componentWillMount',
                value: function componentWillMount()

                {
                    this._descriptors = {
                        crumb: new Map(),
                        title: new Map(),
                        right: new Map()
                    };

                }
            }, {
                key: 'render',
                value: function render()

                {
                    var navState = this.props.navState;
                    var icons = navState && navState.routeStack.map(this._getBreadcrumb);
                    var titles = navState.routeStack.map(this._getTitle);
                    var buttons = navState.routeStack.map(this._getRightButton);
                    return (
                        (this && this.createElement || React.createElement)(View, {
                                style: [styles.breadCrumbContainer, this.props.style]
                            },
                            titles,
                            icons,
                            buttons));


                }
            }, {
                key: '_getBreadcrumb',
                value: function _getBreadcrumb(

                    route, index) {
                    if (this._descriptors.crumb.has(route)) {
                        return this._descriptors.crumb.get(route);
                    }

                    var navBarRouteMapper = this.props.routeMapper;
                    var firstStyles = initStyle(index, navStatePresentedIndex(this.props.navState));

                    var breadcrumbDescriptor =
                        (this && this.createElement || React.createElement)(View, {
                                ref: 'crumb_' + index,
                                style: firstStyles.Crumb
                            },
                            (this && this.createElement || React.createElement)(View, {
                                    ref: 'icon_' + index,
                                    style: firstStyles.Icon
                                },
                                navBarRouteMapper.iconForRoute(route, this.props.navigator)),

                            (this && this.createElement || React.createElement)(View, {
                                    ref: 'separator_' + index,
                                    style: firstStyles.Separator
                                },
                                navBarRouteMapper.separatorForRoute(route, this.props.navigator)));



                    this._descriptors.crumb = this._descriptors.crumb.set(route, breadcrumbDescriptor);
                    return breadcrumbDescriptor;
                }
            }, {
                key: '_getTitle',
                value: function _getTitle(

                    route, index) {
                    if (this._descriptors.title.has(route)) {
                        return this._descriptors.title.get(route);
                    }

                    var titleContent = this.props.routeMapper.titleContentForRoute(
                        this.props.navState.routeStack[index],
                        this.props.navigator);

                    var firstStyles = initStyle(index, navStatePresentedIndex(this.props.navState));

                    var titleDescriptor =
                        (this && this.createElement || React.createElement)(View, {
                                ref: 'title_' + index,
                                style: firstStyles.Title
                            },
                            titleContent);


                    this._descriptors.title = this._descriptors.title.set(route, titleDescriptor);
                    return titleDescriptor;
                }
            }, {
                key: '_getRightButton',
                value: function _getRightButton(

                    route, index) {
                    if (this._descriptors.right.has(route)) {
                        return this._descriptors.right.get(route);
                    }
                    var rightContent = this.props.routeMapper.rightContentForRoute(
                        this.props.navState.routeStack[index],
                        this.props.navigator);

                    if (!rightContent) {
                        this._descriptors.right = this._descriptors.right.set(route, null);
                        return null;
                    }
                    var firstStyles = initStyle(index, navStatePresentedIndex(this.props.navState));
                    var rightButtonDescriptor =
                        (this && this.createElement || React.createElement)(View, {
                                ref: 'right_' + index,
                                style: firstStyles.RightItem
                            },
                            rightContent);


                    this._descriptors.right = this._descriptors.right.set(route, rightButtonDescriptor);
                    return rightButtonDescriptor;
                }
            }, {
                key: '_setPropsIfExists',
                value: function _setPropsIfExists(

                    ref, props) {
                    var ref = this.refs[ref];
                    ref && ref.setNativeProps(props);
                }
            }]);
            return NavigatorBreadcrumbNavigationBar;
        }(React.Component);
        NavigatorBreadcrumbNavigationBar.propTypes = {
            navigator: PropTypes.shape({
                push: PropTypes.func,
                pop: PropTypes.func,
                replace: PropTypes.func,
                popToRoute: PropTypes.func,
                popToTop: PropTypes.func
            }),
            routeMapper: PropTypes.shape({
                rightContentForRoute: PropTypes.func,
                titleContentForRoute: PropTypes.func,
                iconForRoute: PropTypes.func
            }),
            navState: React.PropTypes.shape({
                routeStack: React.PropTypes.arrayOf(React.PropTypes.object),
                presentedIndex: React.PropTypes.number
            }),
            style: View.propTypes.style
        };
        NavigatorBreadcrumbNavigationBar.statics = {
            Styles: NavigatorBreadcrumbNavigationBarStyles
        };

        ;

        var styles = StyleSheet.create({
            breadCrumbContainer: {
                overflow: 'hidden',
                position: 'absolute',
                height: NavigatorNavigationBarStyles.General.TotalNavHeight,
                top: 0,
                left: 0,
                right: 0
            }
        });



        autobind(NavigatorBreadcrumbNavigationBar);

        module.exports = NavigatorBreadcrumbNavigationBar;

        /***/
    },
    /* 307 */
    /***/
    function(module, exports, __webpack_require__) {



        'use strict';


        var Dimensions = __webpack_require__(52);
        var NavigatorNavigationBarStylesIOS = __webpack_require__(308);
        var buildStyleInterpolator = __webpack_require__(309);
        var merge = __webpack_require__(310);

        var SCREEN_WIDTH = Dimensions.get('window').width;
        var STATUS_BAR_HEIGHT = NavigatorNavigationBarStylesIOS.General.StatusBarHeight;
        var NAV_BAR_HEIGHT = NavigatorNavigationBarStylesIOS.General.NavBarHeight;

        var SPACING = 4;
        var ICON_WIDTH = 40;
        var SEPARATOR_WIDTH = 9;
        var CRUMB_WIDTH = ICON_WIDTH + SEPARATOR_WIDTH;

        var OPACITY_RATIO = 100;
        var ICON_INACTIVE_OPACITY = 0.6;
        var MAX_BREADCRUMBS = 10;

        var CRUMB_BASE = {
            position: 'absolute',
            flexDirection: 'row',
            top: STATUS_BAR_HEIGHT,
            width: CRUMB_WIDTH,
            height: NAV_BAR_HEIGHT,
            backgroundColor: 'transparent'
        };


        var ICON_BASE = {
            width: ICON_WIDTH,
            height: NAV_BAR_HEIGHT
        };


        var SEPARATOR_BASE = {
            width: SEPARATOR_WIDTH,
            height: NAV_BAR_HEIGHT
        };


        var TITLE_BASE = {
            position: 'absolute',
            top: STATUS_BAR_HEIGHT,
            height: NAV_BAR_HEIGHT,
            backgroundColor: 'transparent'
        };



        var FIRST_TITLE_BASE = merge(TITLE_BASE, {
            left: 0,
            right: 0,
            alignItems: 'center',
            height: NAV_BAR_HEIGHT
        });


        var RIGHT_BUTTON_BASE = {
            position: 'absolute',
            top: STATUS_BAR_HEIGHT,
            right: SPACING,
            overflow: 'hidden',
            opacity: 1,
            height: NAV_BAR_HEIGHT,
            backgroundColor: 'transparent'
        };



        var LEFT = [];
        var CENTER = [];
        var RIGHT = [];
        for (var i = 0; i < MAX_BREADCRUMBS; i++) {
            var crumbLeft = CRUMB_WIDTH * i + SPACING;
            LEFT[i] = {
                Crumb: merge(CRUMB_BASE, {
                    left: crumbLeft
                }),
                Icon: merge(ICON_BASE, {
                    opacity: ICON_INACTIVE_OPACITY
                }),
                Separator: merge(SEPARATOR_BASE, {
                    opacity: 1
                }),
                Title: merge(TITLE_BASE, {
                    left: crumbLeft,
                    opacity: 0
                }),
                RightItem: merge(RIGHT_BUTTON_BASE, {
                    opacity: 0
                })
            };

            CENTER[i] = {
                Crumb: merge(CRUMB_BASE, {
                    left: crumbLeft
                }),
                Icon: merge(ICON_BASE, {
                    opacity: 1
                }),
                Separator: merge(SEPARATOR_BASE, {
                    opacity: 0
                }),
                Title: merge(TITLE_BASE, {
                    left: crumbLeft + ICON_WIDTH,
                    opacity: 1
                }),

                RightItem: merge(RIGHT_BUTTON_BASE, {
                    opacity: 1
                })
            };

            var crumbRight = SCREEN_WIDTH - 100;
            RIGHT[i] = {
                Crumb: merge(CRUMB_BASE, {
                    left: crumbRight
                }),
                Icon: merge(ICON_BASE, {
                    opacity: 0
                }),
                Separator: merge(SEPARATOR_BASE, {
                    opacity: 0
                }),
                Title: merge(TITLE_BASE, {
                    left: crumbRight + ICON_WIDTH,
                    opacity: 0
                }),

                RightItem: merge(RIGHT_BUTTON_BASE, {
                    opacity: 0
                })
            };

        }


        CENTER[0] = {
            Crumb: merge(CRUMB_BASE, {
                left: SCREEN_WIDTH / 4
            }),
            Icon: merge(ICON_BASE, {
                opacity: 0
            }),
            Separator: merge(SEPARATOR_BASE, {
                opacity: 0
            }),
            Title: merge(FIRST_TITLE_BASE, {
                opacity: 1
            }),
            RightItem: CENTER[0].RightItem
        };

        LEFT[0].Title = merge(FIRST_TITLE_BASE, {
            left: -SCREEN_WIDTH / 4,
            opacity: 0
        });
        RIGHT[0].Title = merge(FIRST_TITLE_BASE, {
            opacity: 0
        });


        var buildIndexSceneInterpolator = function buildIndexSceneInterpolator(startStyles, endStyles) {
            return {
                Crumb: buildStyleInterpolator({
                    left: {
                        type: 'linear',
                        from: startStyles.Crumb.left,
                        to: endStyles.Crumb.left,
                        min: 0,
                        max: 1,
                        extrapolate: true
                    }
                }),


                Icon: buildStyleInterpolator({
                    opacity: {
                        type: 'linear',
                        from: startStyles.Icon.opacity,
                        to: endStyles.Icon.opacity,
                        min: 0,
                        max: 1
                    }
                }),


                Separator: buildStyleInterpolator({
                    opacity: {
                        type: 'linear',
                        from: startStyles.Separator.opacity,
                        to: endStyles.Separator.opacity,
                        min: 0,
                        max: 1
                    }
                }),


                Title: buildStyleInterpolator({
                    opacity: {
                        type: 'linear',
                        from: startStyles.Title.opacity,
                        to: endStyles.Title.opacity,
                        min: 0,
                        max: 1
                    },

                    left: {
                        type: 'linear',
                        from: startStyles.Title.left,
                        to: endStyles.Title.left,
                        min: 0,
                        max: 1,
                        extrapolate: true
                    }
                }),


                RightItem: buildStyleInterpolator({
                    opacity: {
                        type: 'linear',
                        from: startStyles.RightItem.opacity,
                        to: endStyles.RightItem.opacity,
                        min: 0,
                        max: 1,
                        round: OPACITY_RATIO
                    }
                })
            };



        };

        var Interpolators = CENTER.map(function(_, ii) {
            return {

                RightToCenter: buildIndexSceneInterpolator(RIGHT[ii], CENTER[ii]),

                CenterToLeft: buildIndexSceneInterpolator(CENTER[ii], LEFT[ii]),

                RightToLeft: buildIndexSceneInterpolator(RIGHT[ii], LEFT[ii])
            };

        });



        module.exports = {
            Interpolators: Interpolators,
            Left: LEFT,
            Center: CENTER,
            Right: RIGHT,
            IconWidth: ICON_WIDTH,
            IconHeight: NAV_BAR_HEIGHT,
            SeparatorWidth: SEPARATOR_WIDTH,
            SeparatorHeight: NAV_BAR_HEIGHT
        };

        /***/
    },
    /* 308 */
    /***/
    function(module, exports, __webpack_require__) {



        'use strict';

        var Dimensions = __webpack_require__(52);
        var buildStyleInterpolator = __webpack_require__(309);
        var merge = __webpack_require__(310);

        var SCREEN_WIDTH = Dimensions.get('window').width;
        var NAV_BAR_HEIGHT = 44;
        var STATUS_BAR_HEIGHT = 20;
        var NAV_HEIGHT = NAV_BAR_HEIGHT + STATUS_BAR_HEIGHT;

        var BASE_STYLES = {
            Title: {
                position: 'absolute',
                top: STATUS_BAR_HEIGHT,
                left: 0,
                right: 0,
                alignItems: 'center',
                height: NAV_BAR_HEIGHT,
                backgroundColor: 'transparent'
            },

            LeftButton: {
                position: 'absolute',
                top: STATUS_BAR_HEIGHT,
                left: 0,
                overflow: 'hidden',
                opacity: 1,
                height: NAV_BAR_HEIGHT,
                backgroundColor: 'transparent'
            },

            RightButton: {
                position: 'absolute',
                top: STATUS_BAR_HEIGHT,
                right: 0,
                overflow: 'hidden',
                opacity: 1,
                alignItems: 'flex-end',
                height: NAV_BAR_HEIGHT,
                backgroundColor: 'transparent'
            }
        };



        var Stages = {
            Left: {
                Title: merge(BASE_STYLES.Title, {
                    left: -SCREEN_WIDTH / 2,
                    opacity: 0
                }),
                LeftButton: merge(BASE_STYLES.LeftButton, {
                    left: -SCREEN_WIDTH / 3,
                    opacity: 1
                }),
                RightButton: merge(BASE_STYLES.RightButton, {
                    left: SCREEN_WIDTH / 3,
                    opacity: 0
                })
            },

            Center: {
                Title: merge(BASE_STYLES.Title, {
                    left: 0,
                    opacity: 1
                }),
                LeftButton: merge(BASE_STYLES.LeftButton, {
                    left: 0,
                    opacity: 1
                }),
                RightButton: merge(BASE_STYLES.RightButton, {
                    left: 2 * SCREEN_WIDTH / 3 - 0,
                    opacity: 1
                })
            },

            Right: {
                Title: merge(BASE_STYLES.Title, {
                    left: SCREEN_WIDTH / 2,
                    opacity: 0
                }),
                LeftButton: merge(BASE_STYLES.LeftButton, {
                    left: 0,
                    opacity: 0
                }),
                RightButton: merge(BASE_STYLES.RightButton, {
                    left: SCREEN_WIDTH,
                    opacity: 0
                })
            }
        };



        var opacityRatio = 100;

        function buildSceneInterpolators(startStyles, endStyles) {
            return {
                Title: buildStyleInterpolator({
                    opacity: {
                        type: 'linear',
                        from: startStyles.Title.opacity,
                        to: endStyles.Title.opacity,
                        min: 0,
                        max: 1
                    },

                    left: {
                        type: 'linear',
                        from: startStyles.Title.left,
                        to: endStyles.Title.left,
                        min: 0,
                        max: 1,
                        extrapolate: true
                    }
                }),


                LeftButton: buildStyleInterpolator({
                    opacity: {
                        type: 'linear',
                        from: startStyles.LeftButton.opacity,
                        to: endStyles.LeftButton.opacity,
                        min: 0,
                        max: 1,
                        round: opacityRatio
                    },

                    left: {
                        type: 'linear',
                        from: startStyles.LeftButton.left,
                        to: endStyles.LeftButton.left,
                        min: 0,
                        max: 1
                    }
                }),


                RightButton: buildStyleInterpolator({
                    opacity: {
                        type: 'linear',
                        from: startStyles.RightButton.opacity,
                        to: endStyles.RightButton.opacity,
                        min: 0,
                        max: 1,
                        round: opacityRatio
                    },

                    left: {
                        type: 'linear',
                        from: startStyles.RightButton.left,
                        to: endStyles.RightButton.left,
                        min: 0,
                        max: 1,
                        extrapolate: true
                    }
                })
            };



        }

        var Interpolators = {

            RightToCenter: buildSceneInterpolators(Stages.Right, Stages.Center),

            CenterToLeft: buildSceneInterpolators(Stages.Center, Stages.Left),

            RightToLeft: buildSceneInterpolators(Stages.Right, Stages.Left)
        };



        module.exports = {
            General: {
                NavBarHeight: NAV_BAR_HEIGHT,
                StatusBarHeight: STATUS_BAR_HEIGHT,
                TotalNavHeight: NAV_HEIGHT
            },

            Interpolators: Interpolators,
            Stages: Stages
        };

        /***/
    },
    /* 309 */
    /***/
    function(module, exports, __webpack_require__) {



        var keyOf = __webpack_require__(223);

        var X_DIM = keyOf({
            x: null
        });
        var Y_DIM = keyOf({
            y: null
        });
        var Z_DIM = keyOf({
            z: null
        });
        var W_DIM = keyOf({
            w: null
        });

        var TRANSFORM_ROTATE_NAME = keyOf({
            transformRotateRadians: null
        });

        var ShouldAllocateReusableOperationVars = {
            transformRotateRadians: true,
            transformScale: true,
            transformTranslate: true
        };


        var InitialOperationField = {
            transformRotateRadians: [0, 0, 0, 1],
            transformTranslate: [0, 0, 0],
            transformScale: [1, 1, 1]
        };



        var ARGUMENT_NAMES_RE = /([^\s,]+)/g;



        var inline = function inline(func, replaceWithArgs) {
            var fnStr = func.toString();
            var parameterNames = fnStr.slice(fnStr.indexOf('(') + 1, fnStr.indexOf(')')).
            match(ARGUMENT_NAMES_RE) || [];
            var replaceRegexStr = parameterNames.map(function(paramName) {
                return '\\b' + paramName + '\\b';
            }).join('|');
            var replaceRegex = new RegExp(replaceRegexStr, 'g');
            var fnBody = fnStr.substring(fnStr.indexOf('{') + 1, fnStr.lastIndexOf('}'));
            var newFnBody = fnBody.replace(replaceRegex, function(parameterName) {
                var indexInParameterNames = parameterNames.indexOf(parameterName);
                var replacementName = replaceWithArgs[indexInParameterNames];
                return replacementName;
            });
            return newFnBody.split('\n');
        };



        var MatrixOps = {
            unroll: function unroll(matVar, m0, m1, m2, m3, m4, m5, m6, m7, m8, m9, m10, m11, m12, m13, m14, m15) {
                m0 = matVar[0];
                m1 = matVar[1];
                m2 = matVar[2];
                m3 = matVar[3];
                m4 = matVar[4];
                m5 = matVar[5];
                m6 = matVar[6];
                m7 = matVar[7];
                m8 = matVar[8];
                m9 = matVar[9];
                m10 = matVar[10];
                m11 = matVar[11];
                m12 = matVar[12];
                m13 = matVar[13];
                m14 = matVar[14];
                m15 = matVar[15];
            },

            matrixDiffers: function matrixDiffers(retVar, matVar, m0, m1, m2, m3, m4, m5, m6, m7, m8, m9, m10, m11, m12, m13, m14, m15) {
                retVar = retVar ||
                    m0 !== matVar[0] ||
                    m1 !== matVar[1] ||
                    m2 !== matVar[2] ||
                    m3 !== matVar[3] ||
                    m4 !== matVar[4] ||
                    m5 !== matVar[5] ||
                    m6 !== matVar[6] ||
                    m7 !== matVar[7] ||
                    m8 !== matVar[8] ||
                    m9 !== matVar[9] ||
                    m10 !== matVar[10] ||
                    m11 !== matVar[11] ||
                    m12 !== matVar[12] ||
                    m13 !== matVar[13] ||
                    m14 !== matVar[14] ||
                    m15 !== matVar[15];
            },

            transformScale: function transformScale(matVar, opVar) {

                var x = opVar[0];
                var y = opVar[1];
                var z = opVar[2];
                matVar[0] = matVar[0] * x;
                matVar[1] = matVar[1] * x;
                matVar[2] = matVar[2] * x;
                matVar[3] = matVar[3] * x;
                matVar[4] = matVar[4] * y;
                matVar[5] = matVar[5] * y;
                matVar[6] = matVar[6] * y;
                matVar[7] = matVar[7] * y;
                matVar[8] = matVar[8] * z;
                matVar[9] = matVar[9] * z;
                matVar[10] = matVar[10] * z;
                matVar[11] = matVar[11] * z;
                matVar[12] = matVar[12];
                matVar[13] = matVar[13];
                matVar[14] = matVar[14];
                matVar[15] = matVar[15];
            },



            transformTranslate: function transformTranslate(matVar, opVar) {

                var x = opVar[0];
                var y = opVar[1];
                var z = opVar[2];
                matVar[12] = matVar[0] * x + matVar[4] * y + matVar[8] * z + matVar[12];
                matVar[13] = matVar[1] * x + matVar[5] * y + matVar[9] * z + matVar[13];
                matVar[14] = matVar[2] * x + matVar[6] * y + matVar[10] * z + matVar[14];
                matVar[15] = matVar[3] * x + matVar[7] * y + matVar[11] * z + matVar[15];
            },



            transformRotateRadians: function transformRotateRadians(matVar, q) {

                var xQuat = q[0],
                    yQuat = q[1],
                    zQuat = q[2],
                    wQuat = q[3];
                var x2Quat = xQuat + xQuat;
                var y2Quat = yQuat + yQuat;
                var z2Quat = zQuat + zQuat;
                var xxQuat = xQuat * x2Quat;
                var xyQuat = xQuat * y2Quat;
                var xzQuat = xQuat * z2Quat;
                var yyQuat = yQuat * y2Quat;
                var yzQuat = yQuat * z2Quat;
                var zzQuat = zQuat * z2Quat;
                var wxQuat = wQuat * x2Quat;
                var wyQuat = wQuat * y2Quat;
                var wzQuat = wQuat * z2Quat;

                var quatMat0 = 1 - (yyQuat + zzQuat);
                var quatMat1 = xyQuat + wzQuat;
                var quatMat2 = xzQuat - wyQuat;
                var quatMat4 = xyQuat - wzQuat;
                var quatMat5 = 1 - (xxQuat + zzQuat);
                var quatMat6 = yzQuat + wxQuat;
                var quatMat8 = xzQuat + wyQuat;
                var quatMat9 = yzQuat - wxQuat;
                var quatMat10 = 1 - (xxQuat + yyQuat);



                var a00 = matVar[0];
                var a01 = matVar[1];
                var a02 = matVar[2];
                var a03 = matVar[3];
                var a10 = matVar[4];
                var a11 = matVar[5];
                var a12 = matVar[6];
                var a13 = matVar[7];
                var a20 = matVar[8];
                var a21 = matVar[9];
                var a22 = matVar[10];
                var a23 = matVar[11];

                var b0 = quatMat0,
                    b1 = quatMat1,
                    b2 = quatMat2;
                matVar[0] = b0 * a00 + b1 * a10 + b2 * a20;
                matVar[1] = b0 * a01 + b1 * a11 + b2 * a21;
                matVar[2] = b0 * a02 + b1 * a12 + b2 * a22;
                matVar[3] = b0 * a03 + b1 * a13 + b2 * a23;
                b0 = quatMat4;
                b1 = quatMat5;
                b2 = quatMat6;
                matVar[4] = b0 * a00 + b1 * a10 + b2 * a20;
                matVar[5] = b0 * a01 + b1 * a11 + b2 * a21;
                matVar[6] = b0 * a02 + b1 * a12 + b2 * a22;
                matVar[7] = b0 * a03 + b1 * a13 + b2 * a23;
                b0 = quatMat8;
                b1 = quatMat9;
                b2 = quatMat10;
                matVar[8] = b0 * a00 + b1 * a10 + b2 * a20;
                matVar[9] = b0 * a01 + b1 * a11 + b2 * a21;
                matVar[10] = b0 * a02 + b1 * a12 + b2 * a22;
                matVar[11] = b0 * a03 + b1 * a13 + b2 * a23;
            }
        };



        var MatrixOpsInitial = {
            transformScale: function transformScale(matVar, opVar) {

                matVar[0] = opVar[0];
                matVar[1] = 0;
                matVar[2] = 0;
                matVar[3] = 0;
                matVar[4] = 0;
                matVar[5] = opVar[1];
                matVar[6] = 0;
                matVar[7] = 0;
                matVar[8] = 0;
                matVar[9] = 0;
                matVar[10] = opVar[2];
                matVar[11] = 0;
                matVar[12] = 0;
                matVar[13] = 0;
                matVar[14] = 0;
                matVar[15] = 1;
            },

            transformTranslate: function transformTranslate(matVar, opVar) {

                matVar[0] = 1;
                matVar[1] = 0;
                matVar[2] = 0;
                matVar[3] = 0;
                matVar[4] = 0;
                matVar[5] = 1;
                matVar[6] = 0;
                matVar[7] = 0;
                matVar[8] = 0;
                matVar[9] = 0;
                matVar[10] = 1;
                matVar[11] = 0;
                matVar[12] = opVar[0];
                matVar[13] = opVar[1];
                matVar[14] = opVar[2];
                matVar[15] = 1;
            },



            transformRotateRadians: function transformRotateRadians(matVar, q) {


                var xQuat = q[0],
                    yQuat = q[1],
                    zQuat = q[2],
                    wQuat = q[3];
                var x2Quat = xQuat + xQuat;
                var y2Quat = yQuat + yQuat;
                var z2Quat = zQuat + zQuat;
                var xxQuat = xQuat * x2Quat;
                var xyQuat = xQuat * y2Quat;
                var xzQuat = xQuat * z2Quat;
                var yyQuat = yQuat * y2Quat;
                var yzQuat = yQuat * z2Quat;
                var zzQuat = zQuat * z2Quat;
                var wxQuat = wQuat * x2Quat;
                var wyQuat = wQuat * y2Quat;
                var wzQuat = wQuat * z2Quat;

                var quatMat0 = 1 - (yyQuat + zzQuat);
                var quatMat1 = xyQuat + wzQuat;
                var quatMat2 = xzQuat - wyQuat;
                var quatMat4 = xyQuat - wzQuat;
                var quatMat5 = 1 - (xxQuat + zzQuat);
                var quatMat6 = yzQuat + wxQuat;
                var quatMat8 = xzQuat + wyQuat;
                var quatMat9 = yzQuat - wxQuat;
                var quatMat10 = 1 - (xxQuat + yyQuat);



                var b0 = quatMat0,
                    b1 = quatMat1,
                    b2 = quatMat2;
                matVar[0] = b0;
                matVar[1] = b1;
                matVar[2] = b2;
                matVar[3] = 0;
                b0 = quatMat4;
                b1 = quatMat5;
                b2 = quatMat6;
                matVar[4] = b0;
                matVar[5] = b1;
                matVar[6] = b2;
                matVar[7] = 0;
                b0 = quatMat8;
                b1 = quatMat9;
                b2 = quatMat10;
                matVar[8] = b0;
                matVar[9] = b1;
                matVar[10] = b2;
                matVar[11] = 0;
                matVar[12] = 0;
                matVar[13] = 0;
                matVar[14] = 0;
                matVar[15] = 1;
            }
        };



        var setNextValAndDetectChange = function setNextValAndDetectChange(name, tmpVarName) {
            return (
                '  if (!didChange) {\n' +
                '    var prevVal = result.' + name + ';\n' +
                '    result.' + name + ' = ' + tmpVarName + ';\n' +
                '    didChange = didChange  || (' + tmpVarName + ' !== prevVal);\n' +
                '  } else {\n' +
                '    result.' + name + ' = ' + tmpVarName + ';\n' +
                '  }\n');

        };

        var computeNextValLinear = function computeNextValLinear(anim, from, to, tmpVarName) {
            var hasRoundRatio = 'round' in anim;
            var roundRatio = anim.round;
            var fn = '  ratio = (value - ' + anim.min + ') / ' + (anim.max - anim.min) + ';\n';
            if (!anim.extrapolate) {
                fn += '  ratio = ratio > 1 ? 1 : (ratio < 0 ? 0 : ratio);\n';
            }

            var roundOpen = hasRoundRatio ? 'Math.round(' + roundRatio + ' * ' : '';
            var roundClose = hasRoundRatio ? ') / ' + roundRatio : '';
            fn +=
                '  ' + tmpVarName + ' = ' +
                roundOpen +
                '(' + from + ' * (1 - ratio) + ' + to + ' * ratio)' +
                roundClose + ';\n';
            return fn;
        };

        var computeNextValLinearScalar = function computeNextValLinearScalar(anim) {
            return computeNextValLinear(anim, anim.from, anim.to, 'nextScalarVal');
        };

        var computeNextValConstant = function computeNextValConstant(anim) {
            var constantExpression = JSON.stringify(anim.value);
            return '  nextScalarVal = ' + constantExpression + ';\n';
        };

        var computeNextValStep = function computeNextValStep(anim) {
            return (
                '  nextScalarVal = value >= ' + (
                    anim.threshold + ' ? ' + anim.to + ' : ' + anim.from) + ';\n');

        };

        var computeNextValIdentity = function computeNextValIdentity(anim) {
            return '  nextScalarVal = value;\n';
        };

        var operationVar = function operationVar(name) {
            return name + 'ReuseOp';
        };

        var createReusableOperationVars = function createReusableOperationVars(anims) {
            var ret = '';
            for (var name in anims) {
                if (ShouldAllocateReusableOperationVars[name]) {
                    ret += 'var ' + operationVar(name) + ' = [];\n';
                }
            }
            return ret;
        };

        var newlines = function newlines(statements) {
            return '\n' + statements.join('\n') + '\n';
        };



        var computeNextMatrixOperationField = function computeNextMatrixOperationField(anim, name, dimension, index) {
            var fieldAccess = operationVar(name) + '[' + index + ']';
            if (anim.from[dimension] !== undefined && anim.to[dimension] !== undefined) {
                return '  ' + anim.from[dimension] !== anim.to[dimension] ?
                    computeNextValLinear(anim, anim.from[dimension], anim.to[dimension], fieldAccess) :
                    fieldAccess + ' = ' + anim.from[dimension] + ';';
            } else {
                return '  ' + fieldAccess + ' = ' + InitialOperationField[name][index] + ';';
            }
        };

        var unrolledVars = [];
        for (var varIndex = 0; varIndex < 16; varIndex++) {
            unrolledVars.push('m' + varIndex);
        }
        var setNextMatrixAndDetectChange = function setNextMatrixAndDetectChange(orderedMatrixOperations) {
            var fn = [
                '  var transformMatrix = result.transformMatrix !== undefined ? ' +
                'result.transformMatrix : (result.transformMatrix = []);'
            ];

            fn.push.apply(
                fn,
                inline(MatrixOps.unroll, ['transformMatrix'].concat(unrolledVars)));

            for (var i = 0; i < orderedMatrixOperations.length; i++) {
                var opName = orderedMatrixOperations[i];
                if (i === 0) {
                    fn.push.apply(
                        fn,
                        inline(MatrixOpsInitial[opName], ['transformMatrix', operationVar(opName)]));

                } else {
                    fn.push.apply(
                        fn,
                        inline(MatrixOps[opName], ['transformMatrix', operationVar(opName)]));

                }
            }
            fn.push.apply(
                fn,
                inline(MatrixOps.matrixDiffers, ['didChange', 'transformMatrix'].concat(unrolledVars)));

            return fn;
        };

        var InterpolateMatrix = {
            transformTranslate: true,
            transformRotateRadians: true,
            transformScale: true
        };


        var createFunctionString = function createFunctionString(anims) {


            var orderedMatrixOperations = [];



            var fn = 'return (function() {\n';
            fn += createReusableOperationVars(anims);
            fn += 'return function(result, value) {\n';
            fn += '  var didChange = false;\n';
            fn += '  var nextScalarVal;\n';
            fn += '  var ratio;\n';

            for (var name in anims) {
                var anim = anims[name];
                if (anim.type === 'linear') {
                    if (InterpolateMatrix[name]) {
                        orderedMatrixOperations.push(name);
                        var setOperations = [
                            computeNextMatrixOperationField(anim, name, X_DIM, 0),
                            computeNextMatrixOperationField(anim, name, Y_DIM, 1),
                            computeNextMatrixOperationField(anim, name, Z_DIM, 2)
                        ];

                        if (name === TRANSFORM_ROTATE_NAME) {
                            setOperations.push(computeNextMatrixOperationField(anim, name, W_DIM, 3));
                        }
                        fn += newlines(setOperations);
                    } else {
                        fn += computeNextValLinearScalar(anim, 'nextScalarVal');
                        fn += setNextValAndDetectChange(name, 'nextScalarVal');
                    }
                } else if (anim.type === 'constant') {
                    fn += computeNextValConstant(anim);
                    fn += setNextValAndDetectChange(name, 'nextScalarVal');
                } else if (anim.type === 'step') {
                    fn += computeNextValStep(anim);
                    fn += setNextValAndDetectChange(name, 'nextScalarVal');
                } else if (anim.type === 'identity') {
                    fn += computeNextValIdentity(anim);
                    fn += setNextValAndDetectChange(name, 'nextScalarVal');
                }
            }
            if (orderedMatrixOperations.length) {
                fn += newlines(setNextMatrixAndDetectChange(orderedMatrixOperations));
            }
            fn += '  return didChange;\n';
            fn += '};\n';
            fn += '})()';
            return fn;
        };



        var buildStyleInterpolator = function buildStyleInterpolator(anims) {
            return Function(createFunctionString(anims))();
        };


        module.exports = buildStyleInterpolator;

        /***/
    },
    /* 310 */
    /***/
    function(module, exports) {

        'use strict';
        var _extends = Object.assign || function(target) {
            for (var i = 1; i < arguments.length; i++) {
                var source = arguments[i];
                for (var key in source) {
                    if (Object.prototype.hasOwnProperty.call(source, key)) {
                        target[key] = source[key];
                    }
                }
            }
            return target;
        };

        function merge(one, two) {
            return _extends({}, one, two);
        }

        module.exports = merge;

        /***/
    },
    /* 311 */
    /***/
    function(module, exports) {



        'use strict';

        var Platform = {
            OS: 'web',
            UA: navigator.userAgent,
            get Version() {
                return Platform.UA;
            },
            select: function select(obj) {
                return obj && obj.web;
            }
        };


        module.exports = Platform;

        /***/
    },
    /* 312 */
    /***/
    function(module, exports) {



        'use strict';

        Object.defineProperty(exports, '__esModule', {
            value: true
        });

        exports['default'] = autobind;

        function autobind() {
            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
            }

            if (args.length === 1) {
                return boundClass.apply(undefined, args);
            } else {
                return boundMethod.apply(undefined, args);
            }
        }



        function boundClass(target) {

            var keys = undefined;

            if (typeof Reflect !== 'undefined' && typeof Reflect.ownKeys === 'function') {
                keys = Reflect.ownKeys(target.prototype);
            } else {
                keys = Object.getOwnPropertyNames(target.prototype);

                if (typeof Object.getOwnPropertySymbols === 'function') {
                    keys = keys.concat(Object.getOwnPropertySymbols(target.prototype));
                }
            }

            keys.forEach(function(key) {

                if (key === 'constructor') {
                    return;
                }

                var descriptor = Object.getOwnPropertyDescriptor(target.prototype, key);


                if (typeof descriptor.value === 'function') {
                    Object.defineProperty(target.prototype, key, boundMethod(target, key, descriptor));
                }
            });
            return target;
        }



        function boundMethod(target, key, descriptor) {
            var fn = descriptor.value;

            if (typeof fn !== 'function') {
                throw new Error('@autobind decorator can only be applied to methods not: ' + typeof fn);
            }



            var definingProperty = false;

            return {
                configurable: true,
                get: function get() {
                    if (definingProperty || this === target.prototype || this.hasOwnProperty(key)) {
                        return fn;
                    }

                    var boundFn = fn.bind(this);
                    definingProperty = true;
                    Object.defineProperty(this, key, {
                        value: boundFn,
                        configurable: true,
                        writable: true
                    });

                    definingProperty = false;
                    return boundFn;
                }
            };

        }
        module.exports = exports['default'];

        /***/
    },
    /* 313 */
    /***/
    function(module, exports, __webpack_require__) {



        'use strict';
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor;
            };
        }();

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
            }
        }

        function _possibleConstructorReturn(self, call) {
            if (!self) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            }
            return call && (typeof call === "object" || typeof call === "function") ? call : self;
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
        }

        var React = __webpack_require__(10);
        var PropTypes = React.PropTypes;
        var NavigatorNavigationBarStylesIOS = __webpack_require__(308);
        var Platform = __webpack_require__(311);
        var StyleSheet = __webpack_require__(39);
        var View = __webpack_require__(27);
        var Map = __webpack_require__(234);
        var invariant = __webpack_require__(19);
        var autobind = __webpack_require__(312);

        var COMPONENT_NAMES = ['Title', 'LeftButton', 'RightButton'];

        var NavigatorNavigationBarStyles = NavigatorNavigationBarStylesIOS;

        var navStatePresentedIndex = function navStatePresentedIndex(navState) {
            if (navState.presentedIndex !== undefined) {
                return navState.presentedIndex;
            }

            return navState.observedTopOfStack;
        };
        var



            NavigatorNavigationBar = function(_React$Component) {
            _inherits(NavigatorNavigationBar, _React$Component);

            function NavigatorNavigationBar(props) {
                _classCallCheck(this, NavigatorNavigationBar);
                var _this = _possibleConstructorReturn(this, (NavigatorNavigationBar.__proto__ || Object.getPrototypeOf(NavigatorNavigationBar)).call(this,
                    props));

                _this._components = {};
                _this._descriptors = {};

                COMPONENT_NAMES.forEach(function(componentName) {
                    _this._components[componentName] = new Map();
                    _this._descriptors[componentName] = new Map();
                });
                return _this;

            }
            _createClass(NavigatorNavigationBar, [{
                key: '_getReusableProps',
                value: function _getReusableProps(



                    componentName,
                    index) {
                    if (!this._reusableProps) {
                        this._reusableProps = {};
                    }
                    var propStack = this._reusableProps[componentName];
                    if (!propStack) {
                        propStack = this._reusableProps[componentName] = [];
                    }
                    var props = propStack[index];
                    if (!props) {
                        props = propStack[index] = {
                            style: {}
                        };
                    }
                    return props;
                }
            }, {
                key: '_updateIndexProgress',
                value: function _updateIndexProgress(


                    progress,
                    index,
                    fromIndex,
                    toIndex) {
                    var amount = toIndex > fromIndex ? progress : 1 - progress;
                    var oldDistToCenter = index - fromIndex;
                    var newDistToCenter = index - toIndex;
                    var interpolate;
                    if (oldDistToCenter > 0 && newDistToCenter === 0 ||
                        newDistToCenter > 0 && oldDistToCenter === 0) {
                        interpolate = this.props.navigationStyles.Interpolators.RightToCenter;
                    } else if (oldDistToCenter < 0 && newDistToCenter === 0 ||
                        newDistToCenter < 0 && oldDistToCenter === 0) {
                        interpolate = this.props.navigationStyles.Interpolators.CenterToLeft;
                    } else if (oldDistToCenter === newDistToCenter) {
                        interpolate = this.props.navigationStyles.Interpolators.RightToCenter;
                    } else {
                        interpolate = this.props.navigationStyles.Interpolators.RightToLeft;
                    }

                    COMPONENT_NAMES.forEach(function(componentName) {
                        var component = this._components[componentName].get(this.props.navState.routeStack[index]);
                        var props = this._getReusableProps(componentName, index);
                        if (component && interpolate[componentName](props.style, amount)) {
                            component.setNativeProps(props);
                        }
                    }, this);
                }
            }, {
                key: 'updateProgress',
                value: function updateProgress(


                    progress,
                    fromIndex,
                    toIndex) {
                    var max = Math.max(fromIndex, toIndex);
                    var min = Math.min(fromIndex, toIndex);
                    for (var index = min; index <= max; index++) {
                        this._updateIndexProgress(progress, index, fromIndex, toIndex);
                    }
                }
            }, {
                key: 'render',
                value: function render()

                {
                    var navBarStyle = {
                        height: this.props.navigationStyles.General.TotalNavHeight
                    };

                    var navState = this.props.navState;
                    var components = COMPONENT_NAMES.map(function(componentName) {
                        return navState.routeStack.map(
                            this._getComponent.bind(this, componentName));

                    }, this);

                    return (
                        (this && this.createElement || React.createElement)(View, {
                                style: [styles.navBarContainer, navBarStyle, this.props.style]
                            },
                            components));


                }
            }, {
                key: '_getComponent',
                value: function _getComponent(


                    componentName,
                    route,
                    index) {
                    var _this2 = this;
                    if (this._descriptors[componentName].includes(route)) {
                        return this._descriptors[componentName].get(route);
                    }

                    var rendered = null;

                    var content = this.props.routeMapper[componentName](
                        this.props.navState.routeStack[index],
                        this.props.navigator,
                        index,
                        this.props.navState);

                    if (!content) {
                        return null;
                    }

                    var initialStage = index === navStatePresentedIndex(this.props.navState) ?
                        this.props.navigationStyles.Stages.Center :
                        this.props.navigationStyles.Stages.Left;
                    rendered =
                        (this && this.createElement || React.createElement)(View, {
                                ref: function ref(_ref) {
                                    _this2._components[componentName] = _this2._components[componentName].set(route, _ref);
                                },
                                style: initialStage[componentName]
                            },
                            content);



                    this._descriptors[componentName] = this._descriptors[componentName].set(route, rendered);
                    return rendered;
                }
            }]);
            return NavigatorNavigationBar;
        }(React.Component);
        NavigatorNavigationBar.propTypes = {
            navigator: PropTypes.object,
            routeMapper: PropTypes.shape({
                Title: PropTypes.func.isRequired,
                LeftButton: PropTypes.func.isRequired,
                RightButton: PropTypes.func.isRequired
            }).isRequired,
            navState: PropTypes.shape({
                routeStack: PropTypes.arrayOf(PropTypes.object),
                presentedIndex: PropTypes.number
            }),
            navigationStyles: PropTypes.object,
            style: View.propTypes.style
        };
        NavigatorNavigationBar.statics = {
            Styles: NavigatorNavigationBarStyles,
            StylesIOS: NavigatorNavigationBarStylesIOS
        };
        NavigatorNavigationBar.defaultProps = {
            navigationStyles: NavigatorNavigationBarStyles
        };

        ;


        var styles = StyleSheet.create({
            navBarContainer: {
                position: 'absolute',
                top: 0,
                left: 0,
                right: 0,
                backgroundColor: 'transparent'
            }
        });



        autobind(NavigatorNavigationBar);

        module.exports = NavigatorNavigationBar;

        /***/
    },
    /* 314 */
    /***/
    function(module, exports, __webpack_require__) {



        'use strict';
        var _extends = Object.assign || function(target) {
            for (var i = 1; i < arguments.length; i++) {
                var source = arguments[i];
                for (var key in source) {
                    if (Object.prototype.hasOwnProperty.call(source, key)) {
                        target[key] = source[key];
                    }
                }
            }
            return target;
        };

        var Dimensions = __webpack_require__(52);
        var PixelRatio = __webpack_require__(51);
        var buildStyleInterpolator = __webpack_require__(309);

        var SCREEN_WIDTH = Dimensions.get('window').width;
        var SCREEN_HEIGHT = Dimensions.get('window').height;

        var FadeToTheLeft = {


            transformTranslate: {
                from: {
                    x: 0,
                    y: 0,
                    z: 0
                },
                to: {
                    x: -Math.round(Dimensions.get('window').width * 0.3),
                    y: 0,
                    z: 0
                },
                min: 0,
                max: 1,
                type: 'linear',
                extrapolate: true,
                round: PixelRatio.get()
            },



            transformScale: {
                from: {
                    x: 1,
                    y: 1,
                    z: 1
                },
                to: {
                    x: 0.95,
                    y: 0.95,
                    z: 1
                },
                min: 0,
                max: 1,
                type: 'linear',
                extrapolate: true
            },

            opacity: {
                from: 1,
                to: 0.3,
                min: 0,
                max: 1,
                type: 'linear',
                extrapolate: false,
                round: 100
            },

            translateX: {
                from: 0,
                to: -Math.round(Dimensions.get('window').width * 0.3),
                min: 0,
                max: 1,
                type: 'linear',
                extrapolate: true,
                round: PixelRatio.get()
            },

            scaleX: {
                from: 1,
                to: 0.95,
                min: 0,
                max: 1,
                type: 'linear',
                extrapolate: true
            },

            scaleY: {
                from: 1,
                to: 0.95,
                min: 0,
                max: 1,
                type: 'linear',
                extrapolate: true
            }
        };



        var FadeToTheRight = _extends({},
            FadeToTheLeft, {
                transformTranslate: {
                    from: {
                        x: 0,
                        y: 0,
                        z: 0
                    },
                    to: {
                        x: Math.round(SCREEN_WIDTH * 0.3),
                        y: 0,
                        z: 0
                    }
                },

                translateX: {
                    from: 0,
                    to: Math.round(SCREEN_WIDTH * 0.3)
                }
            });



        var FadeIn = {
            opacity: {
                from: 0,
                to: 1,
                min: 0.5,
                max: 1,
                type: 'linear',
                extrapolate: false,
                round: 100
            }
        };



        var FadeOut = {
            opacity: {
                from: 1,
                to: 0,
                min: 0,
                max: 0.5,
                type: 'linear',
                extrapolate: false,
                round: 100
            }
        };



        var ToTheLeft = {
            transformTranslate: {
                from: {
                    x: 0,
                    y: 0,
                    z: 0
                },
                to: {
                    x: -Dimensions.get('window').width,
                    y: 0,
                    z: 0
                },
                min: 0,
                max: 1,
                type: 'linear',
                extrapolate: true,
                round: PixelRatio.get()
            },

            opacity: {
                value: 1.0,
                type: 'constant'
            },


            translateX: {
                from: 0,
                to: -Dimensions.get('window').width,
                min: 0,
                max: 1,
                type: 'linear',
                extrapolate: true,
                round: PixelRatio.get()
            }
        };



        var ToTheUp = {
            transformTranslate: {
                from: {
                    x: 0,
                    y: 0,
                    z: 0
                },
                to: {
                    x: 0,
                    y: -Dimensions.get('window').height,
                    z: 0
                },
                min: 0,
                max: 1,
                type: 'linear',
                extrapolate: true,
                round: PixelRatio.get()
            },

            opacity: {
                value: 1.0,
                type: 'constant'
            },

            translateY: {
                from: 0,
                to: -Dimensions.get('window').height,
                min: 0,
                max: 1,
                type: 'linear',
                extrapolate: true,
                round: PixelRatio.get()
            }
        };



        var ToTheDown = {
            transformTranslate: {
                from: {
                    x: 0,
                    y: 0,
                    z: 0
                },
                to: {
                    x: 0,
                    y: Dimensions.get('window').height,
                    z: 0
                },
                min: 0,
                max: 1,
                type: 'linear',
                extrapolate: true,
                round: PixelRatio.get()
            },

            opacity: {
                value: 1.0,
                type: 'constant'
            },

            translateY: {
                from: 0,
                to: Dimensions.get('window').height,
                min: 0,
                max: 1,
                type: 'linear',
                extrapolate: true,
                round: PixelRatio.get()
            }
        };



        var FromTheRight = {
            opacity: {
                value: 1.0,
                type: 'constant'
            },


            transformTranslate: {
                from: {
                    x: Dimensions.get('window').width,
                    y: 0,
                    z: 0
                },
                to: {
                    x: 0,
                    y: 0,
                    z: 0
                },
                min: 0,
                max: 1,
                type: 'linear',
                extrapolate: true,
                round: PixelRatio.get()
            },


            translateX: {
                from: Dimensions.get('window').width,
                to: 0,
                min: 0,
                max: 1,
                type: 'linear',
                extrapolate: true,
                round: PixelRatio.get()
            },


            scaleX: {
                value: 1,
                type: 'constant'
            },

            scaleY: {
                value: 1,
                type: 'constant'
            }
        };



        var FromTheLeft = _extends({},
            FromTheRight, {
                transformTranslate: {
                    from: {
                        x: -SCREEN_WIDTH,
                        y: 0,
                        z: 0
                    },
                    to: {
                        x: 0,
                        y: 0,
                        z: 0
                    },
                    min: 0,
                    max: 1,
                    type: 'linear',
                    extrapolate: true,
                    round: PixelRatio.get()
                },

                translateX: {
                    from: -SCREEN_WIDTH,
                    to: 0,
                    min: 0,
                    max: 1,
                    type: 'linear',
                    extrapolate: true,
                    round: PixelRatio.get()
                }
            });



        var FromTheDown = _extends({},
            FromTheRight, {
                transformTranslate: {
                    from: {
                        y: SCREEN_HEIGHT,
                        x: 0,
                        z: 0
                    },
                    to: {
                        x: 0,
                        y: 0,
                        z: 0
                    },
                    min: 0,
                    max: 1,
                    type: 'linear',
                    extrapolate: true,
                    round: PixelRatio.get()
                },

                translateY: {
                    from: SCREEN_HEIGHT,
                    to: 0,
                    min: 0,
                    max: 1,
                    type: 'linear',
                    extrapolate: true,
                    round: PixelRatio.get()
                }
            });



        var FromTheTop = _extends({},
            FromTheRight, {
                transformTranslate: {
                    from: {
                        y: -SCREEN_HEIGHT,
                        x: 0,
                        z: 0
                    },
                    to: {
                        x: 0,
                        y: 0,
                        z: 0
                    },
                    min: 0,
                    max: 1,
                    type: 'linear',
                    extrapolate: true,
                    round: PixelRatio.get()
                },

                translateY: {
                    from: -SCREEN_HEIGHT,
                    to: 0,
                    min: 0,
                    max: 1,
                    type: 'linear',
                    extrapolate: true,
                    round: PixelRatio.get()
                }
            });



        var ToTheBack = {


            transformTranslate: {
                from: {
                    x: 0,
                    y: 0,
                    z: 0
                },
                to: {
                    x: 0,
                    y: 0,
                    z: 0
                },
                min: 0,
                max: 1,
                type: 'linear',
                extrapolate: true,
                round: PixelRatio.get()
            },

            transformScale: {
                from: {
                    x: 1,
                    y: 1,
                    z: 1
                },
                to: {
                    x: 0.95,
                    y: 0.95,
                    z: 1
                },
                min: 0,
                max: 1,
                type: 'linear',
                extrapolate: true
            },

            opacity: {
                from: 1,
                to: 0.3,
                min: 0,
                max: 1,
                type: 'linear',
                extrapolate: false,
                round: 100
            },

            scaleX: {
                from: 1,
                to: 0.95,
                min: 0,
                max: 1,
                type: 'linear',
                extrapolate: true
            },

            scaleY: {
                from: 1,
                to: 0.95,
                min: 0,
                max: 1,
                type: 'linear',
                extrapolate: true
            }
        };



        var FromTheFront = {
            opacity: {
                value: 1.0,
                type: 'constant'
            },


            transformTranslate: {
                from: {
                    x: 0,
                    y: Dimensions.get('window').height,
                    z: 0
                },
                to: {
                    x: 0,
                    y: 0,
                    z: 0
                },
                min: 0,
                max: 1,
                type: 'linear',
                extrapolate: true,
                round: PixelRatio.get()
            },

            translateY: {
                from: Dimensions.get('window').height,
                to: 0,
                min: 0,
                max: 1,
                type: 'linear',
                extrapolate: true,
                round: PixelRatio.get()
            },

            scaleX: {
                value: 1,
                type: 'constant'
            },

            scaleY: {
                value: 1,
                type: 'constant'
            }
        };



        var ToTheBackAndroid = {
            opacity: {
                value: 1,
                type: 'constant'
            }
        };



        var FromTheFrontAndroid = {
            opacity: {
                from: 0,
                to: 1,
                min: 0.5,
                max: 1,
                type: 'linear',
                extrapolate: false,
                round: 100
            },

            transformTranslate: {
                from: {
                    x: 0,
                    y: 100,
                    z: 0
                },
                to: {
                    x: 0,
                    y: 0,
                    z: 0
                },
                min: 0,
                max: 1,
                type: 'linear',
                extrapolate: true,
                round: PixelRatio.get()
            },

            translateY: {
                from: 100,
                to: 0,
                min: 0,
                max: 1,
                type: 'linear',
                extrapolate: true,
                round: PixelRatio.get()
            }
        };



        var BaseOverswipeConfig = {
            frictionConstant: 1,
            frictionByDistance: 1.5
        };


        var BaseLeftToRightGesture = {


            isDetachable: false,


            gestureDetectMovement: 2,


            notMoving: 0.3,


            directionRatio: 0.66,


            snapVelocity: 2,


            edgeHitWidth: 30,


            stillCompletionRatio: 3 / 5,

            fullDistance: SCREEN_WIDTH,

            direction: 'left-to-right'
        };



        var BaseRightToLeftGesture = _extends({},
            BaseLeftToRightGesture, {
                direction: 'right-to-left'
            });


        var BaseDownUpGesture = _extends({},
            BaseLeftToRightGesture, {
                fullDistance: SCREEN_HEIGHT,
                direction: 'down-to-up'
            });


        var BaseUpDownGesture = _extends({},
            BaseLeftToRightGesture, {
                fullDistance: SCREEN_HEIGHT,
                direction: 'up-to-down'
            });


        var BaseConfig = {

            gestures: {
                pop: BaseLeftToRightGesture
            },



            springFriction: 26,
            springTension: 200,


            defaultTransitionVelocity: 1.5,


            animationInterpolators: {
                into: buildStyleInterpolator(FromTheRight),
                out: buildStyleInterpolator(FadeToTheLeft)
            }
        };



        var NavigatorSceneConfigs = {
            PushFromRight: _extends({},
                BaseConfig),


            FloatFromRight: _extends({},
                BaseConfig),


            FloatFromLeft: _extends({},
                BaseConfig, {
                    animationInterpolators: {
                        into: buildStyleInterpolator(FromTheLeft),
                        out: buildStyleInterpolator(FadeToTheRight)
                    }
                }),


            FloatFromBottom: _extends({},
                BaseConfig, {
                    gestures: {
                        pop: _extends({},
                            BaseLeftToRightGesture, {
                                edgeHitWidth: 150,
                                direction: 'top-to-bottom',
                                fullDistance: SCREEN_HEIGHT
                            })
                    },


                    animationInterpolators: {
                        into: buildStyleInterpolator(FromTheFront),
                        out: buildStyleInterpolator(ToTheBack)
                    }
                }),


            FloatFromBottomAndroid: _extends({},
                BaseConfig, {
                    gestures: null,
                    defaultTransitionVelocity: 3,
                    springFriction: 20,
                    animationInterpolators: {
                        into: buildStyleInterpolator(FromTheFrontAndroid),
                        out: buildStyleInterpolator(ToTheBackAndroid)
                    }
                }),


            FadeAndroid: _extends({},
                BaseConfig, {
                    gestures: null,
                    animationInterpolators: {
                        into: buildStyleInterpolator(FadeIn),
                        out: buildStyleInterpolator(FadeOut)
                    }
                }),


            HorizontalSwipeJump: _extends({},
                BaseConfig, {
                    gestures: {
                        jumpBack: _extends({},
                            BaseLeftToRightGesture, {
                                overswipe: BaseOverswipeConfig,
                                edgeHitWidth: null,
                                isDetachable: true
                            }),

                        jumpForward: _extends({},
                            BaseRightToLeftGesture, {
                                overswipe: BaseOverswipeConfig,
                                edgeHitWidth: null,
                                isDetachable: true
                            })
                    },


                    animationInterpolators: {
                        into: buildStyleInterpolator(FromTheRight),
                        out: buildStyleInterpolator(ToTheLeft)
                    }
                }),


            VerticalUpSwipeJump: _extends({},
                BaseConfig, {
                    gestures: {
                        jumpBack: _extends({},
                            BaseDownUpGesture, {
                                overswipe: BaseOverswipeConfig,
                                edgeHitWidth: null,
                                isDetachable: true
                            }),

                        jumpForward: _extends({},
                            BaseDownUpGesture, {
                                overswipe: BaseOverswipeConfig,
                                edgeHitWidth: null,
                                isDetachable: true
                            })
                    },


                    animationInterpolators: {
                        into: buildStyleInterpolator(FromTheDown),
                        out: buildStyleInterpolator(ToTheUp)
                    }
                }),


            VerticalDownSwipeJump: _extends({},
                BaseConfig, {
                    gestures: {
                        jumpBack: _extends({},
                            BaseUpDownGesture, {
                                overswipe: BaseOverswipeConfig,
                                edgeHitWidth: null,
                                isDetachable: true
                            }),

                        jumpForward: _extends({},
                            BaseUpDownGesture, {
                                overswipe: BaseOverswipeConfig,
                                edgeHitWidth: null,
                                isDetachable: true
                            })
                    },


                    animationInterpolators: {
                        into: buildStyleInterpolator(FromTheTop),
                        out: buildStyleInterpolator(ToTheDown)
                    }
                })
        };



        module.exports = NavigatorSceneConfigs;

        /***/
    },
    /* 315 */
    /***/
    function(module, exports) {

        var Subscribable = {};

        Subscribable.Mixin = {

            componentWillMount: function componentWillMount() {
                this._subscribableSubscriptions = [];
            },

            componentWillUnmount: function componentWillUnmount() {
                this._subscribableSubscriptions.forEach(
                    function(subscription) {
                        return subscription.remove();
                    });

                this._subscribableSubscriptions = null;
            },



            addListenerOn: function addListenerOn(
                eventEmitter,
                eventType,
                listener,
                context) {
                this._subscribableSubscriptions.push(
                    eventEmitter.addListener(eventType, listener, context));

            }
        };


        module.exports = Subscribable;

        /***/
    },
    /* 316 */
    /***/
    function(module, exports) {



        function clamp(min, value, max) {
            if (value < min) {
                return min;
            }
            if (value > max) {
                return max;
            }
            return value;
        }

        module.exports = clamp;

        /***/
    },
    /* 317 */
    /***/
    function(module, exports, __webpack_require__) {



        (function() {
            var rebound = {};
            var util = rebound.util = {};
            var concat = Array.prototype.concat;
            var slice = Array.prototype.slice;


            util.bind = function bind(func, context) {
                var args = slice.call(arguments, 2);
                return function() {
                    func.apply(context, concat.call(args, slice.call(arguments)));
                };
            };


            util.extend = function extend(target, source) {
                for (var key in source) {
                    if (source.hasOwnProperty(key)) {
                        target[key] = source[key];
                    }
                }
            };



            var SpringSystem = rebound.SpringSystem = function SpringSystem(looper) {
                this._springRegistry = {};
                this._activeSprings = [];
                this.listeners = [];
                this._idleSpringIndices = [];
                this.looper = looper || new AnimationLooper();
                this.looper.springSystem = this;
            };

            util.extend(SpringSystem.prototype, {

                _springRegistry: null,

                _isIdle: true,

                _lastTimeMillis: -1,

                _activeSprings: null,

                listeners: null,

                _idleSpringIndices: null,



                setLooper: function setLooper(looper) {
                    this.looper = looper;
                    looper.springSystem = this;
                },



                createSpring: function createSpring(tension, friction) {
                    var springConfig;
                    if (tension === undefined || friction === undefined) {
                        springConfig = SpringConfig.DEFAULT_ORIGAMI_SPRING_CONFIG;
                    } else {
                        springConfig =
                            SpringConfig.fromOrigamiTensionAndFriction(tension, friction);
                    }
                    return this.createSpringWithConfig(springConfig);
                },



                createSpringWithBouncinessAndSpeed: function createSpringWithBouncinessAndSpeed(bounciness, speed) {
                    var springConfig;
                    if (bounciness === undefined || speed === undefined) {
                        springConfig = SpringConfig.DEFAULT_ORIGAMI_SPRING_CONFIG;
                    } else {
                        springConfig =
                            SpringConfig.fromBouncinessAndSpeed(bounciness, speed);
                    }
                    return this.createSpringWithConfig(springConfig);
                },


                createSpringWithConfig: function createSpringWithConfig(springConfig) {
                    var spring = new Spring(this);
                    this.registerSpring(spring);
                    spring.setSpringConfig(springConfig);
                    return spring;
                },



                getIsIdle: function getIsIdle() {
                    return this._isIdle;
                },



                getSpringById: function getSpringById(id) {
                    return this._springRegistry[id];
                },



                getAllSprings: function getAllSprings() {
                    var vals = [];
                    for (var id in this._springRegistry) {
                        if (this._springRegistry.hasOwnProperty(id)) {
                            vals.push(this._springRegistry[id]);
                        }
                    }
                    return vals;
                },



                registerSpring: function registerSpring(spring) {
                    this._springRegistry[spring.getId()] = spring;
                },



                deregisterSpring: function deregisterSpring(spring) {
                    removeFirst(this._activeSprings, spring);
                    delete this._springRegistry[spring.getId()];
                },

                advance: function advance(time, deltaTime) {
                    while (this._idleSpringIndices.length > 0) {
                        this._idleSpringIndices.pop();
                    }
                    for (var i = 0, len = this._activeSprings.length; i < len; i++) {
                        var spring = this._activeSprings[i];
                        if (spring.systemShouldAdvance()) {
                            spring.advance(time / 1000.0, deltaTime / 1000.0);
                        } else {
                            this._idleSpringIndices.push(this._activeSprings.indexOf(spring));
                        }
                    }
                    while (this._idleSpringIndices.length > 0) {
                        var idx = this._idleSpringIndices.pop();
                        idx >= 0 && this._activeSprings.splice(idx, 1);
                    }
                },



                loop: function loop(currentTimeMillis) {
                    var listener;
                    if (this._lastTimeMillis === -1) {
                        this._lastTimeMillis = currentTimeMillis - 1;
                    }
                    var ellapsedMillis = currentTimeMillis - this._lastTimeMillis;
                    this._lastTimeMillis = currentTimeMillis;

                    var i = 0,
                        len = this.listeners.length;
                    for (i = 0; i < len; i++) {
                        listener = this.listeners[i];
                        listener.onBeforeIntegrate && listener.onBeforeIntegrate(this);
                    }

                    this.advance(currentTimeMillis, ellapsedMillis);
                    if (this._activeSprings.length === 0) {
                        this._isIdle = true;
                        this._lastTimeMillis = -1;
                    }

                    for (i = 0; i < len; i++) {
                        listener = this.listeners[i];
                        listener.onAfterIntegrate && listener.onAfterIntegrate(this);
                    }

                    if (!this._isIdle) {
                        this.looper.run();
                    }
                },



                activateSpring: function activateSpring(springId) {
                    var spring = this._springRegistry[springId];
                    if (this._activeSprings.indexOf(spring) == -1) {
                        this._activeSprings.push(spring);
                    }
                    if (this.getIsIdle()) {
                        this._isIdle = false;
                        this.looper.run();
                    }
                },



                addListener: function addListener(listener) {
                    this.listeners.push(listener);
                },


                removeListener: function removeListener(listener) {
                    removeFirst(this.listeners, listener);
                },


                removeAllListeners: function removeAllListeners() {
                    this.listeners = [];
                }
            });



            var Spring = rebound.Spring = function Spring(springSystem) {
                this._id = 's' + Spring._ID++;
                this._springSystem = springSystem;
                this.listeners = [];
                this._currentState = new PhysicsState();
                this._previousState = new PhysicsState();
                this._tempState = new PhysicsState();
            };

            util.extend(Spring, {
                _ID: 0,

                MAX_DELTA_TIME_SEC: 0.064,

                SOLVER_TIMESTEP_SEC: 0.001
            });



            util.extend(Spring.prototype, {

                _id: 0,

                _springConfig: null,

                _overshootClampingEnabled: false,

                _currentState: null,

                _previousState: null,

                _tempState: null,

                _startValue: 0,

                _endValue: 0,

                _wasAtRest: true,

                _restSpeedThreshold: 0.001,

                _displacementFromRestThreshold: 0.001,

                listeners: null,

                _timeAccumulator: 0,

                _springSystem: null,


                destroy: function destroy() {
                    this.listeners = [];
                    this.frames = [];
                    this._springSystem.deregisterSpring(this);
                },



                getId: function getId() {
                    return this._id;
                },



                setSpringConfig: function setSpringConfig(springConfig) {
                    this._springConfig = springConfig;
                    return this;
                },


                getSpringConfig: function getSpringConfig() {
                    return this._springConfig;
                },



                setCurrentValue: function setCurrentValue(currentValue, skipSetAtRest) {
                    this._startValue = currentValue;
                    this._currentState.position = currentValue;
                    if (!skipSetAtRest) {
                        this.setAtRest();
                    }
                    this.notifyPositionUpdated(false, false);
                    return this;
                },



                getStartValue: function getStartValue() {
                    return this._startValue;
                },


                getCurrentValue: function getCurrentValue() {
                    return this._currentState.position;
                },



                getCurrentDisplacementDistance: function getCurrentDisplacementDistance() {
                    return this.getDisplacementDistanceForState(this._currentState);
                },

                getDisplacementDistanceForState: function getDisplacementDistanceForState(state) {
                    return Math.abs(this._endValue - state.position);
                },



                setEndValue: function setEndValue(endValue) {
                    if (this._endValue == endValue && this.isAtRest()) {
                        return this;
                    }
                    this._startValue = this.getCurrentValue();
                    this._endValue = endValue;
                    this._springSystem.activateSpring(this.getId());
                    for (var i = 0, len = this.listeners.length; i < len; i++) {
                        var listener = this.listeners[i];
                        var onChange = listener.onSpringEndStateChange;
                        onChange && onChange(this);
                    }
                    return this;
                },


                getEndValue: function getEndValue() {
                    return this._endValue;
                },



                setVelocity: function setVelocity(velocity) {
                    if (velocity === this._currentState.velocity) {
                        return this;
                    }
                    this._currentState.velocity = velocity;
                    this._springSystem.activateSpring(this.getId());
                    return this;
                },


                getVelocity: function getVelocity() {
                    return this._currentState.velocity;
                },



                setRestSpeedThreshold: function setRestSpeedThreshold(restSpeedThreshold) {
                    this._restSpeedThreshold = restSpeedThreshold;
                    return this;
                },


                getRestSpeedThreshold: function getRestSpeedThreshold() {
                    return this._restSpeedThreshold;
                },



                setRestDisplacementThreshold: function setRestDisplacementThreshold(displacementFromRestThreshold) {
                    this._displacementFromRestThreshold = displacementFromRestThreshold;
                },


                getRestDisplacementThreshold: function getRestDisplacementThreshold() {
                    return this._displacementFromRestThreshold;
                },



                setOvershootClampingEnabled: function setOvershootClampingEnabled(enabled) {
                    this._overshootClampingEnabled = enabled;
                    return this;
                },


                isOvershootClampingEnabled: function isOvershootClampingEnabled() {
                    return this._overshootClampingEnabled;
                },



                isOvershooting: function isOvershooting() {
                    var start = this._startValue;
                    var end = this._endValue;
                    return this._springConfig.tension > 0 && (
                        start < end && this.getCurrentValue() > end ||
                        start > end && this.getCurrentValue() < end);
                },



                advance: function advance(time, realDeltaTime) {
                    var isAtRest = this.isAtRest();

                    if (isAtRest && this._wasAtRest) {
                        return;
                    }

                    var adjustedDeltaTime = realDeltaTime;
                    if (realDeltaTime > Spring.MAX_DELTA_TIME_SEC) {
                        adjustedDeltaTime = Spring.MAX_DELTA_TIME_SEC;
                    }

                    this._timeAccumulator += adjustedDeltaTime;

                    var tension = this._springConfig.tension,
                        friction = this._springConfig.friction,

                        position = this._currentState.position,
                        velocity = this._currentState.velocity,
                        tempPosition = this._tempState.position,
                        tempVelocity = this._tempState.velocity,

                        aVelocity, aAcceleration,
                        bVelocity, bAcceleration,
                        cVelocity, cAcceleration,
                        dVelocity, dAcceleration,

                        dxdt, dvdt;

                    while (this._timeAccumulator >= Spring.SOLVER_TIMESTEP_SEC) {

                        this._timeAccumulator -= Spring.SOLVER_TIMESTEP_SEC;

                        if (this._timeAccumulator < Spring.SOLVER_TIMESTEP_SEC) {
                            this._previousState.position = position;
                            this._previousState.velocity = velocity;
                        }

                        aVelocity = velocity;
                        aAcceleration =
                            tension * (this._endValue - tempPosition) - friction * velocity;

                        tempPosition = position + aVelocity * Spring.SOLVER_TIMESTEP_SEC * 0.5;
                        tempVelocity =
                            velocity + aAcceleration * Spring.SOLVER_TIMESTEP_SEC * 0.5;
                        bVelocity = tempVelocity;
                        bAcceleration =
                            tension * (this._endValue - tempPosition) - friction * tempVelocity;

                        tempPosition = position + bVelocity * Spring.SOLVER_TIMESTEP_SEC * 0.5;
                        tempVelocity =
                            velocity + bAcceleration * Spring.SOLVER_TIMESTEP_SEC * 0.5;
                        cVelocity = tempVelocity;
                        cAcceleration =
                            tension * (this._endValue - tempPosition) - friction * tempVelocity;

                        tempPosition = position + cVelocity * Spring.SOLVER_TIMESTEP_SEC * 0.5;
                        tempVelocity =
                            velocity + cAcceleration * Spring.SOLVER_TIMESTEP_SEC * 0.5;
                        dVelocity = tempVelocity;
                        dAcceleration =
                            tension * (this._endValue - tempPosition) - friction * tempVelocity;

                        dxdt =
                            1.0 / 6.0 * (aVelocity + 2.0 * (bVelocity + cVelocity) + dVelocity);
                        dvdt = 1.0 / 6.0 * (
                            aAcceleration + 2.0 * (bAcceleration + cAcceleration) + dAcceleration);


                        position += dxdt * Spring.SOLVER_TIMESTEP_SEC;
                        velocity += dvdt * Spring.SOLVER_TIMESTEP_SEC;
                    }

                    this._tempState.position = tempPosition;
                    this._tempState.velocity = tempVelocity;

                    this._currentState.position = position;
                    this._currentState.velocity = velocity;

                    if (this._timeAccumulator > 0) {
                        this._interpolate(this._timeAccumulator / Spring.SOLVER_TIMESTEP_SEC);
                    }

                    if (this.isAtRest() ||
                        this._overshootClampingEnabled && this.isOvershooting()) {

                        if (this._springConfig.tension > 0) {
                            this._startValue = this._endValue;
                            this._currentState.position = this._endValue;
                        } else {
                            this._endValue = this._currentState.position;
                            this._startValue = this._endValue;
                        }
                        this.setVelocity(0);
                        isAtRest = true;
                    }

                    var notifyActivate = false;
                    if (this._wasAtRest) {
                        this._wasAtRest = false;
                        notifyActivate = true;
                    }

                    var notifyAtRest = false;
                    if (isAtRest) {
                        this._wasAtRest = true;
                        notifyAtRest = true;
                    }

                    this.notifyPositionUpdated(notifyActivate, notifyAtRest);
                },

                notifyPositionUpdated: function notifyPositionUpdated(notifyActivate, notifyAtRest) {
                    for (var i = 0, len = this.listeners.length; i < len; i++) {
                        var listener = this.listeners[i];
                        if (notifyActivate && listener.onSpringActivate) {
                            listener.onSpringActivate(this);
                        }

                        if (listener.onSpringUpdate) {
                            listener.onSpringUpdate(this);
                        }

                        if (notifyAtRest && listener.onSpringAtRest) {
                            listener.onSpringAtRest(this);
                        }
                    }
                },



                systemShouldAdvance: function systemShouldAdvance() {
                    return !this.isAtRest() || !this.wasAtRest();
                },

                wasAtRest: function wasAtRest() {
                    return this._wasAtRest;
                },



                isAtRest: function isAtRest() {
                    return Math.abs(this._currentState.velocity) < this._restSpeedThreshold && (
                        this.getDisplacementDistanceForState(this._currentState) <=
                        this._displacementFromRestThreshold ||
                        this._springConfig.tension === 0);
                },



                setAtRest: function setAtRest() {
                    this._endValue = this._currentState.position;
                    this._tempState.position = this._currentState.position;
                    this._currentState.velocity = 0;
                    return this;
                },

                _interpolate: function _interpolate(alpha) {
                    this._currentState.position = this._currentState.position *
                        alpha + this._previousState.position * (1 - alpha);
                    this._currentState.velocity = this._currentState.velocity *
                        alpha + this._previousState.velocity * (1 - alpha);
                },

                getListeners: function getListeners() {
                    return this.listeners;
                },

                addListener: function addListener(newListener) {
                    this.listeners.push(newListener);
                    return this;
                },

                removeListener: function removeListener(listenerToRemove) {
                    removeFirst(this.listeners, listenerToRemove);
                    return this;
                },

                removeAllListeners: function removeAllListeners() {
                    this.listeners = [];
                    return this;
                },

                currentValueIsApproximately: function currentValueIsApproximately(value) {
                    return Math.abs(this.getCurrentValue() - value) <=
                        this.getRestDisplacementThreshold();
                }
            });



            var PhysicsState = function PhysicsState() {};

            util.extend(PhysicsState.prototype, {
                position: 0,
                velocity: 0
            });



            var SpringConfig = rebound.SpringConfig =
                function SpringConfig(tension, friction) {
                    this.tension = tension;
                    this.friction = friction;
                };



            var AnimationLooper = rebound.AnimationLooper = function AnimationLooper() {
                this.springSystem = null;
                var _this = this;
                var _run = function _run() {
                    _this.springSystem.loop(Date.now());
                };

                this.run = function() {
                    util.onFrame(_run);
                };
            };



            rebound.SimulationLooper = function SimulationLooper(timestep) {
                this.springSystem = null;
                var time = 0;
                var running = false;
                timestep = timestep || 16.667;

                this.run = function() {
                    if (running) {
                        return;
                    }
                    running = true;
                    while (!this.springSystem.getIsIdle()) {
                        this.springSystem.loop(time += timestep);
                    }
                    running = false;
                };
            };



            rebound.SteppingSimulationLooper = function(timestep) {
                this.springSystem = null;
                var time = 0;



                this.run = function() {};


                this.step = function(timestep) {
                    this.springSystem.loop(time += timestep);
                };
            };



            var OrigamiValueConverter = rebound.OrigamiValueConverter = {
                tensionFromOrigamiValue: function tensionFromOrigamiValue(oValue) {
                    return (oValue - 30.0) * 3.62 + 194.0;
                },

                origamiValueFromTension: function origamiValueFromTension(tension) {
                    return (tension - 194.0) / 3.62 + 30.0;
                },

                frictionFromOrigamiValue: function frictionFromOrigamiValue(oValue) {
                    return (oValue - 8.0) * 3.0 + 25.0;
                },

                origamiFromFriction: function origamiFromFriction(friction) {
                    return (friction - 25.0) / 3.0 + 8.0;
                }
            };



            var BouncyConversion = rebound.BouncyConversion = function(bounciness, speed) {
                this.bounciness = bounciness;
                this.speed = speed;
                var b = this.normalize(bounciness / 1.7, 0, 20.0);
                b = this.projectNormal(b, 0.0, 0.8);
                var s = this.normalize(speed / 1.7, 0, 20.0);
                this.bouncyTension = this.projectNormal(s, 0.5, 200);
                this.bouncyFriction = this.quadraticOutInterpolation(
                    b,
                    this.b3Nobounce(this.bouncyTension),
                    0.01);
            };

            util.extend(BouncyConversion.prototype, {

                normalize: function normalize(value, startValue, endValue) {
                    return (value - startValue) / (endValue - startValue);
                },

                projectNormal: function projectNormal(n, start, end) {
                    return start + n * (end - start);
                },

                linearInterpolation: function linearInterpolation(t, start, end) {
                    return t * end + (1.0 - t) * start;
                },

                quadraticOutInterpolation: function quadraticOutInterpolation(t, start, end) {
                    return this.linearInterpolation(2 * t - t * t, start, end);
                },

                b3Friction1: function b3Friction1(x) {
                    return 0.0007 * Math.pow(x, 3) -
                        0.031 * Math.pow(x, 2) + 0.64 * x + 1.28;
                },

                b3Friction2: function b3Friction2(x) {
                    return 0.000044 * Math.pow(x, 3) -
                        0.006 * Math.pow(x, 2) + 0.36 * x + 2.;
                },

                b3Friction3: function b3Friction3(x) {
                    return 0.00000045 * Math.pow(x, 3) -
                        0.000332 * Math.pow(x, 2) + 0.1078 * x + 5.84;
                },

                b3Nobounce: function b3Nobounce(tension) {
                    var friction = 0;
                    if (tension <= 18) {
                        friction = this.b3Friction1(tension);
                    } else if (tension > 18 && tension <= 44) {
                        friction = this.b3Friction2(tension);
                    } else {
                        friction = this.b3Friction3(tension);
                    }
                    return friction;
                }
            });


            util.extend(SpringConfig, {



                fromOrigamiTensionAndFriction: function fromOrigamiTensionAndFriction(tension, friction) {
                    return new SpringConfig(
                        OrigamiValueConverter.tensionFromOrigamiValue(tension),
                        OrigamiValueConverter.frictionFromOrigamiValue(friction));
                },



                fromBouncinessAndSpeed: function fromBouncinessAndSpeed(bounciness, speed) {
                    var bouncyConversion = new rebound.BouncyConversion(bounciness, speed);
                    return this.fromOrigamiTensionAndFriction(
                        bouncyConversion.bouncyTension,
                        bouncyConversion.bouncyFriction);
                },



                coastingConfigWithOrigamiFriction: function coastingConfigWithOrigamiFriction(friction) {
                    return new SpringConfig(
                        0,
                        OrigamiValueConverter.frictionFromOrigamiValue(friction));

                }
            });


            SpringConfig.DEFAULT_ORIGAMI_SPRING_CONFIG =
                SpringConfig.fromOrigamiTensionAndFriction(40, 7);

            util.extend(SpringConfig.prototype, {
                friction: 0,
                tension: 0
            });



            var colorCache = {};
            util.hexToRGB = function(color) {
                if (colorCache[color]) {
                    return colorCache[color];
                }
                color = color.replace('#', '');
                if (color.length === 3) {
                    color = color[0] + color[0] + color[1] + color[1] + color[2] + color[2];
                }
                var parts = color.match(/.{2}/g);

                var ret = {
                    r: parseInt(parts[0], 16),
                    g: parseInt(parts[1], 16),
                    b: parseInt(parts[2], 16)
                };


                colorCache[color] = ret;
                return ret;
            };

            util.rgbToHex = function(r, g, b) {
                r = r.toString(16);
                g = g.toString(16);
                b = b.toString(16);
                r = r.length < 2 ? '0' + r : r;
                g = g.length < 2 ? '0' + g : g;
                b = b.length < 2 ? '0' + b : b;
                return '#' + r + g + b;
            };

            var MathUtil = rebound.MathUtil = {



                mapValueInRange: function mapValueInRange(value, fromLow, fromHigh, toLow, toHigh) {
                    var fromRangeSize = fromHigh - fromLow;
                    var toRangeSize = toHigh - toLow;
                    var valueScale = (value - fromLow) / fromRangeSize;
                    return toLow + valueScale * toRangeSize;
                },



                interpolateColor: function interpolateColor(val, startColor, endColor, fromLow, fromHigh, asRGB) {
                    fromLow = fromLow === undefined ? 0 : fromLow;
                    fromHigh = fromHigh === undefined ? 1 : fromHigh;
                    startColor = util.hexToRGB(startColor);
                    endColor = util.hexToRGB(endColor);
                    var r = Math.floor(
                        util.mapValueInRange(val, fromLow, fromHigh, startColor.r, endColor.r));

                    var g = Math.floor(
                        util.mapValueInRange(val, fromLow, fromHigh, startColor.g, endColor.g));

                    var b = Math.floor(
                        util.mapValueInRange(val, fromLow, fromHigh, startColor.b, endColor.b));

                    if (asRGB) {
                        return 'rgb(' + r + ',' + g + ',' + b + ')';
                    } else {
                        return util.rgbToHex(r, g, b);
                    }
                },

                degreesToRadians: function degreesToRadians(deg) {
                    return deg * Math.PI / 180;
                },

                radiansToDegrees: function radiansToDegrees(rad) {
                    return rad * 180 / Math.PI;
                }
            };



            util.extend(util, MathUtil);



            function removeFirst(array, item) {
                var idx = array.indexOf(item);
                idx != -1 && array.splice(idx, 1);
            }

            var _onFrame;
            if (typeof window !== 'undefined') {
                _onFrame = window.requestAnimationFrame ||
                    window.webkitRequestAnimationFrame ||
                    window.mozRequestAnimationFrame ||
                    window.msRequestAnimationFrame ||
                    window.oRequestAnimationFrame ||
                    function(callback) {
                        window.setTimeout(callback, 1000 / 60);
                    };
            }
            if (!_onFrame && typeof(process) !== 'undefined' && (process).title === 'node') {
                _onFrame = setImmediate;
            }


            util.onFrame = function onFrame(func) {
                return (setImmediate)(func);
            };



            if (true) {
                util.extend(exports, rebound);
            } else if (typeof window != 'undefined') {
                window.rebound = rebound;
            }
        })();

        /***/
    },
    /* 318 */
    /***/
    function(module, exports, __webpack_require__) {



        var timer;
        var TextInputState = {
            _currentFocus: null,
            currentFocus: function currentFocus() {
                return this._currentFocus;
            },
            blur: function blur(node) {
                if (node === this._currentFocus && node !== null) {
                    try {
                        node.blur();
                    } catch (e) {}
                    this._currentFocus = null;
                }
            },
            focus: function focus(node) {
                var _this = this;

                __webpack_require__(232).runAfterAnimation(function() {
                    if (_this._currentFocus !== node && node !== null) {
                        try {
                            node.focus();
                        } catch (e) {}
                        _this._currentFocus = node;
                    }
                });
            }
        };


        module.exports = TextInputState;

        /***/
    },
    /* 319 */
    /***/
    function(module, exports, __webpack_require__) {

        /* WEBPACK VAR INJECTION */
        (function(global) {



            'use strict';
            var _extends = Object.assign || function(target) {
                for (var i = 1; i < arguments.length; i++) {
                    var source = arguments[i];
                    for (var key in source) {
                        if (Object.prototype.hasOwnProperty.call(source, key)) {
                            target[key] = source[key];
                        }
                    }
                }
                return target;
            };
            var _createClass = function() {
                function defineProperties(target, props) {
                    for (var i = 0; i < props.length; i++) {
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || false;
                        descriptor.configurable = true;
                        if ("value" in descriptor) descriptor.writable = true;
                        Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }
                return function(Constructor, protoProps, staticProps) {
                    if (protoProps) defineProperties(Constructor.prototype, protoProps);
                    if (staticProps) defineProperties(Constructor, staticProps);
                    return Constructor;
                };
            }();

            var _react = __webpack_require__(10);
            var _react2 = _interopRequireDefault(_react);
            var _View = __webpack_require__(27);
            var _View2 = _interopRequireDefault(_View);
            var _StyleSheet = __webpack_require__(39);
            var _StyleSheet2 = _interopRequireDefault(_StyleSheet);
            var _NativeModules = __webpack_require__(320);
            var _ColorPropType = __webpack_require__(322);
            var _ColorPropType2 = _interopRequireDefault(_ColorPropType);

            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {
                    default: obj
                };
            }

            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                    throw new TypeError("Cannot call a class as a function");
                }
            }

            function _possibleConstructorReturn(self, call) {
                if (!self) {
                    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                }
                return call && (typeof call === "object" || typeof call === "function") ? call : self;
            }

            function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, {
                    constructor: {
                        value: subClass,
                        enumerable: false,
                        writable: true,
                        configurable: true
                    }
                });
                if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
            }

            var STYLE_ATTRIBUTES = [
                'Horizontal',
                'Normal',
                'Small',
                'Large',
                'Inverse',
                'SmallInverse',
                'LargeInverse'
            ];


            var PROGESS_WIDTH = {
                Horizontal: null,
                Normal: 40,
                Small: 10,
                Large: 60,
                Inverse: 40,
                SmallInverse: 10,
                LargeInverse: 60
            };


            var CIRCLE_COLOR = '#D1D3D7';

            var styles = _StyleSheet2.default.create({
                circleProgress: {
                    transformOrigin: 'center center',
                    transform: [{
                        rotate: '-90deg'
                    }]
                },

                horiProgress: {
                    height: 10,
                    position: 'relative'
                },

                horiTrack: {
                    position: 'absolute',
                    top: 0,
                    left: 0,
                    right: 0,
                    bottom: 0,
                    backgroundColor: CIRCLE_COLOR
                },

                horiBar: {
                    position: 'absolute',
                    top: 0,
                    bottom: 0,
                    left: 0
                }
            });



            var rAF = global.requestAnimationFrame;
            var


                ProgressBar = function(_Component) {
                _inherits(ProgressBar, _Component);

                function ProgressBar(props) {
                    _classCallCheck(this, ProgressBar);
                    var _this = _possibleConstructorReturn(this, (ProgressBar.__proto__ || Object.getPrototypeOf(ProgressBar)).call(this,
                        props));
                    _this.state = {
                        progress: _this.props.progress
                    };

                    _this.init(props);
                    return _this;
                }
                _createClass(ProgressBar, [{
                    key: 'componentDidMount',
                    value: function componentDidMount()

                    {
                        this.measureHoriProgressBar();
                    }
                }, {
                    key: 'componentWillReceiveProps',
                    value: function componentWillReceiveProps(

                        nextProps) {
                        this.init(nextProps);
                        this.setState({
                            progress: nextProps.progress
                        });
                        this.measureHoriProgressBar();
                    }
                }, {
                    key: 'init',
                    value: function init(

                        props) {
                        this.indeterminate = props.styleAttr === 'Horizontal' ? false : props.indeterminate;
                        this.horiWidth = this.horiWidth || 0;
                        this.inverse = props.styleAttr.indexOf('Inverse') !== -1 ? -1 : 1;
                        if (this.indeterminate) {
                            this.updateProgress();
                        }
                    }
                }, {
                    key: 'updateProgress',
                    value: function updateProgress()

                    {
                        var _this2 = this;

                        var progress = this.state.progress >= 2 ? this.state.progress - 2 : this.state.progress;
                        var progressAbs = 1 - Math.abs(this.state.progress - 1);

                        switch (true) {
                            case progressAbs <= 0.2 || progressAbs >= 0.8:
                                progress += 0.006;
                                break;
                            case progress > 0.2 && progress < 0.8:
                                progress += 0.005;
                                break;
                            case progress > 1.2 && progress < 1.8:
                                progress += 0.008;
                                break;
                        }

                        this.setState({
                            progress: progress
                        });
                        rAF(function() {
                            return _this2.updateProgress();
                        });
                    }
                }, {
                    key: 'measureHoriProgressBar',
                    value: function measureHoriProgressBar()

                    {
                        var _this3 = this;

                        if (this.props.styleAttr === 'Horizontal') {
                            setTimeout(function() {
                                _NativeModules.UIManager.measure(_this3.refs['horiProgressBar'], function(x, y, width, height) {
                                    _this3.horiWidth = width;
                                    _this3.forceUpdate();
                                });
                            });
                        }
                    }
                }, {
                    key: 'render',
                    value: function render()

                    {
                        var progressRender = void 0,
                            props = this.props;
                        if (props.styleAttr !== 'Horizontal') {
                            var width = PROGESS_WIDTH[props.styleAttr],
                                radius = width / 2,
                                storkeWidth = width / 5,
                                svgWidth = width + storkeWidth,
                                circleOffset = svgWidth / 2,
                                circumference = Math.PI * width,

                                transformAngle = this.inverse * (this.indeterminate ? this.state.progress * 720 - 90 : -90),

                                storkeDashPer = void 0;

                            if (props.indeterminate) {
                                var progressAbs = 1 - Math.abs(this.state.progress - 1);
                                storkeDashPer = progressAbs > 0.8 ? 0.8 : progressAbs < 0.2 ? 0.2 : progressAbs;
                            } else {
                                storkeDashPer = this.state.progress;
                            }

                            progressRender =
                                (this && this.createElement || _react2.default.createElement)('svg', {
                                        width: svgWidth,
                                        height: svgWidth
                                    },
                                    (this && this.createElement || _react2.default.createElement)('circle', {
                                        cx: circleOffset,
                                        cy: circleOffset,
                                        r: radius,
                                        strokeWidth: storkeWidth,
                                        stroke: CIRCLE_COLOR,
                                        fill: 'none'
                                    }),

                                    (this && this.createElement || _react2.default.createElement)('circle', {
                                        cx: circleOffset,
                                        cy: circleOffset,
                                        r: radius,
                                        strokeWidth: storkeWidth,
                                        stroke: this.props.color,
                                        fill: 'none',
                                        strokeDasharray: storkeDashPer * circumference + ' ' + circumference,
                                        style: {
                                            transformOrigin: 'center center',
                                            transform: 'rotate(' + transformAngle + 'deg) matrix(' + this.inverse + ',0,0,1,0,0)'
                                        }
                                    }));



                        } else {

                            progressRender =
                                (this && this.createElement || _react2.default.createElement)('div', {
                                        ref: 'horiProgressBar',
                                        style: styles.horiProgress
                                    },
                                    (this && this.createElement || _react2.default.createElement)('div', {
                                        style: styles.horiTrack
                                    }),

                                    (this && this.createElement || _react2.default.createElement)('div', {
                                        style: _StyleSheet2.default.normalize([styles.horiBar, {
                                            backgroundColor: props.color,
                                            width: this.state.progress * this.horiWidth
                                        }])
                                    }));



                        }

                        return (
                            (this && this.createElement || _react2.default.createElement)(_View2.default, this.props,
                                progressRender));


                    }
                }]);
                return ProgressBar;
            }(_react.Component);


            ProgressBar.defaultProps = {
                styleAttr: 'Normal',
                indeterminate: true,
                progress: 0,
                color: '#1ba9ba'
            };


            ProgressBar.propTypes = _extends({},
                _View2.default.propTypes, {



                    styleAttr: _react2.default.PropTypes.oneOf(STYLE_ATTRIBUTES),



                    indeterminate: _react2.default.PropTypes.bool,



                    progress: _react2.default.PropTypes.number,



                    color: _ColorPropType2.default,
                    testID: _react2.default.PropTypes.string
                });


            module.exports = ProgressBar;
            /* WEBPACK VAR INJECTION */
        }.call(exports, (function() {
            return this;
        }())))

        /***/
    },
    /* 320 */
    /***/
    function(module, exports, __webpack_require__) {



        var scriptUrl = '';
        try {
            throw Error('');
        } catch (e) {
            try {
                if (e.stack) scriptUrl = (e.stack.match(/(http[s]?):\/\/[^\/]+(:[0-9]+)?\/[^\s:]+/) || [''])[0];
            } catch (e) {}
        }



        var NativeModules = module.exports = {
            SourceCode: {
                get ScriptURL() {
                    return null;
                },
                get PlatformScriptScriptURL() {
                    return scriptUrl;
                }
            },



            UIManager: __webpack_require__(55),



            CookieManager: __webpack_require__(321)
        };

        /***/
    },
    /* 321 */
    /***/
    function(module, exports) {

        /* WEBPACK VAR INJECTION */
        (function(global) {
            var _extends = Object.assign || function(target) {
                for (var i = 1; i < arguments.length; i++) {
                    var source = arguments[i];
                    for (var key in source) {
                        if (Object.prototype.hasOwnProperty.call(source, key)) {
                            target[key] = source[key];
                        }
                    }
                }
                return target;
            };



            var pluses = /\+/g;

            function encode(s) {
                return config.raw ? s : encodeURIComponent(s);
            }

            function decode(s) {
                return config.raw ? s : decodeURIComponent(s);
            }

            function stringifyCookieValue(value) {
                return encode(config.json ? JSON.stringify(value) : String(value));
            }

            function parseCookieValue(s) {
                if (s.indexOf('"') === 0) {

                    s = s.slice(1, -1).replace(/\\"/g, '"').replace(/\\\\/g, '\\');
                }

                try {



                    s = decodeURIComponent(s.replace(pluses, ' '));
                    return config.json ? JSON.parse(s) : s;
                } catch (e) {}
            }

            function read(s, converter) {
                var value = config.raw ? s : parseCookieValue(s);
                return typeof converter == 'function' ? converter(value) : value;
            }

            var config = function config(key, value, options) {



                if (arguments.length > 1 && typeof value != 'function') {
                    options = _extends({}, config.defaults, options);

                    if (typeof options.expires === 'number') {
                        var days = options.expires,
                            t = options.expires = new Date();
                        t.setMilliseconds(t.getMilliseconds() + days * 864e+5);
                    }

                    return document.cookie = [
                        encode(key), '=', stringifyCookieValue(value),
                        options.expires ? '; expires=' + options.expires.toUTCString() : '',
                        options.path ? '; path=' + options.path : '',
                        options.domain ? '; domain=' + options.domain : '',
                        options.secure ? '; secure' : ''
                    ].
                    join('');
                }



                var result = false,



                    cookies = document.cookie ? document.cookie.split('; ') : [],
                    i = 0,
                    l = cookies.length;

                for (; i < l; i++) {
                    var parts = cookies[i].split('='),
                        name = decode(parts.shift()),
                        cookie = parts.join('=');

                    if (key === name) {

                        result = {
                            key: key,

                            value: read(cookie, value)
                        };

                        break;
                    }


                    if (!key && (cookie = read(cookie)) !== undefined) {
                        result = result || {};
                        result[name] = {
                            key: name,
                            value: cookie
                        };

                    }
                }

                return result;
            };

            config.defaults = {};



            module.exports = {



                setCookie: function setCookie(cookie, callback) {
                    var
                        key = cookie.key,
                        value = cookie.value,
                        options = {};

                    if (!key) {
                        var cookies = config();
                        if (cookies) {
                            for (var key in cookies) {
                                this.removeCookieForKey(key);
                            }
                        }
                    } else {
                        for (var i in cookie) {
                            if (i != 'key' || i != 'value') options[i] = cookie[i];
                        }
                        config(key, value, options);
                    }
                    callback && callback();
                },



                getCookieForKey: function getCookieForKey(key, url, onSuccess, onError) {
                    onSuccess && onSuccess(config(key));
                },



                getCookiesForURL: function getCookiesForURL(url, callback) {
                    callback && callback(config());
                },



                removeCookieForKey: function removeCookieForKey(key) {
                    var url = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : global.location.hostname;
                    var callback = arguments[2];
                    this.removeCookie(key);

                    if (config(key)) {
                        this.removeCookie({
                                key: key,
                                domain: (url.replace(/^[^:\/]+:\/\//g, '').match(/([^\.]+)([^\/#\?]+)/) || [])[2]
                            },
                            null);
                    }
                    callback && callback();
                },



                removeCookie: function removeCookie(cookie, callback) {
                    var key = cookie && cookie.key || cookie,
                        domain = cookie && cookie.domain;
                    ck = {
                        key: key,
                        value: '',
                        expires: -1
                    };

                    if (domain) ck.domain = domain;
                    this.setCookie(ck);
                    callback && callback();
                }
            };
            /* WEBPACK VAR INJECTION */
        }.call(exports, (function() {
            return this;
        }())))

        /***/
    },
    /* 322 */
    /***/
    function(module, exports, __webpack_require__) {



        'use strict';


        var ReactPropTypeLocationNames = {};

        var normalizeColor = __webpack_require__(323);

        var colorPropType = function colorPropType(isRequired, props, propName, componentName, location, propFullName) {
            var color = props[propName];
            if (color === undefined || color === null) {
                if (isRequired) {
                    var locationName = ReactPropTypeLocationNames[location];
                    return new Error(
                        'Required ' + locationName + ' `' + (propFullName || propName) +
                        '` was not specified in `' + componentName + '`.');

                }
                return;
            }

            if (typeof color === 'number') {



                return;
            }

            if (normalizeColor(color) === null) {
                var locationName = ReactPropTypeLocationNames[location];
                return new Error(
                    'Invalid ' + locationName + ' `' + (propFullName || propName) +
                    '` supplied to `' + componentName + '`: ' + color + '\n' + 'Valid color formats are\n  - \'#f0f\' (#rgb)\n  - \'#f0fc\' (#rgba)\n  - \'#ff00ff\' (#rrggbb)\n  - \'#ff00ff00\' (#rrggbbaa)\n  - \'rgb(255, 255, 255)\'\n  - \'rgba(255, 255, 255, 1.0)\'\n  - \'hsl(360, 100%, 100%)\'\n  - \'hsla(360, 100%, 100%, 1.0)\'\n  - \'transparent\'\n  - \'red\'\n  - 0xff00ff00 (0xrrggbbaa)\n');



            }
        };

        var ColorPropType = colorPropType.bind(null, false);
        ColorPropType.isRequired = colorPropType.bind(null, true);

        module.exports = ColorPropType;

        /***/
    },
    /* 323 */
    /***/
    function(module, exports) {



        'use strict';

        function normalizeColor(color) {
            var match;

            if (typeof color === 'number') {
                if (color >>> 0 === color && color >= 0 && color <= 0xffffffff) {
                    return color;
                }
                return null;
            }


            if (match = matchers.hex6.exec(color)) {
                return parseInt(match[1] + 'ff', 16) >>> 0;
            }

            if (names.hasOwnProperty(color)) {
                return names[color];
            }

            if (match = matchers.rgb.exec(color)) {
                return (
                        parse255(match[1]) << 24 |
                        parse255(match[2]) << 16 |
                        parse255(match[3]) << 8 |
                        0x000000ff) >>>
                    0;
            }

            if (match = matchers.rgba.exec(color)) {
                return (
                        parse255(match[1]) << 24 |
                        parse255(match[2]) << 16 |
                        parse255(match[3]) << 8 |
                        parse1(match[4])) >>>
                    0;
            }

            if (match = matchers.hex3.exec(color)) {
                return parseInt(
                        match[1] + match[1] +
                        match[2] + match[2] +
                        match[3] + match[3] +
                        'ff',
                        16) >>>
                    0;
            }


            if (match = matchers.hex8.exec(color)) {
                return parseInt(match[1], 16) >>> 0;
            }

            if (match = matchers.hex4.exec(color)) {
                return parseInt(
                        match[1] + match[1] +
                        match[2] + match[2] +
                        match[3] + match[3] +
                        match[4] + match[4],
                        16) >>>
                    0;
            }

            if (match = matchers.hsl.exec(color)) {
                return (
                        hslToRgb(
                            parse360(match[1]),
                            parsePercentage(match[2]),
                            parsePercentage(match[3])) |

                        0x000000ff) >>>
                    0;
            }

            if (match = matchers.hsla.exec(color)) {
                return (
                        hslToRgb(
                            parse360(match[1]),
                            parsePercentage(match[2]),
                            parsePercentage(match[3])) |

                        parse1(match[4])) >>>
                    0;
            }

            return null;
        }

        function hue2rgb(p, q, t) {
            if (t < 0) {
                t += 1;
            }
            if (t > 1) {
                t -= 1;
            }
            if (t < 1 / 6) {
                return p + (q - p) * 6 * t;
            }
            if (t < 1 / 2) {
                return q;
            }
            if (t < 2 / 3) {
                return p + (q - p) * (2 / 3 - t) * 6;
            }
            return p;
        }

        function hslToRgb(h, s, l) {
            var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
            var p = 2 * l - q;
            var r = hue2rgb(p, q, h + 1 / 3);
            var g = hue2rgb(p, q, h);
            var b = hue2rgb(p, q, h - 1 / 3);

            return (
                Math.round(r * 255) << 24 |
                Math.round(g * 255) << 16 |
                Math.round(b * 255) << 8);

        }


        var NUMBER = '[-+]?\\d*\\.?\\d+';
        var PERCENTAGE = NUMBER + '%';

        function call() {
            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
            }
            return '\\(\\s*(' + args.join(')\\s*,\\s*(') + ')\\s*\\)';
        }

        var matchers = {
            rgb: new RegExp('rgb' + call(NUMBER, NUMBER, NUMBER)),
            rgba: new RegExp('rgba' + call(NUMBER, NUMBER, NUMBER, NUMBER)),
            hsl: new RegExp('hsl' + call(NUMBER, PERCENTAGE, PERCENTAGE)),
            hsla: new RegExp('hsla' + call(NUMBER, PERCENTAGE, PERCENTAGE, NUMBER)),
            hex3: /^#([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
            hex4: /^#([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
            hex6: /^#([0-9a-fA-F]{6})$/,
            hex8: /^#([0-9a-fA-F]{8})$/
        };


        function parse255(str) {
            var int = parseInt(str, 10);
            if (int < 0) {
                return 0;
            }
            if (int > 255) {
                return 255;
            }
            return int;
        }

        function parse360(str) {
            var int = parseFloat(str);
            return (int % 360 + 360) % 360 / 360;
        }

        function parse1(str) {
            var num = parseFloat(str);
            if (num < 0) {
                return 0;
            }
            if (num > 1) {
                return 255;
            }
            return Math.round(num * 255);
        }

        function parsePercentage(str) {

            var int = parseFloat(str, 10);
            if (int < 0) {
                return 0;
            }
            if (int > 100) {
                return 1;
            }
            return int / 100;
        }

        var names = {
            transparent: 0x00000000,


            aliceblue: 0xf0f8ffff,
            antiquewhite: 0xfaebd7ff,
            aqua: 0x00ffffff,
            aquamarine: 0x7fffd4ff,
            azure: 0xf0ffffff,
            beige: 0xf5f5dcff,
            bisque: 0xffe4c4ff,
            black: 0x000000ff,
            blanchedalmond: 0xffebcdff,
            blue: 0x0000ffff,
            blueviolet: 0x8a2be2ff,
            brown: 0xa52a2aff,
            burlywood: 0xdeb887ff,
            burntsienna: 0xea7e5dff,
            cadetblue: 0x5f9ea0ff,
            chartreuse: 0x7fff00ff,
            chocolate: 0xd2691eff,
            coral: 0xff7f50ff,
            cornflowerblue: 0x6495edff,
            cornsilk: 0xfff8dcff,
            crimson: 0xdc143cff,
            cyan: 0x00ffffff,
            darkblue: 0x00008bff,
            darkcyan: 0x008b8bff,
            darkgoldenrod: 0xb8860bff,
            darkgray: 0xa9a9a9ff,
            darkgreen: 0x006400ff,
            darkgrey: 0xa9a9a9ff,
            darkkhaki: 0xbdb76bff,
            darkmagenta: 0x8b008bff,
            darkolivegreen: 0x556b2fff,
            darkorange: 0xff8c00ff,
            darkorchid: 0x9932ccff,
            darkred: 0x8b0000ff,
            darksalmon: 0xe9967aff,
            darkseagreen: 0x8fbc8fff,
            darkslateblue: 0x483d8bff,
            darkslategray: 0x2f4f4fff,
            darkslategrey: 0x2f4f4fff,
            darkturquoise: 0x00ced1ff,
            darkviolet: 0x9400d3ff,
            deeppink: 0xff1493ff,
            deepskyblue: 0x00bfffff,
            dimgray: 0x696969ff,
            dimgrey: 0x696969ff,
            dodgerblue: 0x1e90ffff,
            firebrick: 0xb22222ff,
            floralwhite: 0xfffaf0ff,
            forestgreen: 0x228b22ff,
            fuchsia: 0xff00ffff,
            gainsboro: 0xdcdcdcff,
            ghostwhite: 0xf8f8ffff,
            gold: 0xffd700ff,
            goldenrod: 0xdaa520ff,
            gray: 0x808080ff,
            green: 0x008000ff,
            greenyellow: 0xadff2fff,
            grey: 0x808080ff,
            honeydew: 0xf0fff0ff,
            hotpink: 0xff69b4ff,
            indianred: 0xcd5c5cff,
            indigo: 0x4b0082ff,
            ivory: 0xfffff0ff,
            khaki: 0xf0e68cff,
            lavender: 0xe6e6faff,
            lavenderblush: 0xfff0f5ff,
            lawngreen: 0x7cfc00ff,
            lemonchiffon: 0xfffacdff,
            lightblue: 0xadd8e6ff,
            lightcoral: 0xf08080ff,
            lightcyan: 0xe0ffffff,
            lightgoldenrodyellow: 0xfafad2ff,
            lightgray: 0xd3d3d3ff,
            lightgreen: 0x90ee90ff,
            lightgrey: 0xd3d3d3ff,
            lightpink: 0xffb6c1ff,
            lightsalmon: 0xffa07aff,
            lightseagreen: 0x20b2aaff,
            lightskyblue: 0x87cefaff,
            lightslategray: 0x778899ff,
            lightslategrey: 0x778899ff,
            lightsteelblue: 0xb0c4deff,
            lightyellow: 0xffffe0ff,
            lime: 0x00ff00ff,
            limegreen: 0x32cd32ff,
            linen: 0xfaf0e6ff,
            magenta: 0xff00ffff,
            maroon: 0x800000ff,
            mediumaquamarine: 0x66cdaaff,
            mediumblue: 0x0000cdff,
            mediumorchid: 0xba55d3ff,
            mediumpurple: 0x9370dbff,
            mediumseagreen: 0x3cb371ff,
            mediumslateblue: 0x7b68eeff,
            mediumspringgreen: 0x00fa9aff,
            mediumturquoise: 0x48d1ccff,
            mediumvioletred: 0xc71585ff,
            midnightblue: 0x191970ff,
            mintcream: 0xf5fffaff,
            mistyrose: 0xffe4e1ff,
            moccasin: 0xffe4b5ff,
            navajowhite: 0xffdeadff,
            navy: 0x000080ff,
            oldlace: 0xfdf5e6ff,
            olive: 0x808000ff,
            olivedrab: 0x6b8e23ff,
            orange: 0xffa500ff,
            orangered: 0xff4500ff,
            orchid: 0xda70d6ff,
            palegoldenrod: 0xeee8aaff,
            palegreen: 0x98fb98ff,
            paleturquoise: 0xafeeeeff,
            palevioletred: 0xdb7093ff,
            papayawhip: 0xffefd5ff,
            peachpuff: 0xffdab9ff,
            peru: 0xcd853fff,
            pink: 0xffc0cbff,
            plum: 0xdda0ddff,
            powderblue: 0xb0e0e6ff,
            purple: 0x800080ff,
            rebeccapurple: 0x663399ff,
            red: 0xff0000ff,
            rosybrown: 0xbc8f8fff,
            royalblue: 0x4169e1ff,
            saddlebrown: 0x8b4513ff,
            salmon: 0xfa8072ff,
            sandybrown: 0xf4a460ff,
            seagreen: 0x2e8b57ff,
            seashell: 0xfff5eeff,
            sienna: 0xa0522dff,
            silver: 0xc0c0c0ff,
            skyblue: 0x87ceebff,
            slateblue: 0x6a5acdff,
            slategray: 0x708090ff,
            slategrey: 0x708090ff,
            snow: 0xfffafaff,
            springgreen: 0x00ff7fff,
            steelblue: 0x4682b4ff,
            tan: 0xd2b48cff,
            teal: 0x008080ff,
            thistle: 0xd8bfd8ff,
            tomato: 0xff6347ff,
            turquoise: 0x40e0d0ff,
            violet: 0xee82eeff,
            wheat: 0xf5deb3ff,
            white: 0xffffffff,
            whitesmoke: 0xf5f5f5ff,
            yellow: 0xffff00ff,
            yellowgreen: 0x9acd32ff
        };


        module.exports = normalizeColor;

        /***/
    },
    /* 324 */
    /***/
    function(module, exports, __webpack_require__) {



        'use strict';
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor;
            };
        }();

        var _react = __webpack_require__(10);
        var _react2 = _interopRequireDefault(_react);
        var _StyleSheet = __webpack_require__(39);
        var _StyleSheet2 = _interopRequireDefault(_StyleSheet);
        var _View = __webpack_require__(27);
        var _View2 = _interopRequireDefault(_View);
        var _Image = __webpack_require__(202);
        var _Image2 = _interopRequireDefault(_Image);
        var _Platform = __webpack_require__(311);
        var _Platform2 = _interopRequireDefault(_Platform);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
            }
        }

        function _possibleConstructorReturn(self, call) {
            if (!self) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            }
            return call && (typeof call === "object" || typeof call === "function") ? call : self;
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
        }



        var defualtTrackHeight = 2;
        var



            ProgressView = function(_Component) {
            _inherits(ProgressView, _Component);

            function ProgressView(props) {
                _classCallCheck(this, ProgressView);
                var _this = _possibleConstructorReturn(this, (ProgressView.__proto__ || Object.getPrototypeOf(ProgressView)).call(this,
                    props));

                _this.state = {
                    visible: false,
                    trackWidth: 0,
                    progressWidth: 0
                };
                return _this;

            }
            _createClass(ProgressView, [{
                key: 'componentWillReceiveProps',
                value: function componentWillReceiveProps()

                {
                    if (this.state.visible) {
                        var progress = this.props.progress;

                        if (progress > 1) {
                            progress = 1;
                        } else if (progress < 0) {
                            progress = 0;
                        }

                        var
                            trackWidth = this.state.trackWidth,
                            progressNewPosition = progress * trackWidth;

                        this.setState({
                            progressWidth: progressNewPosition
                        });

                    }
                }
            }, {
                key: 'render',
                value: function render()

                {
                    var _this2 = this;
                    var _props =
                        this.props,
                        progress = _props.progress,
                        progressImage = _props.progressImage,
                        progressTintColor = _props.progressTintColor,
                        progressViewStyle = _props.progressViewStyle,
                        trackImage = _props.trackImage,
                        trackTintColor = _props.trackTintColor;

                    var
                        trackStyle = {
                            backgroundColor: trackTintColor,
                            borderRadius: progressViewStyle === 'bar' ? 0 : defualtTrackHeight
                        },

                        progressStyle = {
                            width: this.state.progressWidth,
                            backgroundColor: progressTintColor,
                            borderRadius: progressViewStyle === 'bar' ? 0 : defualtTrackHeight
                        },

                        trackImageStyle = {
                            width: this.state.trackWidth
                        },

                        progressImageStyle = {
                            width: this.state.progressWidth
                        };


                    return (
                        (this && this.createElement || _react2.default.createElement)(_View2.default, {
                                style: [styles.track, trackStyle],
                                ref: 'track',
                                onLayout: function onLayout(event) {
                                    return _this2.initLayout(event);
                                }
                            },
                            trackImage ? (this && this.createElement || _react2.default.createElement)(_Image2.default, {
                                style: [styles.img, trackImageStyle],
                                source: trackImage
                            }) : null,
                            (this && this.createElement || _react2.default.createElement)(_View2.default, {
                                    style: [styles.progress, progressStyle]
                                },
                                progressImage ? (this && this.createElement || _react2.default.createElement)(_Image2.default, {
                                    style: [styles.img, progressImageStyle],
                                    source: progressImage
                                }) : null)));



                }
            }, {
                key: 'initLayout',
                value: function initLayout(

                    e) {
                    if (!this.state.visible) {
                        var progress = this.props.progress;

                        if (progress > 1) {
                            progress = 1;
                        } else if (progress < 0) {
                            progress = 0;
                        }

                        var
                            trackWidth = e.nativeEvent.layout.width,
                            progressInitPosition = progress * trackWidth;

                        this.setState({
                            trackWidth: trackWidth,
                            progressWidth: progressInitPosition,
                            visible: true
                        });

                    }
                }
            }]);
            return ProgressView;
        }(_react.Component);


        ProgressView.defaultProps = {
            progress: 0,
            progressTintColor: '#0b6aff',
            trackTintColor: '#b6b6b6'
        };


        ProgressView.propTypes = {



            progress: _react2.default.PropTypes.number,



            progressImage: _Platform2.default.OS === 'ios' ? _Image2.default.propTypes.source : _react2.default.PropTypes.any,



            progressTintColor: _react2.default.PropTypes.string,



            progressViewStyle: _react2.default.PropTypes.oneOf(['default', 'bar']),



            trackImage: _Platform2.default.OS === 'ios' ? _Image2.default.propTypes.source : _react2.default.PropTypes.any,



            trackTintColor: _react2.default.PropTypes.string
        };


        var styles = _StyleSheet2.default.create({
            track: {
                alignSelf: 'stretch',
                overflow: 'hidden',
                height: defualtTrackHeight
            },

            progress: {
                height: defualtTrackHeight
            },

            img: {
                position: 'absolute',
                top: 0,
                left: 0,
                resizeMode: 'stretch'
            }
        });



        module.exports = ProgressView;

        /***/
    },
    /* 325 */
    /***/
    function(module, exports, __webpack_require__) {



        'use strict';
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor;
            };
        }();

        var _reactNative = __webpack_require__(6);
        var _reactNative2 = _interopRequireDefault(_reactNative);
        var _TabBarItem = __webpack_require__(326);
        var _TabBarItem2 = _interopRequireDefault(_TabBarItem);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
            }
        }

        function _possibleConstructorReturn(self, call) {
            if (!self) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            }
            return call && (typeof call === "object" || typeof call === "function") ? call : self;
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
        }
        var



            TabBar = function(_Component) {
            _inherits(TabBar, _Component);

            function TabBar(props) {
                _classCallCheck(this, TabBar);
                var _this = _possibleConstructorReturn(this, (TabBar.__proto__ || Object.getPrototypeOf(TabBar)).call(this,
                    props));
                _this.state = {};
                return _this;
            }
            _createClass(TabBar, [{
                key: 'render',
                value: function render()

                {
                    var _props =
                        this.props,
                        barTintColor = _props.barTintColor,
                        tintColor = _props.tintColor,
                        translucent = _props.translucent,
                        style = _props.style,
                        children = _props.children;
                    var barStyle = {
                        backgroundColor: barTintColor,
                        opacity: translucent ? 0.7 : 1
                    };


                    return (
                        (this && this.createElement || _reactNative2.default.createElement)(_reactNative.View, {
                                style: [styles.container]
                            },
                            children.map(function(item, i) {
                                return (
                                    item.props.selected ? item.props.children : null);
                            }),

                            (this && this.createElement || _reactNative2.default.createElement)(_reactNative.View, {
                                    style: [styles.tabBar, style, barStyle]
                                },
                                children.map(function(item, i) {
                                    return (
                                        _reactNative2.default.cloneElement(item, {
                                            tintColor: tintColor
                                        }));
                                }))));



                }
            }]);
            return TabBar;
        }(_reactNative.Component);


        TabBar.defaultProps = {
            barTintColor: '#fff',
            tintColor: '#00afc7',
            translucent: false
        };


        TabBar.propTypes = {



            barTintColor: _reactNative2.default.PropTypes.string,



            tintColor: _reactNative2.default.PropTypes.string,



            translucent: _reactNative2.default.PropTypes.bool,



            style: _reactNative.View.propTypes.style
        };


        TabBar.item = _TabBarItem2.default;

        var styles = _reactNative.StyleSheet.create({
            container: {
                flex: 1
            },

            tabBar: {
                position: 'absolute',
                bottom: 0,
                right: 0,
                left: 0,
                height: 50,
                flexDirection: 'row',
                justifyContent: 'center',
                alignItems: 'center'
            }
        });



        module.exports = TabBar;

        /***/
    },
    /* 326 */
    /***/
    function(module, exports, __webpack_require__) {



        'use strict';
        var _extends = Object.assign || function(target) {
            for (var i = 1; i < arguments.length; i++) {
                var source = arguments[i];
                for (var key in source) {
                    if (Object.prototype.hasOwnProperty.call(source, key)) {
                        target[key] = source[key];
                    }
                }
            }
            return target;
        };
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor;
            };
        }();

        var _reactNative = __webpack_require__(6);
        var _reactNative2 = _interopRequireDefault(_reactNative);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
            }
        }

        function _possibleConstructorReturn(self, call) {
            if (!self) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            }
            return call && (typeof call === "object" || typeof call === "function") ? call : self;
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
        }

        var DEFAULT_ICON_TINT_COLOR = '#929292';
        var DEFAULT_BADGE_SIZE = 16;
        var



            TabBarItem = function(_Component) {
            _inherits(TabBarItem, _Component);

            function TabBarItem(props) {
                _classCallCheck(this, TabBarItem);
                var _this = _possibleConstructorReturn(this, (TabBarItem.__proto__ || Object.getPrototypeOf(TabBarItem)).call(this,
                    props));
                _this.state = {
                    badgeVisible: false,
                    tabItemWidth: 0
                };
                return _this;

            }
            _createClass(TabBarItem, [{
                key: 'render',
                value: function render()

                {
                    var _this2 = this;
                    var _props =
                        this.props,
                        icon = _props.icon,
                        iconStyle = _props.iconStyle,
                        titleStyle = _props.titleStyle,
                        badgeStyle = _props.badgeStyle,
                        style = _props.style,
                        title = _props.title,
                        tintColor = _props.tintColor,
                        selected = _props.selected,
                        _onPress = _props.onPress,
                        badge = _props.badge,
                        renderIcon = _props.renderIcon;
                    var _state =
                        this.state,
                        tabItemWidth = _state.tabItemWidth,
                        badgeVisible = _state.badgeVisible;

                    var
                        selectedIconStyle = {
                            tintColor: selected ? tintColor : iconStyle.color ? iconStyle.color : DEFAULT_ICON_TINT_COLOR
                        },

                        selectedTextStyle = {
                            color: selected ? tintColor : titleStyle.color ? titleStyle.color : DEFAULT_ICON_TINT_COLOR
                        },

                        badgePosition = {
                            left: tabItemWidth / 2 + 1
                        },

                        customIcon = renderIcon ? renderIcon() : null;

                    return (
                        (this && this.createElement || _reactNative2.default.createElement)(_reactNative.TouchableOpacity, {
                                activeOpacity: 1,
                                style: [styles.item, style],
                                onPress: function onPress() {
                                    return _onPress ? _onPress() : null;
                                },
                                onLayout: function onLayout(event) {
                                    return _this2.initLayout(event);
                                }
                            },


                            customIcon ?
                            _reactNative2.default.cloneElement(customIcon, {
                                style: _extends({},
                                    customIcon.props.style,
                                    iconStyle, {
                                        color: selected ? tintColor : iconStyle.color ? iconStyle.color : DEFAULT_ICON_TINT_COLOR
                                    })
                            }) :


                            (this && this.createElement || _reactNative2.default.createElement)(_reactNative.Image, {
                                style: [styles.itemIcon, iconStyle, selectedIconStyle],
                                source: icon
                            }),

                            (this && this.createElement || _reactNative2.default.createElement)(_reactNative.Text, {
                                style: [styles.itemText, titleStyle, selectedTextStyle]
                            }, title),
                            badge && badgeVisible ?
                            (this && this.createElement || _reactNative2.default.createElement)(_reactNative.View, {
                                    style: [styles.itemBadge, badgePosition, badgeStyle]
                                },
                                (this && this.createElement || _reactNative2.default.createElement)(_reactNative.Text, {
                                    style: styles.itemBadgeText
                                }, badge)) :

                            null));


                }
            }, {
                key: 'initLayout',
                value: function initLayout(

                    e) {
                    if (!this.state.badgeVisible) {
                        this.setState({
                            badgeVisible: true,
                            tabItemWidth: e.nativeEvent.layout.width
                        });

                    }
                }
            }]);
            return TabBarItem;
        }(_reactNative.Component);


        TabBarItem.defaultProps = {};


        TabBarItem.propTypes = {



            badge: _reactNative2.default.PropTypes.oneOfType([_reactNative2.default.PropTypes.string, _reactNative2.default.PropTypes.number]),



            badgeStyle: _reactNative.View.propTypes.style,



            icon: _reactNative.Image.propTypes.source,



            renderIcon: _reactNative2.default.PropTypes.func,



            onPress: _reactNative2.default.PropTypes.func,



            selected: _reactNative2.default.PropTypes.bool,



            style: _reactNative.View.propTypes.style,



            iconStyle: _reactNative.Text.propTypes.style,



            titleStyle: _reactNative.Text.propTypes.style,



            title: _reactNative2.default.PropTypes.string
        };


        var styles = _reactNative.StyleSheet.create({
            item: {
                flex: 1,
                height: 50,
                justifyContent: 'center',
                alignItems: 'center'
            },

            itemIcon: {
                width: 28,
                height: 28,
                resizeMode: 'contain',
                tintColor: DEFAULT_ICON_TINT_COLOR
            },

            itemText: {
                fontSize: 10,
                textAlign: 'center',
                color: DEFAULT_ICON_TINT_COLOR
            },

            itemBadge: {
                position: 'absolute',
                top: 1,
                paddingTop: 2,
                paddingBottom: 2,
                paddingLeft: 4,
                paddingRight: 4,

                height: DEFAULT_BADGE_SIZE,
                backgroundColor: '#f00',
                borderRadius: DEFAULT_BADGE_SIZE / 2,
                justifyContent: 'center',
                alignItems: 'center',
                overflow: 'hidden'
            },

            itemBadgeText: {
                fontSize: 12,
                color: '#fff'
            }
        });



        module.exports = TabBarItem;

        /***/
    },
    /* 327 */
    /***/
    function(module, exports, __webpack_require__) {



        'use strict';
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor;
            };
        }();



        var _react = __webpack_require__(10);
        var _react2 = _interopRequireDefault(_react);
        var _Text = __webpack_require__(67);
        var _Text2 = _interopRequireDefault(_Text);
        var _TouchableWithoutFeedback = __webpack_require__(187);
        var _TouchableWithoutFeedback2 = _interopRequireDefault(_TouchableWithoutFeedback);
        var _View = __webpack_require__(27);
        var _View2 = _interopRequireDefault(_View);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
            }
        }

        function _possibleConstructorReturn(self, call) {
            if (!self) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            }
            return call && (typeof call === "object" || typeof call === "function") ? call : self;
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
        }

        var defaultProps = {
            disabled: false,
            text: 'Button',
            style: {
                backgroundColor: '#ffffff',
                borderColor: '#1ba9ba',
                borderWidth: 1,
                borderRadius: 5,
                padding: 5,
                alignItems: 'center',
                justifyContent: 'center',
                alignSelf: 'center'
            },

            activedStyle: {
                opacity: 0.4
            },

            disabledStyle: {
                opacity: 0.4
            },

            textStyle: {
                color: '#1ba9ba',
                fontSize: 14
            }
        };
        var



            Button = function(_Component) {
            _inherits(Button, _Component);

            function Button(props) {
                _classCallCheck(this, Button);
                var _this = _possibleConstructorReturn(this, (Button.__proto__ || Object.getPrototypeOf(Button)).call(this,
                    props));
                _this.state = {
                    actived: false
                };
                return _this;

            }
            _createClass(Button, [{
                key: '_onPressIn',
                value: function _onPressIn(

                    e) {
                    if (this.props.disabled) {
                        return;
                    }
                    clearTimeout(this._hideTimeout);
                    this._hideTimeout = null;
                    this.setState({
                        actived: true
                    });
                    this.props.onPressIn && this.props.onPressIn(e);
                }
            }, {
                key: '_onPress',
                value: function _onPress(

                    e) {
                    var _this2 = this;
                    if (this.props.disabled) {
                        return;
                    }
                    clearTimeout(this._hideTimeout);
                    this.setState({
                        actived: true
                    });
                    this._hideTimeout = setTimeout(function() {
                        _this2.setState({
                            actived: false
                        });
                    }, 100);
                    this.props.onPress && this.props.onPress(e);
                }
            }, {
                key: '_onPressOut',
                value: function _onPressOut(

                    e) {
                    if (this.props.disabled) {
                        return;
                    }
                    if (!this._hideTimeout) {
                        this.setState({
                            actived: false
                        });
                    }
                    this.props.onPressOut && this.props.onPressOut(e);
                }
            }, {
                key: 'render',
                value: function render()

                {
                    var _this3 = this;
                    var props = this.props;

                    var style = [defaultProps.style, props.style],
                        textStyle = [defaultProps.textStyle, props.textStyle],
                        text = props.text,
                        activedStyle = [style, props.activedStyle],
                        disabledStyle = [style, defaultProps.disabledStyle, props.disabledStyle],
                        activedTextStyle = [textStyle, props.activedTextStyle],
                        disabledTextStyle = [textStyle, props.disabledTextStyle],
                        activedText = props.activedText || text,
                        disabledText = props.disabledText || text;

                    var styleFinal = void 0,
                        textStyleFinal = void 0,
                        textFinal = void 0;
                    if (props.disabled) {
                        styleFinal = disabledStyle;
                        textStyleFinal = disabledTextStyle;
                        textFinal = disabledText;
                    } else if (this.state.actived) {
                        styleFinal = activedStyle;
                        textStyleFinal = activedTextStyle;
                        textFinal = activedText;
                    } else {
                        styleFinal = style;
                        textStyleFinal = textStyle;
                        textFinal = text;
                    }

                    return (
                        (this && this.createElement || _react2.default.createElement)(_TouchableWithoutFeedback2.default, {
                                disabled: props.disabled,
                                onPress: this._onPress.bind(this),
                                onPressIn: this._onPressIn.bind(this),
                                onPressOut: this._onPressOut.bind(this),
                                onLongPress: function onLongPress() {
                                    props.onLongPress && props.onLongPress.apply(_this3);
                                }
                            },


                            (this && this.createElement || _react2.default.createElement)(_View2.default, {
                                    style: styleFinal
                                },
                                (this && this.createElement || _react2.default.createElement)(_Text2.default, {
                                        style: textStyleFinal
                                    },
                                    textFinal))));



                }
            }]);
            return Button;
        }(_react.Component);


        Button.defaultProps = defaultProps;
        Button.propTypes = {



            disabled: _react2.default.PropTypes.bool,



            onPress: _react2.default.PropTypes.func,



            onLongPress: _react2.default.PropTypes.func,



            onPressIn: _react2.default.PropTypes.func,



            onPressOut: _react2.default.PropTypes.func,



            text: _react2.default.PropTypes.string,



            activedText: _react2.default.PropTypes.string,



            disabledText: _react2.default.PropTypes.string,



            style: _View2.default.propTypes.style,



            activedStyle: _View2.default.propTypes.style,



            disabledStyle: _View2.default.propTypes.style,



            textStyle: _Text2.default.propTypes.style,



            activedTextStyle: _Text2.default.propTypes.style,



            disabledTextStyle: _Text2.default.propTypes.style
        };


        module.exports = Button;

        /***/
    },
    /* 328 */
    /***/
    function(module, exports, __webpack_require__) {



        'use strict';
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor;
            };
        }();
        var _react = __webpack_require__(10);
        var _react2 = _interopRequireDefault(_react);
        var _reactNative = __webpack_require__(6);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
            }
        }

        function _possibleConstructorReturn(self, call) {
            if (!self) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            }
            return call && (typeof call === "object" || typeof call === "function") ? call : self;
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
        }

        var PULLSTART = 'pullStartContent';
        var PULLCONTINUE = 'pullContinueContent';
        var REFRESHING = 'refreshingContent';
        var SUCCESS = 'successContent';
        var FAIL = 'failContent';
        var



            RefreshControl = function(_Component) {
            _inherits(RefreshControl, _Component);

            function RefreshControl(props) {
                _classCallCheck(this, RefreshControl);
                var _this = _possibleConstructorReturn(this, (RefreshControl.__proto__ || Object.getPrototypeOf(RefreshControl)).call(this,
                    props));

                _this.state = {
                    status: PULLSTART,
                    angle: 0,
                    loadingAngle: new _reactNative.Animated.Value(0)
                };


                _this.isAnimating = false;
                return _this;
            }
            _createClass(RefreshControl, [{
                key: '_animate',
                value: function _animate()

                {
                    var _this2 = this;
                    if (!this.isAnimating) {
                        return;
                    }

                    this.state.loadingAngle.setValue(0);
                    this._anim = _reactNative.Animated.timing(this.state.loadingAngle, {
                        toValue: 1,
                        duration: 1000,
                        easing: _reactNative.Easing.linear
                    }).
                    start(function() {
                        return _this2._animate();
                    });
                }
            }, {
                key: 'onScroll',
                value: function onScroll(

                    offset) {
                    if (this.props.isRefreshing || typeof this.props.refreshResult === 'boolean') {
                        return;
                    }
                    var

                        height = this.props.height;
                    var angle = 0;



                    if (offset.y >= 0.8 * height && offset.y <= height) {

                        var step = 180 / ((1 - 0.8) * height);
                        angle = (offset.y - 0.8 * height) * step;
                    } else

                    if (offset.y < 0.8 * height) {
                        angle = 0;
                    } else

                    {
                        angle = 180;
                    }

                    if (offset.y >= height && this.state.status !== PULLCONTINUE) {
                        this.setState({
                            status: PULLCONTINUE,
                            angle: angle
                        });

                    } else if (offset.y < height && this.state.status !== PULLSTART) {
                        this.setState({
                            status: PULLSTART,
                            angle: angle
                        });

                    } else {

                        if (this.state.angle !== angle) {
                            this.setState({
                                angle: angle
                            });

                        }
                    }
                }
            }, {
                key: 'onRelease',
                value: function onRelease(


                    offset, startFn, stopFn) {
                    var
                        height = this.props.height;

                    if (this.props.isRefreshing) {
                        return;
                    }

                    if (offset.y >= height) {
                        startFn();
                    }
                }
            }, {
                key: 'onRefresh',
                value: function onRefresh()

                {
                    this.props.onRefresh && this.props.onRefresh();
                }
            }, {
                key: 'componentWillUpdate',
                value: function componentWillUpdate(

                    nextProps) {
                    if (this.props.isRefreshing && !nextProps.isRefreshing) {
                        this.isAnimating = false;

                        if (this._anim) {
                            this._anim.stop();
                            this._anim = null;
                        }
                    }
                }
            }, {
                key: 'componentDidUpdate',
                value: function componentDidUpdate(

                    prevProps) {
                    if (!prevProps.isRefreshing && this.props.isRefreshing) {
                        this.isAnimating = true;
                        this._animate();
                    }
                }
            }, {
                key: 'componentWillUnmount',
                value: function componentWillUnmount()

                {
                    this.isAnimating = false;

                    if (this._anim) {
                        this._anim.stop();
                        this._anim = null;
                    }
                }
            }, {
                key: 'render',
                value: function render()

                {
                    var _props =
                        this.props,
                        customStyle = _props.style,
                        customIconStyle = _props.iconStyle,
                        customTextStyle = _props.textStyle;
                    var iconContent = void 0,
                        content = void 0;

                    if (typeof this.props.refreshResult === 'boolean') {
                        iconContent =
                            (this && this.createElement || _react2.default.createElement)(_reactNative.Text, {
                                    style: [styles.icon, customIconStyle]
                                },

                                this.props.refreshResult ? this.props.successIcon : this.props.failIcon);


                        content = this.props.refreshResult ? this.props[SUCCESS] : this.props[FAIL];
                    } else if (this.props.isRefreshing) {
                        iconContent =
                            (this && this.createElement || _react2.default.createElement)(_reactNative.Animated.Text, {
                                    style: [styles.icon, {
                                            transform: [{
                                                rotate: this.state.loadingAngle.interpolate({
                                                    inputRange: [0, 1],
                                                    outputRange: ['0deg', '360deg']
                                                })
                                            }]
                                        },


                                        customIconStyle
                                    ]
                                },


                                this.props.refreshingIcon);


                        content = this.props[REFRESHING];
                    } else {
                        iconContent =
                            (this && this.createElement || _react2.default.createElement)(_reactNative.Text, {
                                    style: [styles.icon, {
                                            transform: [{
                                                rotate: this.state.angle + 'deg'
                                            }]
                                        },

                                        customIconStyle
                                    ]
                                },

                                this.props.pullIcon);


                        content = this.props[this.state.status];
                    }

                    return (
                        (this && this.createElement || _react2.default.createElement)(_reactNative.View, {
                                style: [styles.container, customStyle, {
                                    height: this.props.height
                                }]
                            },
                            iconContent,
                            (this && this.createElement || _react2.default.createElement)(_reactNative.Text, {
                                style: [styles.content, customTextStyle]
                            }, content)));


                }
            }]);
            return RefreshControl;
        }(_react.Component);


        RefreshControl.defaultProps = {
            height: 35,
            pullStartContent: '下拉可以刷新',
            pullContinueContent: '松开即可刷新',
            pullIcon: '\uF07B',
            refreshingContent: '努力加载中',
            refreshingIcon: '\uF089',
            successContent: '加载成功',
            successIcon: '\uF078',
            failContent: '加载失败',
            failIcon: '\uF077'
        };


        RefreshControl.propTypes = {



            height: _react.PropTypes.number,



            pullStartContent: _react.PropTypes.string,



            pullContinueContent: _react.PropTypes.string,



            pullIcon: _react.PropTypes.string,



            refreshingContent: _react.PropTypes.string,



            refreshingIcon: _react.PropTypes.string,



            successContent: _react.PropTypes.string,



            successIcon: _react.PropTypes.string,



            failContent: _react.PropTypes.string,



            failIcon: _react.PropTypes.string,



            onRefresh: _react.PropTypes.func,



            style: _reactNative.View.propTypes.style,



            iconStyle: _reactNative.Text.propTypes.style,



            textStyle: _reactNative.Text.propTypes.style
        };


        var styles = _reactNative.StyleSheet.create({
            container: {
                flex: 1,
                alignItems: 'center',
                justifyContent: 'center',
                flexDirection: 'row',
                borderLeftWidth: 1,
                borderRightWidth: 1,
                borderColor: 'transparent'
            },

            content: {
                color: '#1ba9ba',
                fontSize: 14
            },

            icon: {
                color: '#1ba9ba',
                fontSize: 16,
                fontFamily: 'qunar_react_native',
                width: 16,
                height: 16,
                marginRight: 3
            }
        });



        module.exports = RefreshControl;

        /***/
    },
    /* 329 */
    /***/
    function(module, exports, __webpack_require__) {



        'use strict';
        var _extends = Object.assign || function(target) {
            for (var i = 1; i < arguments.length; i++) {
                var source = arguments[i];
                for (var key in source) {
                    if (Object.prototype.hasOwnProperty.call(source, key)) {
                        target[key] = source[key];
                    }
                }
            }
            return target;
        };
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor;
            };
        }();

        var _react = __webpack_require__(10);
        var _react2 = _interopRequireDefault(_react);
        var _reactDom = __webpack_require__(10);
        var _reactDom2 = _interopRequireDefault(_reactDom);
        var _StyleSheet = __webpack_require__(39);
        var _StyleSheet2 = _interopRequireDefault(_StyleSheet);
        var _PanResponder = __webpack_require__(195);
        var _PanResponder2 = _interopRequireDefault(_PanResponder);
        var _View = __webpack_require__(27);
        var _View2 = _interopRequireDefault(_View);
        var _Resizable = __webpack_require__(330);
        var _Resizable2 = _interopRequireDefault(_Resizable);
        var _TextInput = __webpack_require__(331);
        var _fastdom = __webpack_require__(30);
        var _fastdom2 = _interopRequireDefault(_fastdom);
        var _deepDiffer = __webpack_require__(332);
        var _deepDiffer2 = _interopRequireDefault(_deepDiffer);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
            }
        }

        function _possibleConstructorReturn(self, call) {
            if (!self) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            }
            return call && (typeof call === "object" || typeof call === "function") ? call : self;
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
        }

        function noop() {}

        var BOUNCETIME = 600;
        var PAGEINGTIME = 300;
        var SCROLLTO_DURATION = 300;
        var SCROLLMOVE_THRESHOLD = 5;
        var SCROLLMOVE_TIME = 300;
        var INDICATOR_WIDTH = 2.5;
        var INDICATOR_MIN_SHOW_LENGTH = 40;
        var INDICATOR_MIN_SHOW_WIDTH = 40;
        var INDICATOR_GAP = 6;
        var INDICATOR_GAP_EDGE = 3;
        var INDICATOR_OPACITY = 0.4;


        var commonTransform = __webpack_require__(39).transformKey;


        var styles = _StyleSheet2.default.create({
            scrollBase: {
                flex: 1
            },

            scrollView: {
                position: 'relative',
                flex: 1,
                overflow: 'hidden'
            },

            scrollViewInset: {
                position: 'absolute',
                left: 0,
                right: 0,
                top: 0,
                bottom: 0,
                overflow: 'hidden',
                zIndex: 1
            },

            scroller: {



                position: 'absolute'
            },

            scrollerHorizontal: {
                alignSelf: 'flex-start',
                flexDirection: 'row',
                overflowY: 'hidden'
            },


            refreshControl: {
                position: 'absolute',
                left: 0,
                right: 0
            },


            indicator: {
                position: 'absolute',
                borderWidth: 1,
                borderColor: '#444',
                borderRadius: 1,
                backgroundColor: '#444',
                opacity: 0,
                width: 0,
                height: 0,
                transform: [{
                    translateX: 0
                }, {
                    translateY: 0
                }, {
                    translateZ: 0
                }],

                zIndex: 3
            },


            indicatorHorizontal: {
                height: INDICATOR_WIDTH,
                bottom: INDICATOR_GAP_EDGE,
                left: INDICATOR_GAP
            },


            indicatorVertical: {
                width: INDICATOR_WIDTH,
                right: INDICATOR_GAP_EDGE,
                top: INDICATOR_GAP
            },


            stickyWrapper: {
                position: 'absolute',
                left: 0,
                top: 0,
                right: 0,
                zIndex: 2
            }
        });



        var utils = {
            getTime: Date.now || function getTime() {
                return new Date().getTime();
            },
            ease: {
                quadratic: {
                    style: 'cubic-bezier(0.25, 0.46, 0.45, 0.94)',
                    fn: function fn(k) {
                        return k * (2 - k);
                    }
                },

                circular: {
                    style: 'cubic-bezier(0.1, 0.57, 0.1, 1)',
                    fn: function fn(k) {
                        return Math.sqrt(1 - --k * k);
                    }
                },

                back: {
                    style: 'cubic-bezier(0.175, 0.885, 0.32, 1.275)',
                    fn: function fn(k) {
                        var b = 4;
                        return (k = k - 1) * k * ((b + 1) * k + b) + 1;
                    }
                },

                bounce: {
                    style: '',
                    fn: function fn(k) {
                        if ((k /= 1) < 1 / 2.75) {
                            return 7.5625 * k * k;
                        } else if (k < 2 / 2.75) {
                            return 7.5625 * (k -= 1.5 / 2.75) * k + 0.75;
                        } else if (k < 2.5 / 2.75) {
                            return 7.5625 * (k -= 2.25 / 2.75) * k + 0.9375;
                        } else {
                            return 7.5625 * (k -= 2.625 / 2.75) * k + 0.984375;
                        }
                    }
                },

                elastic: {
                    style: '',
                    fn: function fn(k) {
                        var f = 0.22,
                            e = 0.4;

                        if (k === 0) {
                            return 0;
                        }
                        if (k === 1) {
                            return 1;
                        }

                        return e * Math.pow(2, -10 * k) * Math.sin((k - f / 4) * (2 * Math.PI) / f) + 1;
                    }
                }
            },


            momentum: function momentum(current, start, time, lowerMargin, wrapperSize, deceleration) {
                var distance = current - start,
                    speed = Math.abs(distance) / time,
                    destination,
                    duration;

                deceleration = deceleration === undefined ? 0.0006 : deceleration;

                destination = current + speed * speed / (2 * deceleration) * (distance < 0 ? -1 : 1);
                duration = speed / deceleration;

                if (destination < lowerMargin) {
                    destination = wrapperSize ? lowerMargin - wrapperSize / 2.5 * (speed / 8) : lowerMargin;
                    distance = Math.abs(destination - current);
                    duration = distance / speed;
                } else if (destination > 0) {
                    destination = wrapperSize ? wrapperSize / 2.5 * (speed / 8) : 0;
                    distance = Math.abs(current) + destination;
                    duration = distance / speed;
                }

                return {
                    destination: Math.round(destination),
                    duration: duration
                };

            },
            getDeceleration: function getDeceleration(deceleration) {
                var FAST = 0.9;
                var NORMAL = 0.9994;
                if (typeof deceleration === 'string') {
                    if (deceleration === 'fast') {
                        return (1 - FAST).toFixed(4);
                    }
                    if (deceleration === 'normal') {
                        return (1 - NORMAL).toFixed(4);
                    }
                }
                return (1 - deceleration).toFixed(4);
            }
        };
        var



            QScrollView = function(_Component) {
            _inherits(QScrollView, _Component);



            function QScrollView(props) {
                _classCallCheck(this, QScrollView);
                var _this = _possibleConstructorReturn(this, (QScrollView.__proto__ || Object.getPrototypeOf(QScrollView)).call(this,
                    props));
                _this.state = {
                    isRefreshing: false,
                    isLoading: false,
                    refreshResult: undefined,
                    stickyItemIndex: null,
                    indicatorVerticalHeight: 0,
                    indicatorHorizontalWidth: 0
                };


                _this.scrollerWidth = _this.scrollerHeight = 0;
                _this.contentOffset = {
                    x: 0,
                    y: 0
                };

                _this._updateByProps(props);
                return _this;
            }
            _createClass(QScrollView, [{
                key: '_updateByProps',
                value: function _updateByProps(

                    props) {

                    this.alwaysBounceHorizontal = props.alwaysBounceHorizontal !== undefined ? props.alwaysBounceHorizontal : props.horizontal;
                    this.alwaysBounceVertical = props.alwaysBounceVertical !== undefined ? props.alwaysBounceVertical : !props.horizontal;
                    if (!props.bounces) {
                        this.alwaysBounceHorizontal = false;
                        this.alwaysBounceVertical = false;
                    }

                    if (props.pagingEnabled) {
                        props.horizontal ? this.alwaysBounceVertical = false : this.alwaysBounceHorizontal = false;
                    }


                    this.showsVerticalScrollIndicator = !props.horizontal ? props.showsVerticalScrollIndicator : false;
                    this.showsHorizontalScrollIndicator = props.horizontal ? props.showsHorizontalScrollIndicator : false;


                    this.deceleration = utils.getDeceleration(props.decelerationRate);



                    if (props.contentOffset) {
                        this.contentOffset = {
                            x: props.contentOffset.x,
                            y: props.contentOffset.y
                        };

                    }
                    this.contentInset = _extends({}, props.contentInset);



                    this.curPage = 0;
                }
            }, {
                key: 'componentWillMount',
                value: function componentWillMount()


                {
                    this._panResponder = _PanResponder2.default.create({
                        onStartShouldSetPanResponder: this._onStartShouldSetPanResponder.bind(this),
                        onStartShouldSetPanResponderCapture: this._onStartShouldSetPanResponderCapture.bind(this),
                        onMoveShouldSetPanResponder: this._onMoveShouldSetPanResponder.bind(this),
                        onMoveShouldSetPanResponderCapture: this._onMoveShouldSetPanResponderCapture.bind(this),
                        onPanResponderGrant: this._onPanResponderGrant.bind(this),
                        onPanResponderMove: this._onPanResponderMove.bind(this),
                        onPanResponderRelease: this._onPanResponderRelease.bind(this),
                        onPanResponderTerminationRequest: this._onPanResponderTerminationRequest.bind(this),
                        onPanResponderTerminate: this._onPanResponderTerminate.bind(this)
                    });

                }
            }, {
                key: 'componentDidMount',
                value: function componentDidMount()

                {
                    var _this2 = this;
                    var props = this.props;
                    this.wrapper = _reactDom2.default.findDOMNode(this.refs.wrapper);
                    this.scroller = _reactDom2.default.findDOMNode(this.refs.scroller);

                    this.refreshControl = this.refs.refreshControl;
                    this.loadControl = this.refs.loadControl;

                    this.indicatorVertical = _reactDom2.default.findDOMNode(this.refs.indicatorVertical);
                    this.indicatorHorizontal = _reactDom2.default.findDOMNode(this.refs.indicatorHorizontal);

                    this.stickyWrapperDOM = _reactDom2.default.findDOMNode(this.refs.stickyWrapper);


                    this.stickyHeaderIndices = [];
                    if (props.stickyHeaderIndices && !props.horizontal) {
                        props.stickyHeaderIndices.forEach(function(item) {
                            var newItem = props.refreshControl ? item + 1 : item;
                            var itemDOM = _this2.scroller.childNodes[newItem] || {};
                            _this2.stickyHeaderIndices.push({
                                itemIndex: newItem,
                                itemDOM: itemDOM,
                                itemOffset: itemDOM.offsetTop,
                                itemHeight: itemDOM.offsetHeight,
                                itemStickState: null
                            });

                        });

                        this.stickyItem = {
                            index: -1,
                            state: null,
                            transformValue: null
                        };


                    }
                    this._scrollTo(-this.contentOffset.x, -this.contentOffset.y);
                }
            }, {
                key: 'componentWillReceiveProps',
                value: function componentWillReceiveProps(

                    nextProps) {
                    this._updateByProps(nextProps);
                }
            }, {
                key: 'componentDidUpdate',
                value: function componentDidUpdate(

                    prevProps, prevState) {
                    var _this3 = this;

                    var props = this.props;
                    this._scrollTo(-this.contentOffset.x, -this.contentOffset.y);

                    if ((0, _deepDiffer2.default)(prevProps.stickyHeaderIndices, props.stickyHeaderIndices)) {
                        this.stickyHeaderIndices = [];
                        props.stickyHeaderIndices.forEach(function(item) {
                            var newItem = props.refreshControl ? item + 1 : item;
                            var itemDOM = _this3.scroller.childNodes[newItem] || {};
                            _this3.stickyHeaderIndices.push({
                                itemIndex: newItem,
                                itemDOM: itemDOM,
                                itemOffset: itemDOM.offsetTop,
                                itemHeight: itemDOM.offsetHeight,
                                itemStickState: null
                            });

                        });
                    }
                }
            }, {
                key: 'componentWillUnmount',
                value: function componentWillUnmount() {
                    this.unMounted = true;
                }
            }, {
                key: '_onStartShouldSetPanResponder',
                value: function _onStartShouldSetPanResponder(
                    e) {
                    return this.props.scrollEnabled;
                }
            }, {
                key: '_onStartShouldSetPanResponderCapture',
                value: function _onStartShouldSetPanResponderCapture(

                    e) {

                    var point = e.nativeEvent.touches[0];
                    this.pointX = point.pageX;
                    this.pointY = point.pageY;


                    return this.isMoving;
                }
            }, {
                key: '_onMoveShouldSetPanResponder',
                value: function _onMoveShouldSetPanResponder(

                    e) {
                    if (!this.props.scrollEnabled) {
                        return false;
                    }


                    var point = e.nativeEvent.touches[0],
                        deltaX = this.pointX - point.pageX,
                        deltaY = this.pointY - point.pageY,
                        distance = this.props.horizontal ? Math.abs(deltaX) : Math.abs(deltaY);

                    if (distance < SCROLLMOVE_THRESHOLD) {
                        return false;
                    }
                    this.pointX = point.pageX;
                    this.pointY = point.pageY;

                    return true;
                }
            }, {
                key: '_onMoveShouldSetPanResponderCapture',
                value: function _onMoveShouldSetPanResponderCapture(

                    e) {

                    return this.isMoving;
                }
            }, {
                key: '_onPanResponderGrant',
                value: function _onPanResponderGrant(

                    e) {
                    var point = e.nativeEvent.touches[0];

                    this.isAnimating = false;


                    this.isMoving = false;

                    this.distX = 0;
                    this.distY = 0;

                    this.directionX = 0;
                    this.directionY = 0;


                    this.startTime = utils.getTime();

                    this.startX = this.x;
                    this.startY = this.y;

                    this.pointX = point.pageX;
                    this.pointY = point.pageY;

                    if (this.props.pagingEnabled && this.props.horizontal) {
                        this.curPage = Math.floor(Math.abs(this.startX) / this.wrapperWidth);
                    }

                    if (this.props.pagingEnabled && !this.props.horizontal) {
                        this.curPage = Math.floor(Math.abs(this.startY) / this.wrapperHeight);
                    }

                    this._toggleIndicator(true);

                    this._execEvent('onScrollBeginDrag');
                }
            }, {
                key: '_onPanResponderMove',
                value: function _onPanResponderMove(

                    e) {
                    var point = e.nativeEvent.touches[0],
                        deltaX = point.pageX - this.pointX,
                        deltaY = point.pageY - this.pointY,
                        timestamp = utils.getTime(),
                        newX = void 0,
                        newY = void 0,
                        absDistX = void 0,
                        absDistY = void 0;

                    this.pointX = point.pageX;
                    this.pointY = point.pageY;

                    this.distX += deltaX;
                    this.distY += deltaY;
                    absDistX = Math.abs(this.distX);
                    absDistY = Math.abs(this.distY);


                    if (timestamp - this.endTime > SCROLLMOVE_TIME && absDistX < SCROLLMOVE_THRESHOLD && absDistY < SCROLLMOVE_THRESHOLD) {
                        return;
                    }
                    this.isMoving = true;

                    this._checkDismissMode();


                    newX = this.x + deltaX;
                    newY = this.y + deltaY;



                    if (newX > this.minScrollX || newX < this.maxScrollX) {
                        newX = this.alwaysBounceHorizontal ? this.x + deltaX / 3 : newX > this.minScrollX ? this.minScrollX : this.maxScrollX;
                    }
                    if (newY > this.minScrollY || newY < this.maxScrollY) {
                        newY = this.alwaysBounceVertical ? this.y + deltaY / 3 : newY > this.minScrollY ? this.minScrollY : this.maxScrollY;
                    }


                    this.directionX = deltaX > 0 ? -1 : deltaX < 0 ? 1 : 0;
                    this.directionY = deltaY > 0 ? -1 : deltaY < 0 ? 1 : 0;


                    if (this.props.pagingEnabled && this.props.horizontal) {
                        var newPageScrollerX = -(this.curPage + this.directionX) * this.wrapperWidth;
                        if (this.directionX < 0 && newX > newPageScrollerX || this.directionX > 0 && newX < newPageScrollerX) {
                            newX = newPageScrollerX;
                        }
                    }
                    if (this.props.pagingEnabled && !this.props.horizontal) {
                        var newPageScrollerY = -(this.curPage + this.directionY) * this.wrapperHeight;
                        if (this.directionY < 0 && newY > newPageScrollerY || this.directionY > 0 && newY < newPageScrollerY) {
                            newY = newPageScrollerY;
                        }
                    }

                    this._translate(newX, newY);



                    if (timestamp - this.startTime > SCROLLMOVE_TIME) {
                        this.startTime = timestamp;
                        this.startX = this.x;
                        this.startY = this.y;
                    }
                    this._execEvent('onScroll');
                    return true;
                }
            }, {
                key: '_onPanResponderRelease',
                value: function _onPanResponderRelease(

                    e) {


                    this._checkShouldPersistTaps(e);

                    var momentumX = void 0,
                        momentumY = void 0,
                        duration = void 0,
                        newX = Math.round(this.x),
                        newY = Math.round(this.y),
                        time = 0,

                        easing = void 0;


                    this.endTime = utils.getTime();
                    duration = this.endTime - this.startTime;

                    this.isMoving = false;


                    if (this.props.refreshControl && !this.state.isRefreshing) {
                        if (!this.props.horizontal && newY > this.refreshControlHeight) {
                            this.startRefreshing(true);
                            return;
                        }
                    }

                    if (this.props.loadControl) {
                        if (!this.props.horizontal && newY < this.maxScrollY - this.loadControlHeight) {
                            this.startLoading(true);
                            return;
                        }
                    }


                    if (this._resetPosition(BOUNCETIME)) {
                        return;
                    }


                    if (this.props.pagingEnabled && this.props.horizontal) {
                        var vx = (this.x - this.startX) / duration,
                            per = Math.abs(newX) / this.wrapperWidth - this.curPage,
                            directionX = vx > 0 ? -1 : vx < 0 ? 1 : 0;
                        var newPage = directionX === this.directionX && (per > 0.35 || Math.abs(vx) > 0.4) ? this.curPage += this.directionX : this.curPage;

                        this._scrollTo(-newPage * this.wrapperWidth, newY, PAGEINGTIME, utils.ease.quadratic);
                        return;
                    }

                    if (this.props.pagingEnabled && !this.props.horizontal) {
                        var vy = (this.y - this.startY) / duration,
                            _per = Math.abs(newY) / this.wrapperHeight - this.curPage,
                            directionY = vy > 0 ? -1 : vy < 0 ? 1 : 0;
                        var _newPage = directionY === this.directionY && (_per > 0.35 || Math.abs(vy) > 0.4) ? this.curPage += this.directionY : this.curPage;

                        this._scrollTo(newX, -_newPage * this.wrapperHeight, PAGEINGTIME, utils.ease.quadratic);
                        return;
                    }


                    this._scrollTo(newX, newY, 0);


                    this._execEvent('onScrollEndDrag');


                    if (duration < SCROLLMOVE_TIME) {
                        momentumX = this.props.horizontal ? utils.momentum(this.x, this.startX, duration, this.maxScrollX, this.wrapperWidth, this.deceleration) : {
                            destination: newX,
                            duration: 0
                        };

                        momentumY = !this.props.horizontal ? utils.momentum(this.y, this.startY, duration, this.maxScrollY, this.wrapperHeight, this.deceleration) : {
                            destination: newY,
                            duration: 0
                        };

                        newX = momentumX.destination;
                        newY = momentumY.destination;
                        time = Math.max(momentumX.duration, momentumY.duration);
                    }

                    if (newX !== this.x || newY !== this.y) {
                        if (newX > this.minScrollX || newX < this.maxScrollX) {
                            if (this.alwaysBounceHorizontal) {
                                easing = utils.ease.quadratic;
                            } else {
                                newX = newX > this.minScrollX ? this.minScrollX : this.maxScrollX;
                            }
                        }

                        if (newY > this.minScrollY || newY < this.maxScrollY) {
                            if (this.alwaysBounceVertical) {
                                easing = utils.ease.quadratic;
                            } else {
                                newY = newY > this.minScrollY ? this.minScrollY : this.maxScrollY;
                            }
                        }

                        this._execEvent('onMomentumScrollBegin');
                        this._scrollTo(newX, newY, time, easing);
                        this._execEvent('onMomentumScrollEnd');
                        return;
                    }

                    this._execEvent('onScrollAnimationEnd');
                    this._toggleIndicator(false);
                    return;
                }
            }, {
                key: '_onPanResponderTerminationRequest',
                value: function _onPanResponderTerminationRequest(


                    e, gestureState) {


                    if (this.props.keyboardShouldPersistTaps) {
                        return false;
                    }
                    var point = e.nativeEvent,
                        deltaX = point.pageX - this.pointX,
                        deltaY = point.pageY - this.pointY,
                        directionX = deltaX > 0 ? -1 : deltaX < 0 ? 1 : 0,
                        directionY = deltaY > 0 ? -1 : deltaY < 0 ? 1 : 0,
                        direction = Math.abs(deltaY) > Math.abs(deltaX) ? 'v' : 'h',
                        allow = false;

                    this.props.horizontal && direction === 'v' && !this.alwaysBounceVertical && (allow = true);
                    !this.props.horizontal && direction === 'h' && !this.alwaysBounceHorizontal && (allow = true);

                    if (this.props.horizontal && direction === 'h' && !this.alwaysBounceHorizontal) {
                        directionX === 1 && this.x <= this.maxScrollX && (allow = true);
                        directionX === -1 && this.x >= this.minScrollX && (allow = true);
                    }

                    if (!this.props.horizontal && direction === 'v' && !this.alwaysBounceVertical) {
                        directionY === 1 && this.y <= this.maxScrollY && (allow = true);
                        directionY === -1 && this.y >= this.minScrollY && (allow = true);
                    }
                    return allow;
                }
            }, {
                key: '_onPanResponderTerminate',
                value: function _onPanResponderTerminate(

                    e) {


                    if (this._resetPosition(BOUNCETIME)) {
                        return;
                    }
                }
            }, {
                key: '_execEvent',
                value: function _execEvent(

                    eventType) {
                    if (this.unMounted) {
                        return;
                    }

                    this.props[eventType] && this.props[eventType].apply(this, [{
                        nativeEvent: {
                            contentOffset: {
                                x: -this.x,
                                y: -this.y + (this.props.refreshControl ? this.refreshControlHeight : 0)
                            }
                        }
                    }]);



                }
            }, {
                key: '_checkDismissMode',
                value: function _checkDismissMode()

                {

                    if (this.props.keyboardDismissMode === 'on-drag') {
                        _TextInput.TextInputState.blur(_TextInput.TextInputState.currentFocus());
                    }
                }
            }, {
                key: '_checkShouldPersistTaps',
                value: function _checkShouldPersistTaps(

                    e) {

                    if (!this.isMoving) {
                        if (!this.props.keyboardShouldPersistTaps) {
                            var ele = e.nativeEvent.target,
                                focusEle = _TextInput.TextInputState.currentFocus();
                            ele !== focusEle && _TextInput.TextInputState.blur(focusEle);

                        }
                    }

                }
            }, {
                key: '_refresh',
                value: function _refresh()


                {
                    var _this4 = this;


                    this.wrapperWidth = this.wrapper.clientWidth;
                    this.wrapperHeight = this.wrapper.clientHeight;

                    this.scrollerWidth = this.scroller.offsetWidth;
                    this.scrollerHeight = this.scroller.offsetHeight;

                    this.minScrollX = this.contentInset.left;
                    this.minScrollY = this.contentInset.top;

                    this.maxScrollX = this.wrapperWidth - this.scrollerWidth - this.contentInset.right;
                    this.maxScrollY = this.wrapperHeight - this.scrollerHeight - this.contentInset.bottom;

                    this.maxScrollX = this.maxScrollX > 0 ? 0 : this.maxScrollX;
                    this.maxScrollY = this.maxScrollY > 0 ? 0 : this.maxScrollY;

                    this.endTime = 0;
                    this.directionX = 0;
                    this.directionY = 0;


                    if (this.stickyHeaderIndices.length > 0) {
                        this.stickyHeaderIndices.forEach(function(item, index) {
                            _this4.stickyHeaderIndices[index].itemOffset = _this4.stickyHeaderIndices[index].itemDOM.offsetTop;
                            _this4.stickyHeaderIndices[index].itemHeight = _this4.stickyHeaderIndices[index].itemDOM.offsetHeight;
                        });
                    }


                    if (this.showsVerticalScrollIndicator) {
                        var indicatorHeight = 0;
                        if (this.maxScrollY < 0) {
                            this.ableShowsVerticalScrollIndicator = true;
                            var indicatorMaxLength = this.wrapperHeight - 2 * INDICATOR_GAP;
                            indicatorHeight = Math.max(INDICATOR_MIN_SHOW_LENGTH, Math.floor(this.wrapperHeight * indicatorMaxLength / this.scrollerHeight));
                        } else {
                            this.ableShowsVerticalScrollIndicator = false;
                        }
                        if (this.state.indicatorVerticalHeight !== indicatorHeight) {
                            this.setState({
                                indicatorVerticalHeight: indicatorHeight
                            });
                        }
                    }

                    if (this.showsHorizontalScrollIndicator) {
                        var indicatorWidth = 0;
                        if (this.maxScrollX < 0) {
                            this.ableShowsHorizontalScrollIndicator = true;
                            var indicatorMaxWidth = this.wrapperWidth - 2 * INDICATOR_GAP;
                            indicatorWidth = Math.max(INDICATOR_MIN_SHOW_WIDTH, Math.floor(this.wrapperWidth * indicatorMaxWidth / this.scrollerWidth));
                        } else {
                            this.ableShowsHorizontalScrollIndicator = false;
                        }
                        if (this.state.indicatorHorizontalWidth !== indicatorWidth) {
                            this.setState({
                                indicatorHorizontalWidth: indicatorWidth
                            });
                        }
                    }


                    if (this.y < this.maxScrollY || this.x < this.maxScrollX) {
                        var newX = void 0,
                            newY = void 0;
                        this.x < this.maxScrollX && (newX = this.maxScrollX);
                        this.y < this.maxScrollY && (newY = this.maxScrollY);
                        this._scrollTo(newX, newY, 0);
                    } else {
                        this._scrollTo(this.x, this.y, 0);
                    }
                }
            }, {
                key: '_toggleIndicator',
                value: function _toggleIndicator(


                    type) {
                    if (this.ableShowsVerticalScrollIndicator) {
                        this.indicatorVertical.style.opacity = type ? INDICATOR_OPACITY : 0;
                    }
                    if (this.ableShowsHorizontalScrollIndicator) {
                        this.indicatorHorizontal.style.opacity = type ? INDICATOR_OPACITY : 0;
                    }
                }
            }, {
                key: '_resetPosition',
                value: function _resetPosition()



                {
                    var time = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
                    var x = this.x,
                        y = this.y;


                    if (!this.props.horizontal || this.x > this.minScrollX) {
                        x = this.minScrollX;
                    } else if (this.x < this.maxScrollX) {
                        x = this.maxScrollX;
                    }

                    if (this.props.horizontal || this.y > this.minScrollY) {
                        y = this.minScrollY;
                    } else if (this.y < this.maxScrollY) {
                        y = this.maxScrollY;
                    }

                    if (this.state.isRefreshing && y === this.minScrollY) {
                        y = y + this.refreshControlHeight;
                    }



                    if (x === this.x && y === this.y) {
                        return false;
                    }


                    this._scrollTo(x, y, time);
                    return true;
                }
            }, {
                key: 'scrollTo',
                value: function scrollTo(



                    options) {
                    options.x = options.x || 0;
                    options.y = options.y || 0;
                    this.props.refreshControl && (options.y -= this.refreshControlHeight);
                    this.isAnimating = false;
                    this._toggleIndicator(true);
                    this._scrollTo(-options.x, -options.y, options.animated ? options.duration ? options.duration : BOUNCETIME : 0);
                }
            }, {
                key: '_scrollTo',
                value: function _scrollTo()



                {
                    var x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
                    var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
                    var time = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
                    var easing = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : utils.ease.circular;
                    if (!time || time <= 0) {
                        this._translate(x, y);
                    } else {
                        this._animate(x, y, time, easing.fn);
                    }
                }
            }, {
                key: '_getStickyState',
                value: function _getStickyState(

                    y, offset) {
                    var lastHeight = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
                    var stickyState = void 0;
                    switch (true) {
                        case offset + y - lastHeight >= this.minScrollY:
                            stickyState = 0;
                            break;
                        case offset + y > this.minScrollY && offset + y - lastHeight < this.minScrollY:
                            stickyState = 1;
                            break;
                        case offset + y <= this.minScrollY:
                            stickyState = 2;
                            break;
                    }

                    return stickyState;
                }
            }, {
                key: '_translate',
                value: function _translate(



                    x, y) {
                    var _this5 = this;


                    this.x = x;
                    this.y = y;

                    this.contentOffset.x = -x;
                    this.contentOffset.y = -y;


                    if (this.stickyHeaderIndices.length > 0) {
                        (function() {



                            var indicesLength = _this5.stickyHeaderIndices.length;

                            var stickyItem = _extends({}, _this5.stickyItem);
                            stickyItem.index = -1;
                            for (var i = indicesLength - 1; i >= 0; i--) {
                                var item = _this5.stickyHeaderIndices[i];
                                var nextItem = _this5.stickyHeaderIndices[i + 1];
                                var prevItem = _this5.stickyHeaderIndices[i - 1];
                                if (i < indicesLength - 1) {
                                    switch (true) {
                                        case nextItem.itemStickState >= 2:
                                            item.itemStickState = 4;
                                            break;
                                        case nextItem.itemStickState === 1:
                                            item.itemStickState = 3;
                                            break;
                                        default:
                                            item.itemStickState = _this5._getStickyState(y, item.itemOffset, prevItem ? prevItem.itemHeight : 0);
                                            break;
                                    }

                                } else {
                                    item.itemStickState = _this5._getStickyState(y, item.itemOffset, prevItem ? prevItem.itemHeight : 0);
                                }



                                if (item.itemStickState === 2) {
                                    stickyItem.index = item.itemIndex;
                                    stickyItem.state = 2;
                                }
                                if (item.itemStickState === 3) {
                                    stickyItem.index = item.itemIndex;
                                    stickyItem.state = 3;
                                    stickyItem.transformValue = 'translate(0px,' + (-item.itemHeight + (_this5.minScrollY + nextItem.itemOffset + y)) + 'px) translateZ(0)';
                                }
                            }


                            if (stickyItem.state === 2 && (_this5.stickyItem.state !== stickyItem.index || _this5.stickyItem.state === 3)) {
                                _fastdom2.default.mutate(function() {
                                    _this5.stickyWrapperDOM.style[commonTransform] = 'translate(0px,0px) translateZ(0)';
                                });
                            }
                            if (stickyItem.state === 3) {
                                _fastdom2.default.mutate(function() {
                                    _this5.stickyWrapperDOM.style[commonTransform] = stickyItem.transformValue;
                                });
                            }

                            if (_this5.stickyItem.index !== stickyItem.index && (stickyItem.state === 2 || stickyItem.state === 3)) {
                                _this5.setState({
                                    stickyItemIndex: stickyItem.index
                                });

                                _this5.stickyItem = _extends({}, stickyItem);
                            }
                        })();
                    }

                    if (this.ableShowsVerticalScrollIndicator) {
                        (function() {
                            var transformValue = 'translate(0px,' + -_this5.y / _this5.scrollerHeight * (_this5.wrapperHeight - 2 * INDICATOR_GAP) + 'px) translateZ(0)';
                            _fastdom2.default.mutate(function() {
                                _this5.indicatorVertical.style[commonTransform] = transformValue;
                            });
                        })();
                    }

                    if (this.ableShowsHorizontalScrollIndicator) {
                        (function() {
                            var transformValue = 'translate(' + -_this5.x / _this5.scrollerWidth * (_this5.wrapperWidth - 2 * INDICATOR_GAP) + 'px, 0px) translateZ(0)';
                            _fastdom2.default.mutate(function() {
                                _this5.indicatorHorizontal.style[commonTransform] = transformValue;

                            });
                        })();
                    }


                    if (this.props.refreshControl) {
                        this.refs.refreshControl && this.refs.refreshControl.onScroll && this.refs.refreshControl.onScroll({
                            y: y
                        });

                    }



                    _fastdom2.default.mutate(function() {
                        _this5.scroller.style[commonTransform] = 'translate(' + x + 'px,' + y + 'px) translateZ(0)';
                    });
                }
            }, {
                key: '_animate',
                value: function _animate(


                    destX, destY, duration, easingFn) {
                    var self = this,
                        startX = this.x,
                        startY = this.y,
                        startTime = utils.getTime(),
                        destTime = startTime + duration;

                    function step() {
                        var now = utils.getTime();

                        self.rAF && cancelAnimationFrame(self.rAF);

                        if (now >= destTime) {
                            self.isAnimating = false;
                            self._translate(destX, destY);
                            if (!self._resetPosition(BOUNCETIME)) {
                                self._toggleIndicator(false);
                                self._execEvent('onScrollAnimationEnd');
                            }
                            return;
                        }

                        if (!self.isAnimating) {
                            self._execEvent('onScrollAnimationEnd');
                            return;
                        }

                        if (self.isAnimating) {
                            var newX = void 0,
                                newY = void 0,
                                easing = void 0;
                            now = (now - startTime) / duration;
                            easing = easingFn(now);
                            newX = (destX - startX) * easing + startX;
                            newY = (destY - startY) * easing + startY;
                            self._translate(newX, newY);
                            self.rAF = requestAnimationFrame(step);
                            self._execEvent('onScroll');
                        }
                    }
                    this.isAnimating = true;
                    step();
                }
            }, {
                key: 'setContentOffsetBeforeLayout',
                value: function setContentOffsetBeforeLayout(



                    offset) {
                    this.contentOffset.x = this.contentOffset.x - offset.x;
                    this.contentOffset.y = this.contentOffset.y - offset.y;
                    this.x = this.contentOffset.x;
                    this.y = this.contentOffset.y;
                }
            }, {
                key: 'startRefreshing',
                value: function startRefreshing(



                    fromResponder) {

                    if (this.props.refreshControl && !this.state.isRefreshing) {
                        this.setState({
                            isRefreshing: true,
                            refreshResult: undefined
                        });

                        this.refreshControl.onRefresh();
                        if (this.props.onRefresh) {
                            this.props.onRefresh();
                        }
                        this._scrollTo(0, this.refreshControlHeight, fromResponder ? BOUNCETIME : 0);
                    }
                }
            }, {
                key: 'stopRefreshing',
                value: function stopRefreshing()



                {
                    var _this6 = this;
                    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
                    if (this.props.refreshControl && this.state.isRefreshing) {
                        this.setState({
                            isRefreshing: false,
                            refreshResult: config.result
                        });

                        setTimeout(function() {
                            var duration = config.duration || SCROLLTO_DURATION;
                            _this6._resetPosition(config.animated === false ? 0 : duration);
                        });
                    }
                }
            }, {
                key: 'startLoading',
                value: function startLoading()



                {
                    if (this.props.loadControl && !this.state.isLoading) {
                        this.setState({
                            isLoading: true
                        });

                        this.loadControl.onLoad();
                        if (this.props.onLoad) {
                            this.props.onLoad();
                        }
                    }
                    this._scrollTo(0, this.maxScrollY, BOUNCETIME);
                }
            }, {
                key: 'stopLoading',
                value: function stopLoading()



                {
                    if (this.props.loadControl && this.state.isLoading) {
                        this.setState({
                            isLoading: false
                        });

                        this._resetPosition(BOUNCETIME);
                    }
                }
            }, {
                key: 'render',
                value: function render()



                {
                    var _this7 = this;
                    var props = this.props;
                    var scrollProps = _extends({},
                        props, {
                            onScroll: noop
                        });



                    var refreshControl = props.refreshControl || null;
                    this.refreshControlHeight = null;
                    if (refreshControl) {
                        this.refreshControlHeight = refreshControl.props.height;
                        refreshControl = _react2.default.cloneElement(refreshControl, {
                            ref: 'refreshControl',
                            isRefreshing: this.state.isRefreshing,
                            refreshResult: this.state.refreshResult,
                            style: [refreshControl.props.style, styles.refreshControl, {
                                top: -this.refreshControlHeight
                            }]
                        });

                    }

                    var loadControl = props.loadControl || null;
                    this.loadControlHeight = null;
                    if (loadControl) {
                        this.loadControlHeight = loadControl.props.height;
                        var loadControlChild = _react2.default.cloneElement(loadControl, {
                            ref: 'loadControl',
                            isLoading: this.state.isLoading
                        });

                        loadControl =
                            (this && this.createElement || _react2.default.createElement)(_View2.default, {
                                    style: {
                                        maxHeight: this.loadControlHeight,
                                        height: this.loadControlHeight
                                    }
                                },
                                loadControlChild);



                    }
                    var indicatorHorizontal = this.showsHorizontalScrollIndicator ?
                        (this && this.createElement || _react2.default.createElement)(_View2.default, {
                            style: [styles.indicator, styles.indicatorHorizontal, {
                                width: this.state.indicatorHorizontalWidth
                            }],
                            ref: 'indicatorHorizontal'
                        }) :
                        null;
                    var indicatorVertical = this.showsVerticalScrollIndicator ?
                        (this && this.createElement || _react2.default.createElement)(_View2.default, {
                            style: [styles.indicator, styles.indicatorVertical, {
                                height: this.state.indicatorVerticalHeight
                            }],
                            ref: 'indicatorVertical'
                        }) :
                        null;


                    var stickyWrapper = props.stickyHeaderIndices && props.stickyHeaderIndices.length > 0 && !props.horizontal ?
                        (this && this.createElement || _react2.default.createElement)(_View2.default, {
                                style: styles.stickyWrapper,
                                ref: 'stickyWrapper'
                            },

                            this.state.stickyItemIndex > -1 ? props.children[this.state.stickyItemIndex] : null) :

                        null;


                    var onLayout = null;
                    if (scrollProps.onContentSizeChange) {
                        onLayout = function onLayout(e) {
                            scrollProps.onContentSizeChange(_this7.scrollerWidth, _this7.scrollerHeight);
                        };
                    }
                    return (
                        (this && this.createElement || _react2.default.createElement)(_View2.default, {
                                style: [styles.scrollBase, scrollProps.style]
                            },
                            (this && this.createElement || _react2.default.createElement)(_Resizable2.default, _extends({
                                        ref: 'wrapper'
                                    },
                                    scrollProps,
                                    this._panResponder.panHandlers, {
                                        style: styles.scrollView,
                                        onResize: function onResize(e) {
                                            _this7._refresh();
                                        }
                                    }),

                                stickyWrapper,
                                (this && this.createElement || _react2.default.createElement)(_Resizable2.default, {
                                        className: scrollProps.horizontal ? 'rn-scroller-hori' : 'rn-scroller-vert',
                                        style: [
                                            scrollProps.contentContainerStyle, _extends({},
                                                styles.scroller, {
                                                    transform: [{
                                                        translateX: this.contentOffset.x
                                                    }, {
                                                        translateY: this.contentOffset.y
                                                    }, {
                                                        translateZ: 0
                                                    }]
                                                }),


                                            scrollProps.horizontal && styles.scrollerHorizontal,
                                            scrollProps.endFillColor && {
                                                backgroundColor: scrollProps.endFillColor
                                            }
                                        ],


                                        ref: 'scroller',
                                        onLayout: onLayout,
                                        onResize: function onResize(e) {
                                            _this7._refresh();
                                        }
                                    },

                                    refreshControl,
                                    props.children,
                                    loadControl),

                                indicatorHorizontal,
                                indicatorVertical)));



                }
            }]);
            return QScrollView;
        }(_react.Component);
        QScrollView.defaultProps = {
            contentInset: {
                top: 0,
                left: 0,
                bottom: 0,
                right: 0
            },
            bounces: true,
            horizontal: false,
            showsVerticalScrollIndicator: true,
            showsHorizontalScrollIndicator: false,
            scrollEnabled: true,
            pagingEnabled: false,
            keyboardDismissMode: 'none',
            keyboardShouldPersistTaps: false,
            decelerationRate: 'normal'
        };



        QScrollView.propTypes = _extends({},
            _View2.default.propTypes, {



                contentInset: _react.PropTypes.object,



                contentOffset: _react.PropTypes.object,



                alwaysBounceHorizontal: _react.PropTypes.bool,



                alwaysBounceVertical: _react.PropTypes.bool,



                bounces: _react.PropTypes.bool,



                contentContainerStyle: _react.PropTypes.oneOfType([_react.PropTypes.object, _react.PropTypes.array]),



                decelerationRate: _react.PropTypes.oneOfType([
                    _react.PropTypes.oneOf(['fast', 'normal']),
                    _react.PropTypes.number
                ]),



                horizontal: _react.PropTypes.bool,



                onScroll: _react.PropTypes.func,



                onScrollAnimationEnd: _react.PropTypes.func,



                pagingEnabled: _react.PropTypes.bool,



                scrollEnabled: _react.PropTypes.bool,



                showsHorizontalScrollIndicator: _react.PropTypes.bool,



                showsVerticalScrollIndicator: _react.PropTypes.bool,



                stickyHeaderIndices: _react.PropTypes.arrayOf(_react.PropTypes.number),



                keyboardDismissMode: _react.PropTypes.oneOf(['none', 'on-drag']),



                keyboardShouldPersistTaps: _react.PropTypes.bool,



                onMomentumScrollBegin: _react.PropTypes.func,



                onMomentumScrollEnd: _react.PropTypes.func,



                onScrollBeginDrag: _react.PropTypes.func,



                onScrollEndDrag: _react.PropTypes.func,



                refreshControl: _react.PropTypes.element,



                loadControl: _react.PropTypes.element,



                onContentSizeChange: _react.PropTypes.func,



                style: _react.PropTypes.oneOfType([_react.PropTypes.object, _react.PropTypes.array])
            });



        module.exports = QScrollView;

        /***/
    },
    /* 330 */
    /***/
    function(module, exports, __webpack_require__) {

        var _extends = Object.assign || function(target) {
            for (var i = 1; i < arguments.length; i++) {
                var source = arguments[i];
                for (var key in source) {
                    if (Object.prototype.hasOwnProperty.call(source, key)) {
                        target[key] = source[key];
                    }
                }
            }
            return target;
        };
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor;
            };
        }();

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
            }
        }

        function _possibleConstructorReturn(self, call) {
            if (!self) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            }
            return call && (typeof call === "object" || typeof call === "function") ? call : self;
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
        }
        var React = __webpack_require__(10);
        var View = __webpack_require__(27);
        var ReactDOM = __webpack_require__(10);
        var debounce = __webpack_require__(32);
        var
            Component = React.Component;

        var fastdom = __webpack_require__(30);
        var



            Resizable = function(_Component) {
            _inherits(Resizable, _Component);

            function Resizable(props) {
                _classCallCheck(this, Resizable);
                var _this = _possibleConstructorReturn(this, (Resizable.__proto__ || Object.getPrototypeOf(Resizable)).call(this,
                    props));
                _this.r = null;
                _this.lastDimensions = {
                    width: 0,
                    height: 0
                };

                _this.onScroll = _this.onScroll.bind(_this);
                _this.resetTriggers = debounce(_this.resetTriggers.bind(_this), 100, {
                    trailing: true
                });
                return _this;


            }
            _createClass(Resizable, [{
                key: '_init',
                value: function _init()

                {
                    this.resizable = ReactDOM.findDOMNode(this.refs.resizable);
                    this.contract = ReactDOM.findDOMNode(this.refs.contract);
                    this.expandChild = ReactDOM.findDOMNode(this.refs.expandChild);
                    this.expand = ReactDOM.findDOMNode(this.refs.expand);
                    this.resetTriggers();
                }
            }, {
                key: 'componentDidMount',
                value: function componentDidMount()

                {
                    this._init();
                }
            }, {
                key: 'componentDidUpdate',
                value: function componentDidUpdate()

                {
                    this._init();
                }
            }, {
                key: 'resetTriggers',
                value: function resetTriggers()

                {
                    var _this2 = this;
                    fastdom.measure(function() {
                        if (!_this2.contract) return;
                        var n1 = _this2.contract.scrollWidth,
                            n2 = _this2.contract.scrollHeight,
                            n3 = _this2.expand.offsetWidth + 1 + 'px',
                            n4 = _this2.expand.offsetHeight + 1 + 'px',
                            n5 = _this2.expand.scrollWidth,
                            n6 = _this2.expand.scrollHeight;
                        fastdom.mutate(function() {
                            _this2.contract.scrollLeft = n1;
                            _this2.contract.scrollTop = n2;
                            _this2.expandChild.style.width = n3;
                            _this2.expandChild.style.height = n4;
                            _this2.expand.scrollLeft = n5;
                            _this2.expand.scrollTop = n6;
                        });
                    });
                }
            }, {
                key: 'onScroll',
                value: function onScroll()


                {
                    var _this3 = this;
                    this.resetTriggers();
                    fastdom.measure(function() {
                        var dimensions = _this3.getDimensions();
                        fastdom.mutate(function() {
                            if (_this3.haveDimensionsChanged(dimensions)) {
                                _this3.lastDimensions = dimensions;
                                _this3.props.onResize && _this3.props.onResize(dimensions);
                            }
                        });
                    });
                }
            }, {
                key: 'getDimensions',
                value: function getDimensions()

                {
                    return {
                        width: this.resizable.offsetWidth,
                        height: this.resizable.offsetHeight
                    };

                }
            }, {
                key: 'haveDimensionsChanged',
                value: function haveDimensionsChanged(

                    dimensions) {
                    return dimensions.width != this.lastDimensions.width || dimensions.height != this.lastDimensions.height;
                }
            }, {
                key: 'render',
                value: function render()


                {
                    return (
                        (this && this.createElement || React.createElement)(View, _extends({}, this.props, {
                                ref: 'resizable',
                                onScroll: this.onScroll
                            }),

                            this.props.children,
                            (this && this.createElement || React.createElement)('div', {
                                    className: 'resize-triggers',
                                    ref: 'triggers'
                                },

                                (this && this.createElement || React.createElement)('div', {
                                        className: 'expand-trigger',
                                        ref: 'expand'
                                    },

                                    (this && this.createElement || React.createElement)('div', {
                                        className: 'expand-child',
                                        ref: 'expandChild'
                                    })),


                                (this && this.createElement || React.createElement)('div', {
                                    className: 'contract-trigger',
                                    ref: 'contract'
                                }))));



                }
            }]);
            return Resizable;
        }(Component);


        Resizable.propTypes = {
            onResize: React.PropTypes.func.isRequired
        };


        module.exports = Resizable;

        /***/
    },
    /* 331 */
    /***/
    function(module, exports, __webpack_require__) {

        var _extends = Object.assign || function(target) {
            for (var i = 1; i < arguments.length; i++) {
                var source = arguments[i];
                for (var key in source) {
                    if (Object.prototype.hasOwnProperty.call(source, key)) {
                        target[key] = source[key];
                    }
                }
            }
            return target;
        };



        var React = __webpack_require__(10);
        var View = __webpack_require__(27);
        var PropTypes = React.PropTypes;
        var StyleSheet = __webpack_require__(39);
        var TextInputState = __webpack_require__(318);
        var NativeMethodsMixin = __webpack_require__(54);
        var LayoutMixin = __webpack_require__(28);



        var typeMap = {
            'default': 'text',
            'ascii-capable': 'text',
            'numbers-and-punctuation': 'number',
            'url': 'url',
            'number-pad': 'number',
            'phone-pad': 'tel',
            'name-phone-pad': 'text',
            'email-address': 'email',
            'decimal-pad': 'number',
            'twitter': 'text',
            'web-search': 'search',
            'numeric': 'number'
        };


        var autoCapitalizer = {
            'none': function none(value) {
                return value;
            },
            'sentences': function sentences(value) {
                return value.replace(/(^[a-z])|[\.\,\?\!\;\'\"。？！；][a-z]/g, function(mat) {
                    return mat.toUpperCase();
                });
            },
            'words': function words(value) {
                return value.replace(/(^[a-z])|[\s\.\,\?\!\;\'\"。？！；][a-z]/g, function(mat) {
                    return mat.toUpperCase();
                });
            },
            'characters': function characters(value) {
                return value.toUpperCase();
            }
        };



        var TextInput = React.createClass({
            displayName: 'TextInput',
            mixins: [LayoutMixin, NativeMethodsMixin],
            getDefaultProps: function getDefaultProps() {
                return {
                    autoCapitalize: 'none',
                    autoFocus: false,
                    editable: true,
                    keyboardType: 'default',
                    multiline: false,
                    placeholder: '',
                    placeholderTextColor: '',
                    secureTextEntry: false,
                    defaultValue: '',
                    style: {
                        display: 'block',
                        flex: 1
                    }
                };


            },



            render: function render() {
                var props = this.props,

                    accessibilityLabel =



                    props.accessibilityLabel,
                    autoComplete = props.autoComplete,
                    autoFocus = props.autoFocus,
                    defaultValue = props.defaultValue,
                    editable = props.editable,
                    keyboardType = props.keyboardType,
                    maxLength = props.maxLength,
                    multiline = props.multiline,
                    numberOfLines = props.numberOfLines,
                    onBlur = props.onBlur,
                    onChange = props.onChange,
                    onKeyDown = props.onKeyDown,
                    onKeyUp = props.onKeyUp,
                    onKeyPress = props.onKeyPress,
                    onChangeText = props.onChangeText,
                    onSelectionChange = props.onSelectionChange,
                    placeholder = props.placeholder,
                    password = props.password,
                    secureTextEntry = props.secureTextEntry,
                    style = props.style,
                    testID = props.testID,
                    value = props.value,
                    input,
                    propsCommon = {
                        ref: 'input',
                        'aria-label': accessibilityLabel,
                        autoComplete: autoComplete && 'on',

                        defaultValue: defaultValue,
                        maxLength: maxLength,
                        onBlur: onBlur && this._onBlur,
                        onFocus: this._onFocus,
                        onSelect: onSelectionChange && this._onSelectionChange,
                        onChange: this._onChange,
                        placeholder: placeholder,
                        readOnly: !editable,
                        testID: testID,
                        value: value,
                        onKeyDown: onKeyDown,
                        onKeyUp: onKeyUp,
                        onKeyPress: this._onKeyPress
                    };


                if (props.className) {
                    propsCommon.className = props.className;
                }
                if (props.id) {
                    propsCommon.id = props.id;
                }

                if (multiline) {
                    var propsMultiline = _extends({},
                        propsCommon, {
                            style: StyleSheet.fix([styles.initial, props.style]),
                            rows: numberOfLines
                        });

                    input =
                        (this && this.createElement || React.createElement)('textarea', propsMultiline);

                } else {
                    var type = typeMap[keyboardType] || 'text';
                    if (password || secureTextEntry) type = 'password';
                    var propsSingleline = _extends({},
                        propsCommon, {
                            style: StyleSheet.fix([styles.initial, styles.single, props.style]),
                            type: type
                        });

                    input =
                        (this && this.createElement || React.createElement)('input', propsSingleline);

                }
                if (!props.children) {
                    return input;
                }



                return (
                    (this && this.createElement || React.createElement)(View, {
                            style: styles.inputContainer,
                            className: 'TextInput'
                        },

                        input,
                        props.children));


            },



            componentWillMount: function componentWillMount() {
                this.blurOnSubmit = this.props.blurOnSubmit ? this.props.blurOnSubmit : this.props.multiline ? false : true;
            },

            componentDidMount: function componentDidMount() {
                var input = this.refs['input'];
                if (this.props.autoFocus) TextInputState.focus(input);
                this._lock = function() {
                    this.__lock = true;
                }.bind(this);
                this._unlock = function() {
                    this.__lock = false;
                }.bind(this);
                input.addEventListener('compositionstart', this._lock);
                input.addEventListener('compositionend', this._unlock);
            },

            componentWillUnmount: function componentWillUnmount() {
                var input = this.refs['input'];
                input.removeEventListener('compositionstart', this._lock);
                input.removeEventListener('compositionend', this._unlock);
            },

            componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
                this.blurOnSubmit = nextProps.blurOnSubmit ? nextProps.blurOnSubmit : nextProps.multiline ? false : true;
            },



            isFocused: function isFocused() {
                return TextInputState.currentFocus() === this.refs.input;
            },



            clear: function clear() {
                this.refs.input.value = '';
            },

            _onFocus: function _onFocus(e) {
                var _props =
                    this.props,
                    clearTextOnFocus = _props.clearTextOnFocus,
                    onFocus = _props.onFocus,
                    selectTextOnFocus = _props.selectTextOnFocus,
                    node = this.refs['input'];
                if (!node) return;
                if (clearTextOnFocus) {
                    node.value = '';
                };
                if (selectTextOnFocus) node.select && node.select();

                if (onFocus) {
                    e.nativeEvent.text = e.target.value;
                    onFocus(e);
                }
            },
            _onBlur: function _onBlur(e) {
                var _props2 =
                    this.props,
                    onBlur = _props2.onBlur,
                    onEndEditing = _props2.onEndEditing;
                TextInputState.blur(this.refs['input']);
                if (onBlur) {
                    e.nativeEvent.text = e.target.value;
                    onBlur(e);
                }
                if (onEndEditing) {
                    e.nativeEvent.text = e.target.value;
                    onEndEditing(e);
                }
            },
            _onChange: function _onChange(e) {
                var nativeEvent = e.nativeEvent,
                    autoCapitalize = this.props.autoCapitalize,
                    target = nativeEvent.target,
                    value = target.value,
                    unlock = !this.__lock,
                    selectionStart = this.refs['input'].selectionStart;


                if (unlock) {
                    autoCapitalize = autoCapitalizer[autoCapitalize] || autoCapitalizer['none'];
                    value = autoCapitalize(value);
                    this.refs['input'].value = value;
                    this.refs['input'].selectionStart = selectionStart;
                    this.refs['input'].selectionEnd = selectionStart;
                }
                var _props3 =
                    this.props,
                    onChange = _props3.onChange,
                    onChangeText = _props3.onChangeText;

                onChangeText && onChangeText(value, unlock);
                if (onChange) {
                    e.nativeEvent.text = value;
                    onChange(e, unlock);
                }
            },
            _onKeyPress: function _onKeyPress(e) {
                e.nativeEvent.text = e.target.value;
                this.props.onKeyPress && this.props.onKeyPress(e);
                if (e.nativeEvent.keyCode === 13) {
                    if (!this.props.multiline) {
                        this.blurOnSubmit && TextInputState.blur(this.refs['input']);
                        this.props.onSubmitEditing && this.props.onSubmitEditing(e);
                    } else {
                        if (this.blurOnSubmit) {
                            TextInputState.blur(this.refs['input']);
                            this.props.onSubmitEditing && this.props.onSubmitEditing(e);
                        }
                    }
                }
            },
            _onSelectionChange: function _onSelectionChange(e) {
                var

                    onSelectionChange = this.props.onSelectionChange;
                if (onSelectionChange) {
                    var _e$target =
                        e.target,
                        selectionDirection = _e$target.selectionDirection,
                        selectionEnd = _e$target.selectionEnd,
                        selectionStart = _e$target.selectionStart;
                    e.nativeEvent = e.nativeEvent || {};
                    e.nativeEvent.text = e.target.value;
                    e.nativeEvent.selection = {
                        start: selectionStart,
                        end: selectionEnd,
                        direction: selectionDirection
                    };

                    var event = {
                        selectionDirection: selectionDirection,
                        selectionEnd: selectionEnd,
                        selectionStart: selectionStart,
                        nativeEvent: e.nativeEvent
                    };

                    onSelectionChange(event);
                }
            }
        });


        var styles = StyleSheet.create({
            inputContainer: {
                'font-size': '0.14rem',
                flex: 1
            },

            initial: {
                appearance: 'none',
                backgroundColor: 'transparent',
                borderColor: 'black',
                borderWidth: 0,
                boxSizing: 'border-box',
                color: 'inherit',
                font: 'inherit',
                padding: 0,
                fontSize: 14,
                display: 'block'
            },

            single: {
                height: 30
            }
        });



        TextInput.TextInputState = TextInputState;
        TextInput.PropTypes = {



            accessibilityLabel: PropTypes.string,



            autoCapitalize: PropTypes.oneOf(['characters', 'words', 'sentences', 'none']),



            autoComplete: PropTypes.string,



            autoCorrect: PropTypes.bool,



            autoFocus: PropTypes.bool,



            blurOnSubmit: PropTypes.bool,



            defaultValue: PropTypes.string,



            editable: PropTypes.bool,



            keyboardType: PropTypes.oneOf(['default', 'ascii-capable', 'numbers-and-punctuation', 'url', 'number-pad', 'name-phone-pad', 'email-address', 'decimal-pad', 'twitter', 'web-search', 'numeric']),



            maxLength: PropTypes.number,



            multiline: PropTypes.bool,



            numberOfLines: PropTypes.number,



            onBlur: PropTypes.func,



            onChange: PropTypes.func,



            onChangeText: PropTypes.func,



            onEndEditing: PropTypes.func,



            onFocus: PropTypes.func,



            onLayout: PropTypes.func,



            onKeyDown: PropTypes.func,



            onKeyUp: PropTypes.func,



            onKeyPress: PropTypes.func,



            onSelectionChange: PropTypes.func,



            onSubmitEditing: PropTypes.func,



            placeholder: PropTypes.string,



            password: PropTypes.bool,



            secureTextEntry: PropTypes.bool,



            style: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),



            value: PropTypes.string
        };



        module.exports = TextInput;

        /***/
    },
    /* 332 */
    /***/
    function(module, exports) {



        'use strict';



        var deepDiffer = function deepDiffer(one, two) {
            if (one === two) {

                return false;
            }
            if (typeof one === 'function' && typeof two === 'function') {

                return false;
            }
            if (typeof one !== 'object' || one === null) {

                return one !== two;
            }
            if (typeof two !== 'object' || two === null) {


                return true;
            }
            if (one.constructor !== two.constructor) {
                return true;
            }
            if (Array.isArray(one)) {

                var len = one.length;
                if (two.length !== len) {
                    return true;
                }
                for (var ii = 0; ii < len; ii++) {
                    if (deepDiffer(one[ii], two[ii])) {
                        return true;
                    }
                }
            } else {
                for (var key in one) {
                    if (deepDiffer(one[key], two[key])) {
                        return true;
                    }
                }
                for (var twoKey in two) {


                    if (one[twoKey] === undefined && two[twoKey] !== undefined) {
                        return true;
                    }
                }
            }
            return false;
        };

        module.exports = deepDiffer;

        /***/
    },
    /* 333 */
    /***/
    function(module, exports, __webpack_require__) {



        'use strict';
        var _extends = Object.assign || function(target) {
            for (var i = 1; i < arguments.length; i++) {
                var source = arguments[i];
                for (var key in source) {
                    if (Object.prototype.hasOwnProperty.call(source, key)) {
                        target[key] = source[key];
                    }
                }
            }
            return target;
        };
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor;
            };
        }();



        var _react = __webpack_require__(10);
        var _react2 = _interopRequireDefault(_react);
        var _StyleSheet = __webpack_require__(39);
        var _StyleSheet2 = _interopRequireDefault(_StyleSheet);
        var _View = __webpack_require__(27);
        var _View2 = _interopRequireDefault(_View);
        var _PanResponder = __webpack_require__(195);
        var _PanResponder2 = _interopRequireDefault(_PanResponder);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
            }
        }

        function _possibleConstructorReturn(self, call) {
            if (!self) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            }
            return call && (typeof call === "object" || typeof call === "function") ? call : self;
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
        }
        var



            QSlider = function(_Component) {
            _inherits(QSlider, _Component);

            function QSlider(props) {
                _classCallCheck(this, QSlider);
                var _this = _possibleConstructorReturn(this, (QSlider.__proto__ || Object.getPrototypeOf(QSlider)).call(this,
                    props));

                _this.gestrueStart = 0;
                _this.state = {
                    calculatedPosition: 0,
                    tempCalculatedPosition: null,
                    thumbPosition: 0,
                    value: props.value,
                    trackWidth: 0,
                    visible: 0
                };
                return _this;

            }
            _createClass(QSlider, [{
                key: 'componentWillMount',
                value: function componentWillMount()

                {
                    var _this2 = this;

                    this._panResponder = _PanResponder2.default.create({
                        onStartShouldSetPanResponder: function onStartShouldSetPanResponder(evt, gestureState) {
                            return !_this2.props.disabled && true;
                        },
                        onStartShouldSetPanResponderCapture: function onStartShouldSetPanResponderCapture(evt, gestureState) {
                            return !_this2.props.disabled && true;
                        },
                        onMoveShouldSetPanResponder: function onMoveShouldSetPanResponder(evt, gestureState) {
                            return !_this2.props.disabled && true;
                        },
                        onMoveShouldSetPanResponderCapture: function onMoveShouldSetPanResponderCapture(evt, gestureState) {
                            return !_this2.props.disabled && true;
                        },
                        onPanResponderTerminationRequest: function onPanResponderTerminationRequest() {
                            return false;
                        },


                        onPanResponderGrant: function onPanResponderGrant(evt, gestureState) {
                            _this2.gestrueStart = gestureState.x0;
                        },


                        onPanResponderMove: function onPanResponderMove(evt, gestureState) {
                            var trackWidth = _this2.state.trackWidth,
                                setpWidth = _this2.props.step / (_this2.props.maximumValue - _this2.props.minimumValue) * _this2.state.trackWidth;

                            var moveOffset = gestureState.moveX - _this2.gestrueStart,
                                shouldUpdate = false;


                            if (_this2.props.step > 0) {
                                if (Math.abs(moveOffset % setpWidth) > setpWidth / 2) {
                                    moveOffset = Math.round(moveOffset / setpWidth) * setpWidth;
                                    _this2.gestrueStart += moveOffset;
                                } else {
                                    moveOffset = 0;
                                }
                            }



                            var newPosition = _this2.state.calculatedPosition + moveOffset;

                            if (_this2.props.step > 0) {
                                newPosition = newPosition < 1e-8 ? 0 : newPosition;
                                _this2.state.calculatedPosition = newPosition;
                                shouldUpdate = true;
                            } else if (_this2.props.step === 0) {
                                _this2.state.tempCalculatedPosition = newPosition;
                                shouldUpdate = true;
                            }


                            if (shouldUpdate) {
                                if (newPosition > trackWidth) {
                                    newPosition = trackWidth;
                                } else if (newPosition < 0) {
                                    newPosition = 0;
                                }

                                _this2.setState({
                                    thumbPosition: newPosition
                                });


                                _this2.convertOffsetToValue(newPosition);
                            }
                        },


                        onPanResponderRelease: function onPanResponderRelease(evt, gestureState) {
                            _this2.state.calculatedPosition = _this2.state.tempCalculatedPosition ? _this2.state.tempCalculatedPosition : _this2.state.calculatedPosition;
                        }
                    });

                }
            }, {
                key: 'render',
                value: function render()

                {
                    var _this3 = this;
                    var _props =
                        this.props,
                        thumbSize = _props.thumbSize,
                        maximumTrackTintColor = _props.maximumTrackTintColor,
                        minimumTrackTintColor = _props.minimumTrackTintColor,
                        maximumValue = _props.maximumValue,
                        minimumValue = _props.minimumValue;

                    var containerStyle = {
                        opacity: this.state.visible,
                        height: thumbSize
                    };

                    var trackStyle = {
                        height: thumbSize
                    };

                    var activeStyle = {
                        top: thumbSize / 2 - 1,
                        width: this.state.thumbPosition + thumbSize / 2,
                        backgroundColor: minimumTrackTintColor
                    };

                    var unactiveStyle = {
                        backgroundColor: maximumTrackTintColor
                    };

                    var thumbStyle = {
                        width: thumbSize,
                        height: thumbSize,
                        left: this.state.thumbPosition,
                        borderRadius: thumbSize / 2
                    };


                    return (
                        (this && this.createElement || _react2.default.createElement)(_View2.default, {
                                style: [styles.container, containerStyle]
                            },
                            (this && this.createElement || _react2.default.createElement)(_View2.default, {
                                    style: [styles.track, trackStyle],
                                    ref: 'track',
                                    onLayout: function onLayout(event) {
                                        return _this3.initLayout(event);
                                    }
                                },
                                (this && this.createElement || _react2.default.createElement)(_View2.default, {
                                    style: [styles.unactiveTrack, unactiveStyle]
                                }),
                                (this && this.createElement || _react2.default.createElement)(_View2.default, {
                                    style: [styles.activeTrack, activeStyle]
                                }),
                                (this && this.createElement || _react2.default.createElement)(_View2.default, _extends({
                                        style: [styles.thumb, thumbStyle]
                                    },
                                    this._panResponder.panHandlers)))));



                }
            }, {
                key: 'initLayout',
                value: function initLayout(

                    e) {
                    if (!this.state.visible) {
                        var width = e.nativeEvent.layout.width,
                            trackWidth = width - this.props.thumbSize,
                            initPosition = (this.state.value - this.props.minimumValue) / (
                                this.props.maximumValue - this.props.minimumValue) * trackWidth;

                        this.setState({
                            trackWidth: trackWidth,
                            thumbPosition: initPosition,
                            calculatedPosition: initPosition,
                            visible: 1
                        });

                    }
                }
            }, {
                key: 'convertOffsetToValue',
                value: function convertOffsetToValue(

                    offset) {
                    var value = this.props.minimumValue + Math.round(offset / this.state.trackWidth * (this.props.maximumValue - this.props.minimumValue));
                    var _props2 =

                        this.props,
                        onValueChange = _props2.onValueChange,
                        onSlidingComplete = _props2.onSlidingComplete;


                    value = isNaN(value) ? 0 : parseFloat(value.toPrecision(10));
                    if (this.props.step !== 0 && this.props.step < 1) {
                        var stepDecimalLen = this.props.step.toString().split('').length - 2;
                        value = Number(value.toFixed(stepDecimalLen));
                    }

                    if (value !== this.state.value && onValueChange) {
                        onValueChange(value);
                    }

                    if (value !== this.state.value && value === this.props.maximumValue && onSlidingComplete) {
                        onSlidingComplete(value);
                    }


                    this.setState({
                        value: value
                    });

                }
            }]);
            return QSlider;
        }(_react.Component);


        QSlider.defaultProps = {
            thumbSize: 28,
            maximumTrackTintColor: '#b6b6b6',
            minimumTrackTintColor: '#0b6aff',
            maximumValue: 1,
            minimumValue: 0,
            step: 0,
            value: 0
        };


        QSlider.propTypes = {



            thumbSize: _react2.default.PropTypes.number,



            maximumTrackTintColor: _react2.default.PropTypes.string,



            minimumTrackTintColor: _react2.default.PropTypes.string,



            maximumValue: _react2.default.PropTypes.number,



            minimumValue: _react2.default.PropTypes.number,



            step: _react2.default.PropTypes.number,



            value: _react2.default.PropTypes.number,



            onValueChange: _react2.default.PropTypes.func,



            onSlidingComplete: _react2.default.PropTypes.func
        };


        var styles = _StyleSheet2.default.create({
            container: {
                justifyContent: 'center'
            },

            track: {
                justifyContent: 'center'
            },

            unactiveTrack: {
                height: 2,
                borderRadius: 2
            },

            activeTrack: {
                position: 'absolute',
                left: 0,
                width: 100,
                height: 2,
                borderRadius: 2
            },

            thumb: {
                position: 'absolute',
                top: 0,
                left: 0,
                borderWidth: 1,
                borderColor: '#ddd',
                backgroundColor: '#fff'
            }
        });



        module.exports = QSlider;

        /***/
    },
    /* 334 */
    /***/
    function(module, exports, __webpack_require__) {

        'use strict';
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor;
            };
        }();



        var _react = __webpack_require__(10);
        var _react2 = _interopRequireDefault(_react);
        var _StyleSheet = __webpack_require__(39);
        var _StyleSheet2 = _interopRequireDefault(_StyleSheet);
        var _View = __webpack_require__(27);
        var _View2 = _interopRequireDefault(_View);
        var _Text = __webpack_require__(67);
        var _Text2 = _interopRequireDefault(_Text);
        var _TouchableHighlight = __webpack_require__(185);
        var _TouchableHighlight2 = _interopRequireDefault(_TouchableHighlight);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
            }
        }

        function _possibleConstructorReturn(self, call) {
            if (!self) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            }
            return call && (typeof call === "object" || typeof call === "function") ? call : self;
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
        }
        var



            Tab = function(_Component) {
            _inherits(Tab, _Component);

            function Tab(props) {
                _classCallCheck(this, Tab);
                var _this = _possibleConstructorReturn(this, (Tab.__proto__ || Object.getPrototypeOf(Tab)).call(this,
                    props));

                _this.state = {
                    selectedIndex: _this.props.selectedIndex,
                    value: _this.props.selectedIndex ? _this.props.values[_this.props.selectedIndex] : undefined
                };
                return _this;

            }
            _createClass(Tab, [{
                key: 'render',
                value: function render()

                {
                    var _this2 = this;
                    var _props =
                        this.props,
                        enabled = _props.enabled,
                        values = _props.values,
                        tintColor = _props.tintColor,
                        tintTextColor = _props.tintTextColor,
                        momentary = _props.momentary,
                        style = _props.style,
                        _state =
                        this.state,
                        selectedIndex = _state.selectedIndex,
                        value = _state.value,
                        len = values.length;

                    return (
                        (this && this.createElement || _react2.default.createElement)(_View2.default, {
                                style: [styles.container, style, enabled ? null : styles.disabled, {
                                    borderColor: tintColor
                                }]
                            },

                            values.map(function(item, i) {
                                return (
                                    (_this2 && _this2.createElement || _react2.default.createElement)(_TouchableHighlight2.default, {
                                            key: i,
                                            activeOpacity: 1,
                                            underlayColor: i === selectedIndex && !momentary ? enabled ? 'transparent' : tintColor : enabled ? tintColor : 'transparent',
                                            style: [styles.item, {
                                                    backgroundColor: i === selectedIndex && !momentary ? tintColor : 'transparent'
                                                },
                                                i > 0 ? {
                                                    borderLeftWidth: 1,
                                                    borderLeftColor: tintColor
                                                } :
                                                null
                                            ],
                                            onPress: function onPress(event) {
                                                return _this2._onPress(event, i, item);
                                            }
                                        },
                                        (_this2 && _this2.createElement || _react2.default.createElement)(_Text2.default, {
                                            style: [styles.text, {
                                                color: i === selectedIndex && !momentary ? tintTextColor : tintColor
                                            }],
                                            numberOfLines: 1
                                        }, item)));
                            })));



                }
            }, {
                key: '_onPress',
                value: function _onPress(

                    event, selectedIndex, value) {
                    if (this.props.enabled) {
                        if (selectedIndex != this.state.selectedIndex) {
                            this.setState({
                                selectedIndex: selectedIndex,
                                value: value
                            });

                            this.props.onChange ? this.props.onChange(event, selectedIndex, value) : null;
                        }
                        this.props.onPress ? this.props.onPress(event, selectedIndex, value) : null;
                    }
                }
            }]);
            return Tab;
        }(_react.Component);;

        Tab.defaultProps = {
            enabled: true,
            momentary: false,
            tintColor: '#007aff',
            tintTextColor: '#ffffff'
        };


        Tab.propTypes = {



            enabled: _react2.default.PropTypes.bool,



            momentary: _react2.default.PropTypes.bool,



            onChange: _react2.default.PropTypes.func,



            onPress: _react2.default.PropTypes.func,



            selectedIndex: _react2.default.PropTypes.number,



            tintColor: _react2.default.PropTypes.string,



            tintTextColor: _react2.default.PropTypes.string,



            values: _react2.default.PropTypes.array,



            style: _View2.default.propTypes.style
        };


        var styles = _StyleSheet2.default.create({
            container: {
                justifyContent: 'center',
                alignItems: 'center',
                flexDirection: 'row',
                backgroundColor: 'transparent',
                borderRadius: 4,
                borderWidth: 1
            },

            disabled: {
                opacity: 0.5
            },

            item: {
                flex: 1,
                paddingTop: 5,
                paddingBottom: 5
            },

            text: {
                textAlign: 'center'
            }
        });



        module.exports = Tab;

        /***/
    },
    /* 335 */
    /***/
    function(module, exports, __webpack_require__) {

        var _extends = Object.assign || function(target) {
            for (var i = 1; i < arguments.length; i++) {
                var source = arguments[i];
                for (var key in source) {
                    if (Object.prototype.hasOwnProperty.call(source, key)) {
                        target[key] = source[key];
                    }
                }
            }
            return target;
        };



        var React = __webpack_require__(10);
        var PropTypes = React.PropTypes;
        var NativeMethodsMixin = __webpack_require__(54);
        var StyleSheet = __webpack_require__(39);
        var PanResponder = __webpack_require__(195);
        var _require =
            __webpack_require__(74),
            __dispatch = _require.__dispatch;
        var View = __webpack_require__(27);



        var Switch = React.createClass({
            displayName: 'Switch',
            propTypes: {



                value: PropTypes.bool,



                disabled: PropTypes.bool,



                onValueChange: PropTypes.func,



                onTintColor: PropTypes.string,



                thumbTintColor: PropTypes.string,



                tintColor: PropTypes.string
            },

            mixins: [NativeMethodsMixin],
            getDefaultProps: function getDefaultProps() {
                return {
                    onTintColor: '#00e158',
                    thumbTintColor: '#fff',
                    tintColor: '#fff'
                };

            },
            getInitialState: function getInitialState() {
                this.timer = null;
                return {
                    value: this.props.value,
                    disabled: this.props.disabled
                };

            },
            componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
                this.setState({
                    value: nextProps.value,
                    disabled: nextProps.disabled
                });

            },
            componentWillMount: function componentWillMount() {
                var _this = this;
                this._panResponder = PanResponder.create({
                    onStartShouldSetPanResponder: function onStartShouldSetPanResponder() {
                        return true;
                    },
                    onPanResponderRelease: function onPanResponderRelease(e) {
                        _this.handleClick(e);
                    }
                });

            },
            componentWillUnmount: function componentWillUnmount() {
                clearTimeout(this.timer);
            },
            getStyles: function getStyles() {
                var
                    props = this.props;
                return StyleSheet.create({
                    span: {
                        position: 'relative',

                        margin: 2,
                        height: 30,
                        width: 50,
                        cursor: 'pointer',
                        verticalAlign: 'middle',
                        borderRadius: 20,
                        borderColor: '#dfdfdf',
                        borderWidth: 1,
                        borderStyle: 'solid',
                        WebkitUserSelect: 'none',
                        WebkitBoxSizing: 'content-box'
                    },


                    checkedSpan: {
                        borderColor: props.onTintColor,
                        backgroundColor: props.onTintColor,
                        boxShadow: props.onTintColor + ' 0 0 0 16px inset',
                        WebkitTransition: 'border 0.2s, box-shadow 0.2s, background-color 1s',
                        transition: 'border 0.2s, box-shadow 0.2s, background-color 1s'
                    },

                    uncheckedSpan: {
                        borderColor: '#dfdfdf',
                        backgroundColor: props.tintColor,
                        boxShadow: '#dfdfdf 0 0 0 0 inset',
                        WebkitTransition: 'border 0.2s, box-shadow 0.2s'
                    },

                    disabledSpan: {
                        opacity: 0.5,
                        cursor: 'not-allowed',
                        boxShadow: 'none'
                    },

                    small: {
                        position: 'absolute',
                        top: 0,
                        width: 30,
                        height: 30,
                        backgroundColor: props.thumbTintColor,
                        borderRadius: '100%',
                        boxShadow: '0 1px 3px rgba(0,0,0,0.4)',
                        WebkitTransition: '-webkit-transform 0.2s ease-in',
                        transition: 'transform 0.2s ease-in'
                    },

                    checkedSmall: {
                        WebkitTransform: 'translateX(20px)',
                        transform: 'translateX(20px)'
                    },

                    uncheckedSmall: {
                        WebkitTransform: 'translateX(0)',
                        transform: 'translateX(0)'
                    }
                });


            },
            handleClick: function handleClick(e) {
                var _this2 = this;
                if (this.state.disabled) {
                    return null;
                }

                var newVal = !this.state.value;
                this.props.onValueChange && this.props.onValueChange(newVal);
                this.setState({
                    value: newVal
                });


                var oldValue = this.props.value;
                this.timer = setTimeout(function() {
                    if (_this2.props.value === oldValue) {
                        _this2.setState({
                            value: _this2.props.value
                        });

                    }
                }, 200);
                __dispatch({
                    e: e,
                    type: 'Press',
                    target: this
                });
            },
            render: function render() {
                var styles = this.getStyles();
                var spancss = this.state.value ? _extends({}, styles.span, styles.checkedSpan) : _extends({}, styles.span, styles.uncheckedSpan);
                var smallcss = this.state.value ? _extends({}, styles.small, styles.checkedSmall) : _extends({}, styles.small, styles.uncheckedSmall);
                spancss = this.state.disabled ? _extends({}, spancss, styles.disabledSpan) : spancss;

                return (
                    (this && this.createElement || React.createElement)(View, _extends({},
                            this._panResponder.panHandlers, {
                                style: spancss
                            }),

                        (this && this.createElement || React.createElement)(View, {
                            style: smallcss
                        })));



            }
        });


        module.exports = Switch;

        /***/
    },
    /* 336 */
    /***/
    function(module, exports, __webpack_require__) {

        var _extends = Object.assign || function(target) {
            for (var i = 1; i < arguments.length; i++) {
                var source = arguments[i];
                for (var key in source) {
                    if (Object.prototype.hasOwnProperty.call(source, key)) {
                        target[key] = source[key];
                    }
                }
            }
            return target;
        };



        var Animated = __webpack_require__(337);
        var React = __webpack_require__(10);
        var StyleSheet = __webpack_require__(39);
        var TimerMixin = __webpack_require__(186);
        var Touchable = __webpack_require__(68);
        var TouchableWithoutFeedback = __webpack_require__(187);


        var PRESS_RETENTION_OFFSET = {
            top: 20,
            left: 20,
            right: 20,
            bottom: 30
        };



        var TouchableOpacity = React.createClass({
            displayName: 'TouchableOpacity',
            mixins: [TimerMixin, Touchable.Mixin],

            getDefaultProps: function getDefaultProps() {
                return {
                    activeOpacity: 0.2,
                    style: {}
                };

            },

            getInitialState: function getInitialState() {
                return _extends({},
                    this.touchableGetInitialState(), {
                        anim: new Animated.Value(1)
                    });

            },

            setOpacityTo: function setOpacityTo(value) {
                Animated.timing(
                    this.state.anim, {
                        toValue: value,
                        duration: 150
                    }).
                start();
            },

            touchableHandleActivePressIn: function touchableHandleActivePressIn(e) {
                this.clearTimeout(this._hideTimeout);
                this._hideTimeout = null;
                this._opacityActive();
                this.props.onPressIn && this.props.onPressIn(e);
            },

            touchableHandleActivePressOut: function touchableHandleActivePressOut(e) {
                if (!this._hideTimeout) {
                    this._opacityInactive();
                }
                this.props.onPressOut && this.props.onPressOut(e);
            },

            touchableHandlePress: function touchableHandlePress(e) {
                this.clearTimeout(this._hideTimeout);
                this._opacityActive();
                this._hideTimeout = this.setTimeout(
                    this._opacityInactive,
                    this.props.delayPressOut || 100);

                this.props.onPress && this.props.onPress(e);
            },

            touchableHandleLongPress: function touchableHandleLongPress(e) {
                this.props.onLongPress && this.props.onLongPress(e);
            },

            touchableGetPressRectOffset: function touchableGetPressRectOffset() {
                return this.props.pressRetentionOffset || PRESS_RETENTION_OFFSET;
            },

            touchableGetHitSlop: function touchableGetHitSlop() {
                return this.props.hitSlop;
            },

            touchableGetHighlightDelayMS: function touchableGetHighlightDelayMS() {
                return this.props.delayPressIn || 0;
            },

            touchableGetLongPressDelayMS: function touchableGetLongPressDelayMS() {
                return this.props.delayLongPress === 0 ? 0 :
                    this.props.delayLongPress || 500;
            },

            touchableGetPressOutDelayMS: function touchableGetPressOutDelayMS() {
                return this.props.delayPressOut || 0;
            },

            _opacityActive: function _opacityActive() {
                this.setOpacityTo(this.props.activeOpacity);
            },

            _opacityInactive: function _opacityInactive() {
                this.clearTimeout(this._hideTimeout);
                this._hideTimeout = null;
                var childStyle = StyleSheet.flatten(this.props.style) || {};
                this.setOpacityTo(
                    childStyle.opacity === undefined ? 1 : childStyle.opacity);

            },

            render: function render() {

                var style = this.props.style,
                    _style = [styles.root];
                if (style) {
                    if (style.join) {
                        _style = _style.concat(style);
                    } else {
                        _style.push(style);

                    }

                }

                _style.push({
                    opacity: this.state.anim
                });
                return (
                    (this && this.createElement || React.createElement)(Animated.View, {
                            accessible: true,
                            accessibilityLabel: this.props.accessibilityLabel,
                            accessibilityRole: this.props.accessibilityRole || 'button',
                            style: _style,
                            testID: this.props.testID,
                            onLayout: this.props.onLayout,
                            hitSlop: this.props.hitSlop,
                            onStartShouldSetResponder: this.touchableHandleStartShouldSetResponder,
                            onResponderTerminationRequest: this.touchableHandleResponderTerminationRequest,
                            onResponderGrant: this.touchableHandleResponderGrant,
                            onResponderMove: this.touchableHandleResponderMove,
                            onResponderRelease: this.touchableHandleResponderRelease,
                            onResponderTerminate: this.touchableHandleResponderTerminate,
                            tabIndex: '0'
                        },

                        this.props.children));


            }
        });


        TouchableOpacity.propTypes = _extends({},



            TouchableWithoutFeedback.propTypes, {



                activeOpacity: React.PropTypes.number
            });


        var styles = StyleSheet.create({
            root: {
                userSelect: 'none'
            }
        });



        module.exports = TouchableOpacity;

        /***/
    },
    /* 337 */
    /***/
    function(module, exports, __webpack_require__) {



        'use strict';
        var _extends = Object.assign || function(target) {
            for (var i = 1; i < arguments.length; i++) {
                var source = arguments[i];
                for (var key in source) {
                    if (Object.prototype.hasOwnProperty.call(source, key)) {
                        target[key] = source[key];
                    }
                }
            }
            return target;
        };
        var AnimatedImplementation = __webpack_require__(338);
        var Text = __webpack_require__(67);
        var Image = __webpack_require__(202);
        var View = __webpack_require__(27);

        module.exports = _extends({},
            AnimatedImplementation, {
                View: AnimatedImplementation.createAnimatedComponent(View),
                Text: AnimatedImplementation.createAnimatedComponent(Text),
                Image: AnimatedImplementation.createAnimatedComponent(Image)
            });

        /***/
    },
    /* 338 */
    /***/
    function(module, exports, __webpack_require__) {

        /* WEBPACK VAR INJECTION */
        (function(global) {



            'use strict';
            var _extends = Object.assign || function(target) {
                for (var i = 1; i < arguments.length; i++) {
                    var source = arguments[i];
                    for (var key in source) {
                        if (Object.prototype.hasOwnProperty.call(source, key)) {
                            target[key] = source[key];
                        }
                    }
                }
                return target;
            };
            var _createClass = function() {
                function defineProperties(target, props) {
                    for (var i = 0; i < props.length; i++) {
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || false;
                        descriptor.configurable = true;
                        if ("value" in descriptor) descriptor.writable = true;
                        Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }
                return function(Constructor, protoProps, staticProps) {
                    if (protoProps) defineProperties(Constructor.prototype, protoProps);
                    if (staticProps) defineProperties(Constructor, staticProps);
                    return Constructor;
                };
            }();

            function _possibleConstructorReturn(self, call) {
                if (!self) {
                    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                }
                return call && (typeof call === "object" || typeof call === "function") ? call : self;
            }

            function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, {
                    constructor: {
                        value: subClass,
                        enumerable: false,
                        writable: true,
                        configurable: true
                    }
                });
                if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
            }

            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                    throw new TypeError("Cannot call a class as a function");
                }
            }

            var Easing = __webpack_require__(339);
            var InteractionManager = __webpack_require__(342);
            var Interpolation = __webpack_require__(343);
            var React = __webpack_require__(10);
            var invariant = __webpack_require__(344);
            var SpringConfig = __webpack_require__(345);
            var Set = __webpack_require__(346);
            var _require =
                __webpack_require__(39),
                flatten = _require.flatten;
            var



                Animated = function() {
                function Animated() {
                    _classCallCheck(this, Animated);
                }
                _createClass(Animated, [{
                    key: '__attach',
                    value: function __attach() {}
                }, {
                    key: '__detach',
                    value: function __detach() {}
                }, {
                    key: '__getValue',
                    value: function __getValue() {}
                }, {
                    key: '__getAnimatedValue',
                    value: function __getAnimatedValue() {
                        return this.__getValue();
                    }
                }, {
                    key: '__addChild',
                    value: function __addChild(
                        child) {}
                }, {
                    key: '__removeChild',
                    value: function __removeChild(
                        child) {}
                }, {
                    key: '__getChildren',
                    value: function __getChildren() {
                        return [];
                    }
                }]);
                return Animated;
            }();
            var



                Animation = function() {
                function Animation() {
                    _classCallCheck(this, Animation);
                }
                _createClass(Animation, [{
                    key: 'start',
                    value: function start(



                        fromValue,
                        onUpdate,
                        onEnd,
                        previousAnimation) {}
                }, {
                    key: 'stop',
                    value: function stop() {}
                }, {
                    key: '__debouncedOnEnd',
                    value: function __debouncedOnEnd(

                        result) {
                        var onEnd = this.__onEnd;
                        this.__onEnd = null;
                        onEnd && onEnd(result);
                    }
                }]);
                return Animation;
            }();
            var


                AnimatedWithChildren = function(_Animated) {
                _inherits(AnimatedWithChildren, _Animated);


                function AnimatedWithChildren() {
                    _classCallCheck(this, AnimatedWithChildren);
                    var _this = _possibleConstructorReturn(this, (AnimatedWithChildren.__proto__ || Object.getPrototypeOf(AnimatedWithChildren)).call(this));

                    _this._children = [];
                    return _this;
                }
                _createClass(AnimatedWithChildren, [{
                    key: '__addChild',
                    value: function __addChild(

                        child) {
                        if (this._children.length === 0) {
                            this.__attach();
                        }
                        this._children.push(child);
                    }
                }, {
                    key: '__removeChild',
                    value: function __removeChild(

                        child) {
                        var index = this._children.indexOf(child);
                        if (index === -1) {
                            console.warn('Trying to remove a child that doesn\'t exist');
                            return;
                        }
                        this._children.splice(index, 1);
                        if (this._children.length === 0) {
                            this.__detach();
                        }
                    }
                }, {
                    key: '__getChildren',
                    value: function __getChildren()

                    {
                        return this._children;
                    }
                }]);
                return AnimatedWithChildren;
            }(Animated);



            function _flush(rootNode) {
                var animatedStyles = new Set();

                function findAnimatedStyles(node) {
                    if (typeof node.update === 'function') {
                        animatedStyles.add(node);
                    } else {
                        node.__getChildren().forEach(findAnimatedStyles);
                    }
                }
                findAnimatedStyles(rootNode);
                animatedStyles.forEach(function(animatedStyle) {
                    return animatedStyle.update();
                });
            }



            var easeInOut = Easing.inOut(Easing.ease);
            var

                TimingAnimation = function(_Animation) {
                _inherits(TimingAnimation, _Animation);



                function TimingAnimation(
                    config) {
                    _classCallCheck(this, TimingAnimation);
                    var _this2 = _possibleConstructorReturn(this, (TimingAnimation.__proto__ || Object.getPrototypeOf(TimingAnimation)).call(this));

                    _this2._toValue = config.toValue;
                    _this2._easing = config.easing || easeInOut;
                    _this2._duration = config.duration !== undefined ? config.duration : 500;
                    _this2._delay = config.delay || 0;
                    _this2.__isInteraction = config.isInteraction !== undefined ? config.isInteraction : true;
                    return _this2;
                }
                _createClass(TimingAnimation, [{
                    key: 'start',
                    value: function start(


                        fromValue,
                        onUpdate,
                        onEnd) {
                        var _this3 = this;
                        this.__active = true;
                        this._fromValue = fromValue;
                        this._onUpdate = onUpdate;
                        this.__onEnd = onEnd;

                        var start = function start() {
                            if (_this3._duration === 0) {
                                _this3._onUpdate(_this3._toValue);
                                _this3.__debouncedOnEnd({
                                    finished: true
                                });
                            } else {
                                _this3._startTime = Date.now();
                                _this3._animationFrame = requestAnimationFrame(_this3.onUpdate.bind(_this3));
                            }
                        };
                        if (this._delay) {
                            this._timeout = setTimeout(start, this._delay);
                        } else {
                            start();
                        }
                    }
                }, {
                    key: 'onUpdate',
                    value: function onUpdate()

                    {
                        var now = Date.now();
                        if (now >= this._startTime + this._duration) {
                            if (this._duration === 0) {
                                this._onUpdate(this._toValue);
                            } else {
                                this._onUpdate(
                                    this._fromValue + this._easing(1) * (this._toValue - this._fromValue));

                            }
                            this.__debouncedOnEnd({
                                finished: true
                            });
                            return;
                        }

                        this._onUpdate(
                            this._fromValue +
                            this._easing((now - this._startTime) / this._duration) * (
                                this._toValue - this._fromValue));

                        if (this.__active) {
                            this._animationFrame = requestAnimationFrame(this.onUpdate.bind(this));
                        }
                    }
                }, {
                    key: 'stop',
                    value: function stop()

                    {
                        this.__active = false;
                        clearTimeout(this._timeout);
                        global.cancelAnimationFrame(this._animationFrame);
                        this.__debouncedOnEnd({
                            finished: false
                        });
                    }
                }]);
                return TimingAnimation;
            }(Animation);
            var



                DecayAnimation = function(_Animation2) {
                _inherits(DecayAnimation, _Animation2);



                function DecayAnimation(
                    config) {
                    _classCallCheck(this, DecayAnimation);
                    var _this4 = _possibleConstructorReturn(this, (DecayAnimation.__proto__ || Object.getPrototypeOf(DecayAnimation)).call(this));

                    _this4._deceleration = config.deceleration || 0.998;
                    _this4._velocity = config.velocity;
                    _this4.__isInteraction = config.isInteraction !== undefined ? config.isInteraction : true;
                    return _this4;
                }
                _createClass(DecayAnimation, [{
                    key: 'start',
                    value: function start(


                        fromValue,
                        onUpdate,
                        onEnd) {
                        this.__active = true;
                        this._lastValue = fromValue;
                        this._fromValue = fromValue;
                        this._onUpdate = onUpdate;
                        this.__onEnd = onEnd;
                        this._startTime = Date.now();
                        this._animationFrame = requestAnimationFrame(this.onUpdate.bind(this));
                    }
                }, {
                    key: 'onUpdate',
                    value: function onUpdate()

                    {
                        var now = Date.now();

                        var value = this._fromValue +
                            this._velocity / (1 - this._deceleration) * (
                                1 - Math.exp(-(1 - this._deceleration) * (now - this._startTime)));

                        this._onUpdate(value);

                        if (Math.abs(this._lastValue - value) < 0.1) {
                            this.__debouncedOnEnd({
                                finished: true
                            });
                            return;
                        }

                        this._lastValue = value;
                        if (this.__active) {
                            this._animationFrame = requestAnimationFrame(this.onUpdate.bind(this));
                        }
                    }
                }, {
                    key: 'stop',
                    value: function stop()

                    {
                        this.__active = false;
                        global.cancelAnimationFrame(this._animationFrame);
                        this.__debouncedOnEnd({
                            finished: false
                        });
                    }
                }]);
                return DecayAnimation;
            }(Animation);



            function withDefault(value, defaultValue) {
                if (value === undefined || value === null) {
                    return defaultValue;
                }
                return value;
            }
            var

                SpringAnimation = function(_Animation3) {
                _inherits(SpringAnimation, _Animation3);



                function SpringAnimation(
                    config) {
                    _classCallCheck(this, SpringAnimation);
                    var _this5 = _possibleConstructorReturn(this, (SpringAnimation.__proto__ || Object.getPrototypeOf(SpringAnimation)).call(this));


                    _this5._overshootClamping = withDefault(config.overshootClamping, false);
                    _this5._restDisplacementThreshold = withDefault(config.restDisplacementThreshold, 0.001);
                    _this5._restSpeedThreshold = withDefault(config.restSpeedThreshold, 0.001);
                    _this5._initialVelocity = config.velocity;
                    _this5._lastVelocity = withDefault(config.velocity, 0);
                    _this5._toValue = config.toValue;
                    _this5.__isInteraction = config.isInteraction !== undefined ? config.isInteraction : true;

                    var springConfig;
                    if (config.bounciness !== undefined || config.speed !== undefined) {
                        invariant(
                            config.tension === undefined && config.friction === undefined,
                            'You can only define bounciness/speed or tension/friction but not both');

                        springConfig = SpringConfig.fromBouncinessAndSpeed(
                            withDefault(config.bounciness, 8),
                            withDefault(config.speed, 12));

                    } else {
                        springConfig = SpringConfig.fromOrigamiTensionAndFriction(
                            withDefault(config.tension, 40),
                            withDefault(config.friction, 7));

                    }
                    _this5._tension = springConfig.tension;
                    _this5._friction = springConfig.friction;
                    return _this5;
                }
                _createClass(SpringAnimation, [{
                    key: 'start',
                    value: function start(


                        fromValue,
                        onUpdate,
                        onEnd,
                        previousAnimation) {
                        this.__active = true;
                        this._startPosition = fromValue;
                        this._lastPosition = this._startPosition;

                        this._onUpdate = onUpdate;
                        this.__onEnd = onEnd;
                        this._lastTime = Date.now();

                        if (previousAnimation instanceof SpringAnimation) {
                            var internalState = previousAnimation.getInternalState();
                            this._lastPosition = internalState.lastPosition;
                            this._lastVelocity = internalState.lastVelocity;
                            this._lastTime = internalState.lastTime;
                        }
                        if (this._initialVelocity !== undefined &&
                            this._initialVelocity !== null) {
                            this._lastVelocity = this._initialVelocity;
                        }
                        this.onUpdate();
                    }
                }, {
                    key: 'getInternalState',
                    value: function getInternalState()

                    {
                        return {
                            lastPosition: this._lastPosition,
                            lastVelocity: this._lastVelocity,
                            lastTime: this._lastTime
                        };

                    }
                }, {
                    key: 'onUpdate',
                    value: function onUpdate()

                    {
                        var position = this._lastPosition;
                        var velocity = this._lastVelocity;

                        var tempPosition = this._lastPosition;
                        var tempVelocity = this._lastVelocity;



                        var MAX_STEPS = 64;
                        var now = Date.now();
                        if (now > this._lastTime + MAX_STEPS) {
                            now = this._lastTime + MAX_STEPS;
                        }



                        var TIMESTEP_MSEC = 1;
                        var numSteps = Math.floor((now - this._lastTime) / TIMESTEP_MSEC);

                        for (var i = 0; i < numSteps; ++i) {

                            var step = TIMESTEP_MSEC / 1000;



                            var aVelocity = velocity;
                            var aAcceleration = this._tension * (this._toValue - tempPosition) - this._friction * tempVelocity;
                            var tempPosition = position + aVelocity * step / 2;
                            var tempVelocity = velocity + aAcceleration * step / 2;

                            var bVelocity = tempVelocity;
                            var bAcceleration = this._tension * (this._toValue - tempPosition) - this._friction * tempVelocity;
                            tempPosition = position + bVelocity * step / 2;
                            tempVelocity = velocity + bAcceleration * step / 2;

                            var cVelocity = tempVelocity;
                            var cAcceleration = this._tension * (this._toValue - tempPosition) - this._friction * tempVelocity;
                            tempPosition = position + cVelocity * step / 2;
                            tempVelocity = velocity + cAcceleration * step / 2;

                            var dVelocity = tempVelocity;
                            var dAcceleration = this._tension * (this._toValue - tempPosition) - this._friction * tempVelocity;
                            tempPosition = position + cVelocity * step / 2;
                            tempVelocity = velocity + cAcceleration * step / 2;

                            var dxdt = (aVelocity + 2 * (bVelocity + cVelocity) + dVelocity) / 6;
                            var dvdt = (aAcceleration + 2 * (bAcceleration + cAcceleration) + dAcceleration) / 6;

                            position += dxdt * step;
                            velocity += dvdt * step;
                        }

                        this._lastTime = now;
                        this._lastPosition = position;
                        this._lastVelocity = velocity;

                        this._onUpdate(position);
                        if (!this.__active) {
                            return;
                        }


                        var isOvershooting = false;
                        if (this._overshootClamping && this._tension !== 0) {
                            if (this._startPosition < this._toValue) {
                                isOvershooting = position > this._toValue;
                            } else {
                                isOvershooting = position < this._toValue;
                            }
                        }
                        var isVelocity = Math.abs(velocity) <= this._restSpeedThreshold;
                        var isDisplacement = true;
                        if (this._tension !== 0) {
                            isDisplacement = Math.abs(this._toValue - position) <= this._restDisplacementThreshold;
                        }

                        if (isOvershooting || isVelocity && isDisplacement) {
                            if (this._tension !== 0) {

                                this._onUpdate(this._toValue);
                            }

                            this.__debouncedOnEnd({
                                finished: true
                            });
                            return;
                        }
                        this._animationFrame = requestAnimationFrame(this.onUpdate.bind(this));
                    }
                }, {
                    key: 'stop',
                    value: function stop()

                    {
                        this.__active = false;
                        global.cancelAnimationFrame(this._animationFrame);
                        this.__debouncedOnEnd({
                            finished: false
                        });
                    }
                }]);
                return SpringAnimation;
            }(Animation);



            var _uniqueId = 1;
            var



                AnimatedValue = function(_AnimatedWithChildren) {
                _inherits(AnimatedValue, _AnimatedWithChildren);



                function AnimatedValue(value) {
                    _classCallCheck(this, AnimatedValue);
                    var _this6 = _possibleConstructorReturn(this, (AnimatedValue.__proto__ || Object.getPrototypeOf(AnimatedValue)).call(this));

                    _this6._value = value;
                    _this6._offset = 0;
                    _this6._animation = null;
                    _this6._listeners = {};
                    return _this6;
                }
                _createClass(AnimatedValue, [{
                    key: '__detach',
                    value: function __detach()

                    {
                        this.stopAnimation();
                    }
                }, {
                    key: '__getValue',
                    value: function __getValue()

                    {
                        return this._value + this._offset;
                    }
                }, {
                    key: 'setValue',
                    value: function setValue(



                        value) {
                        if (this._animation) {
                            this._animation.stop();
                            this._animation = null;
                        }
                        this._updateValue(value);
                    }
                }, {
                    key: 'setOffset',
                    value: function setOffset(



                        offset) {
                        this._offset = offset;
                    }
                }, {
                    key: 'flattenOffset',
                    value: function flattenOffset()



                    {
                        this._value += this._offset;
                        this._offset = 0;
                    }
                }, {
                    key: 'addListener',
                    value: function addListener(



                        callback) {
                        var id = String(_uniqueId++);
                        this._listeners[id] = callback;
                        return id;
                    }
                }, {
                    key: 'removeListener',
                    value: function removeListener(

                        id) {
                        delete this._listeners[id];
                    }
                }, {
                    key: 'removeAllListeners',
                    value: function removeAllListeners()

                    {
                        this._listeners = {};
                    }
                }, {
                    key: 'stopAnimation',
                    value: function stopAnimation(



                        callback) {
                        this.stopTracking();
                        this._animation && this._animation.stop();
                        this._animation = null;
                        callback && callback(this.__getValue());
                    }
                }, {
                    key: 'interpolate',
                    value: function interpolate(



                        config) {
                        return new AnimatedInterpolation(this, Interpolation.create(config));
                    }
                }, {
                    key: 'animate',
                    value: function animate(



                        animation, callback) {
                        var _this7 = this;
                        var handle = null;
                        if (animation.__isInteraction) {
                            handle = InteractionManager.createInteractionHandle();
                        }
                        var previousAnimation = this._animation;
                        this._animation && this._animation.stop();
                        this._animation = animation;
                        animation.start(
                            this._value,
                            function(value) {
                                _this7._updateValue(value);
                            },
                            function(result) {
                                _this7._animation = null;
                                if (handle !== null) {
                                    InteractionManager.clearInteractionHandle(handle);
                                }
                                callback && callback(result);
                            },
                            previousAnimation);

                    }
                }, {
                    key: 'stopTracking',
                    value: function stopTracking()



                    {
                        this._tracking && this._tracking.__detach();
                        this._tracking = null;
                    }
                }, {
                    key: 'track',
                    value: function track(



                        tracking) {
                        this.stopTracking();
                        this._tracking = tracking;
                    }
                }, {
                    key: '_updateValue',
                    value: function _updateValue(

                        value) {
                        this._value = value;
                        _flush(this);
                        for (var key in this._listeners) {
                            this._listeners[key]({
                                value: this.__getValue()
                            });
                        }
                    }
                }]);
                return AnimatedValue;
            }(AnimatedWithChildren);
            var



                AnimatedValueXY = function(_AnimatedWithChildren2) {
                _inherits(AnimatedValueXY, _AnimatedWithChildren2);



                function AnimatedValueXY(valueIn) {
                    _classCallCheck(this, AnimatedValueXY);
                    var _this8 = _possibleConstructorReturn(this, (AnimatedValueXY.__proto__ || Object.getPrototypeOf(AnimatedValueXY)).call(this));

                    var value = valueIn || {
                        x: 0,
                        y: 0
                    };
                    if (typeof value.x === 'number' && typeof value.y === 'number') {
                        _this8.x = new AnimatedValue(value.x);
                        _this8.y = new AnimatedValue(value.y);
                    } else {
                        invariant(
                            value.x instanceof AnimatedValue &&
                            value.y instanceof AnimatedValue,
                            'AnimatedValueXY must be initalized with an object of numbers or ' +
                            'AnimatedValues.');

                        _this8.x = value.x;
                        _this8.y = value.y;
                    }
                    _this8._listeners = {};
                    return _this8;
                }
                _createClass(AnimatedValueXY, [{
                    key: 'setValue',
                    value: function setValue(

                        value) {
                        this.x.setValue(value.x);
                        this.y.setValue(value.y);
                    }
                }, {
                    key: 'setOffset',
                    value: function setOffset(

                        offset) {
                        this.x.setOffset(offset.x);
                        this.y.setOffset(offset.y);
                    }
                }, {
                    key: 'flattenOffset',
                    value: function flattenOffset()

                    {
                        this.x.flattenOffset();
                        this.y.flattenOffset();
                    }
                }, {
                    key: '__getValue',
                    value: function __getValue()

                    {
                        return {
                            x: this.x.__getValue(),
                            y: this.y.__getValue()
                        };

                    }
                }, {
                    key: 'stopAnimation',
                    value: function stopAnimation(

                        callback) {
                        this.x.stopAnimation();
                        this.y.stopAnimation();
                        callback && callback(this.__getValue());
                    }
                }, {
                    key: 'addListener',
                    value: function addListener(

                        callback) {
                        var _this9 = this;
                        var id = String(_uniqueId++);
                        var jointCallback = function jointCallback(_ref) {
                            var number = _ref.value;
                            callback(_this9.__getValue());
                        };
                        this._listeners[id] = {
                            x: this.x.addListener(jointCallback),
                            y: this.y.addListener(jointCallback)
                        };

                        return id;
                    }
                }, {
                    key: 'removeListener',
                    value: function removeListener(

                        id) {
                        this.x.removeListener(this._listeners[id].x);
                        this.y.removeListener(this._listeners[id].y);
                        delete this._listeners[id];
                    }
                }, {
                    key: 'getLayout',
                    value: function getLayout()



                    {
                        return {
                            left: this.x,
                            top: this.y
                        };

                    }
                }, {
                    key: 'getTranslateTransform',
                    value: function getTranslateTransform()



                    {
                        return [{
                            translateX: this.x
                        }, {
                            translateY: this.y
                        }];

                    }
                }]);
                return AnimatedValueXY;
            }(AnimatedWithChildren);
            var


                AnimatedInterpolation = function(_AnimatedWithChildren3) {
                _inherits(AnimatedInterpolation, _AnimatedWithChildren3);



                function AnimatedInterpolation(parent, interpolation) {
                    _classCallCheck(this, AnimatedInterpolation);
                    var _this10 = _possibleConstructorReturn(this, (AnimatedInterpolation.__proto__ || Object.getPrototypeOf(AnimatedInterpolation)).call(this));

                    _this10._parent = parent;
                    _this10._interpolation = interpolation;
                    return _this10;
                }
                _createClass(AnimatedInterpolation, [{
                    key: '__getValue',
                    value: function __getValue()

                    {
                        var parentValue = this._parent.__getValue();
                        invariant(
                            typeof parentValue === 'number',
                            'Cannot interpolate an input which is not a number.');

                        return this._interpolation(parentValue);
                    }
                }, {
                    key: 'interpolate',
                    value: function interpolate(

                        config) {
                        return new AnimatedInterpolation(this, Interpolation.create(config));
                    }
                }, {
                    key: '__attach',
                    value: function __attach()

                    {
                        this._parent.__addChild(this);
                    }
                }, {
                    key: '__detach',
                    value: function __detach()

                    {
                        this._parent.__removeChild(this);
                    }
                }]);
                return AnimatedInterpolation;
            }(AnimatedWithChildren);
            var


                AnimatedAddition = function(_AnimatedWithChildren4) {
                _inherits(AnimatedAddition, _AnimatedWithChildren4);



                function AnimatedAddition(a, b) {
                    _classCallCheck(this, AnimatedAddition);
                    var _this11 = _possibleConstructorReturn(this, (AnimatedAddition.__proto__ || Object.getPrototypeOf(AnimatedAddition)).call(this));

                    _this11._a = a;
                    _this11._b = b;
                    return _this11;
                }
                _createClass(AnimatedAddition, [{
                    key: '__getValue',
                    value: function __getValue()

                    {
                        return this._a.__getValue() + this._b.__getValue();
                    }
                }, {
                    key: 'interpolate',
                    value: function interpolate(

                        config) {
                        return new AnimatedInterpolation(this, Interpolation.create(config));
                    }
                }, {
                    key: '__attach',
                    value: function __attach()

                    {
                        this._a.__addChild(this);
                        this._b.__addChild(this);
                    }
                }, {
                    key: '__detach',
                    value: function __detach()

                    {
                        this._a.__removeChild(this);
                        this._b.__removeChild(this);
                    }
                }]);
                return AnimatedAddition;
            }(AnimatedWithChildren);
            var


                AnimatedMultiplication = function(_AnimatedWithChildren5) {
                _inherits(AnimatedMultiplication, _AnimatedWithChildren5);



                function AnimatedMultiplication(a, b) {
                    _classCallCheck(this, AnimatedMultiplication);
                    var _this12 = _possibleConstructorReturn(this, (AnimatedMultiplication.__proto__ || Object.getPrototypeOf(AnimatedMultiplication)).call(this));

                    _this12._a = a;
                    _this12._b = b;
                    return _this12;
                }
                _createClass(AnimatedMultiplication, [{
                    key: '__getValue',
                    value: function __getValue()

                    {
                        return this._a.__getValue() * this._b.__getValue();
                    }
                }, {
                    key: 'interpolate',
                    value: function interpolate(

                        config) {
                        return new AnimatedInterpolation(this, Interpolation.create(config));
                    }
                }, {
                    key: '__attach',
                    value: function __attach()

                    {
                        this._a.__addChild(this);
                        this._b.__addChild(this);
                    }
                }, {
                    key: '__detach',
                    value: function __detach()

                    {
                        this._a.__removeChild(this);
                        this._b.__removeChild(this);
                    }
                }]);
                return AnimatedMultiplication;
            }(AnimatedWithChildren);
            var



                AnimatedModulo = function(_AnimatedWithChildren6) {
                _inherits(AnimatedModulo, _AnimatedWithChildren6);



                function AnimatedModulo(a, modulus) {
                    _classCallCheck(this, AnimatedModulo);
                    var _this13 = _possibleConstructorReturn(this, (AnimatedModulo.__proto__ || Object.getPrototypeOf(AnimatedModulo)).call(this));

                    _this13._a = a;
                    _this13._modulus = modulus;
                    return _this13;
                }
                _createClass(AnimatedModulo, [{
                    key: '__getValue',
                    value: function __getValue()

                    {
                        return (this._a.__getValue() % this._modulus + this._modulus) % this._modulus;
                    }
                }, {
                    key: 'interpolate',
                    value: function interpolate(

                        config) {
                        return new AnimatedInterpolation(this, config);
                    }
                }, {
                    key: '__attach',
                    value: function __attach()

                    {
                        this._a.__addChild(this);
                    }
                }, {
                    key: '__detach',
                    value: function __detach()

                    {
                        this._a.__removeChild(this);
                    }
                }]);
                return AnimatedModulo;
            }(AnimatedWithChildren);
            var


                AnimatedTransform = function(_AnimatedWithChildren7) {
                _inherits(AnimatedTransform, _AnimatedWithChildren7);


                function AnimatedTransform(transforms) {
                    _classCallCheck(this, AnimatedTransform);
                    var _this14 = _possibleConstructorReturn(this, (AnimatedTransform.__proto__ || Object.getPrototypeOf(AnimatedTransform)).call(this));

                    _this14._transforms = transforms;
                    return _this14;
                }
                _createClass(AnimatedTransform, [{
                    key: '__getValue',
                    value: function __getValue()

                    {
                        return this._transforms.map(function(transform) {
                            var result = {};
                            for (var key in transform) {
                                var value = transform[key];
                                if (value instanceof Animated) {
                                    result[key] = value.__getValue();
                                } else {
                                    result[key] = value;
                                }
                            }
                            return result;
                        });
                    }
                }, {
                    key: '__getAnimatedValue',
                    value: function __getAnimatedValue()

                    {
                        return this._transforms.map(function(transform) {
                            var result = {};
                            for (var key in transform) {
                                var value = transform[key];
                                if (value instanceof Animated) {
                                    result[key] = value.__getAnimatedValue();
                                } else {

                                    result[key] = value;
                                }
                            }
                            return result;
                        });
                    }
                }, {
                    key: '__attach',
                    value: function __attach()

                    {
                        var _this15 = this;
                        this._transforms.forEach(function(transform) {
                            for (var key in transform) {
                                var value = transform[key];
                                if (value instanceof Animated) {
                                    value.__addChild(_this15);
                                }
                            }
                        });
                    }
                }, {
                    key: '__detach',
                    value: function __detach()

                    {
                        var _this16 = this;
                        this._transforms.forEach(function(transform) {
                            for (var key in transform) {
                                var value = transform[key];
                                if (value instanceof Animated) {
                                    value.__removeChild(_this16);
                                }
                            }
                        });
                    }
                }]);
                return AnimatedTransform;
            }(AnimatedWithChildren);
            var


                AnimatedStyle = function(_AnimatedWithChildren8) {
                _inherits(AnimatedStyle, _AnimatedWithChildren8);


                function AnimatedStyle(style) {
                    _classCallCheck(this, AnimatedStyle);
                    var _this17 = _possibleConstructorReturn(this, (AnimatedStyle.__proto__ || Object.getPrototypeOf(AnimatedStyle)).call(this));

                    style = flatten(style) || {};
                    if (style.transform) {
                        style = _extends({},
                            style, {
                                transform: new AnimatedTransform(style.transform)
                            });

                    }
                    _this17._style = style;
                    return _this17;
                }
                _createClass(AnimatedStyle, [{
                    key: '__getValue',
                    value: function __getValue()

                    {
                        var style = {};
                        for (var key in this._style) {
                            var value = this._style[key];
                            if (value instanceof Animated) {
                                style[key] = value.__getValue();
                            } else {
                                style[key] = value;
                            }
                        }
                        return style;
                    }
                }, {
                    key: '__getAnimatedValue',
                    value: function __getAnimatedValue()

                    {
                        var style = {};
                        for (var key in this._style) {
                            var value = this._style[key];
                            if (value instanceof Animated) {
                                style[key] = value.__getAnimatedValue();
                            }
                        }
                        return style;
                    }
                }, {
                    key: '__attach',
                    value: function __attach()

                    {
                        for (var key in this._style) {
                            var value = this._style[key];
                            if (value instanceof Animated) {
                                value.__addChild(this);
                            }
                        }
                    }
                }, {
                    key: '__detach',
                    value: function __detach()

                    {
                        for (var key in this._style) {
                            var value = this._style[key];
                            if (value instanceof Animated) {
                                value.__removeChild(this);
                            }
                        }
                    }
                }]);
                return AnimatedStyle;
            }(AnimatedWithChildren);
            var


                AnimatedProps = function(_Animated2) {
                _inherits(AnimatedProps, _Animated2);



                function AnimatedProps(
                    props,
                    callback) {
                    _classCallCheck(this, AnimatedProps);
                    var _this18 = _possibleConstructorReturn(this, (AnimatedProps.__proto__ || Object.getPrototypeOf(AnimatedProps)).call(this));

                    if (props.style) {
                        props = _extends({},
                            props, {
                                style: new AnimatedStyle(props.style)
                            });

                    }
                    _this18._props = props;
                    _this18._callback = callback;
                    _this18.__attach();
                    return _this18;
                }
                _createClass(AnimatedProps, [{
                    key: '__getValue',
                    value: function __getValue()

                    {
                        var props = {};
                        for (var key in this._props) {
                            var value = this._props[key];
                            if (value instanceof Animated) {
                                props[key] = value.__getValue();
                            } else {
                                props[key] = value;
                            }
                        }
                        return props;
                    }
                }, {
                    key: '__getAnimatedValue',
                    value: function __getAnimatedValue()

                    {
                        var props = {};
                        for (var key in this._props) {
                            var value = this._props[key];
                            if (value instanceof Animated) {
                                props[key] = value.__getAnimatedValue();
                            }
                        }
                        return props;
                    }
                }, {
                    key: '__attach',
                    value: function __attach()

                    {
                        for (var key in this._props) {
                            var value = this._props[key];
                            if (value instanceof Animated) {
                                value.__addChild(this);
                            }
                        }
                    }
                }, {
                    key: '__detach',
                    value: function __detach()

                    {
                        for (var key in this._props) {
                            var value = this._props[key];
                            if (value instanceof Animated) {
                                value.__removeChild(this);
                            }
                        }
                    }
                }, {
                    key: 'update',
                    value: function update()

                    {
                        this._callback();
                    }
                }]);
                return AnimatedProps;
            }(Animated);


            function createAnimatedComponent(Component) {
                var refName = 'node';
                var

                    AnimatedComponent = function(_React$Component) {
                    _inherits(AnimatedComponent, _React$Component);

                    function AnimatedComponent(props) {
                        _classCallCheck(this, AnimatedComponent);
                        return _possibleConstructorReturn(this, (AnimatedComponent.__proto__ || Object.getPrototypeOf(AnimatedComponent)).call(this,
                            props));
                    }
                    _createClass(AnimatedComponent, [{
                        key: 'componentWillUnmount',
                        value: function componentWillUnmount()


                        {
                            this._propsAnimated && this._propsAnimated.__detach();
                        }
                    }, {
                        key: 'setNativeProps',
                        value: function setNativeProps(

                            props) {
                            this.refs[refName].setNativeProps(props);
                        }
                    }, {
                        key: 'componentWillMount',
                        value: function componentWillMount()

                        {
                            this.attachProps(this.props);
                        }
                    }, {
                        key: 'attachProps',
                        value: function attachProps(

                            nextProps) {
                            var _this20 = this;
                            var oldPropsAnimated = this._propsAnimated;



                            var callback = function callback() {

                                if (_this20.refs[refName].setNativeProps) {
                                    var value = _this20._propsAnimated.__getAnimatedValue();
                                    _this20.refs[refName].setNativeProps(value);
                                } else {
                                    _this20.forceUpdate();
                                }

                            };

                            this._propsAnimated = new AnimatedProps(
                                nextProps,
                                callback);



                            oldPropsAnimated && oldPropsAnimated.__detach();
                        }
                    }, {
                        key: 'componentWillReceiveProps',
                        value: function componentWillReceiveProps(

                            nextProps) {
                            this.attachProps(nextProps);
                        }
                    }, {
                        key: 'render',
                        value: function render()

                        {
                            return (
                                (this && this.createElement || React.createElement)(Component, _extends({},
                                    this._propsAnimated.__getValue(), {
                                        ref: refName
                                    })));


                        }
                    }]);
                    return AnimatedComponent;
                }(React.Component);

                AnimatedComponent.propTypes = {
                    style: function style(props, propName, componentName) {
                        if (!Component.propTypes) {
                            return;
                        }
                    }
                };


                return AnimatedComponent;
            }
            var

                AnimatedTracking = function(_Animated3) {
                _inherits(AnimatedTracking, _Animated3);



                function AnimatedTracking(
                    value,
                    parent,
                    animationClass,
                    animationConfig,
                    callback) {
                    _classCallCheck(this, AnimatedTracking);
                    var _this21 = _possibleConstructorReturn(this, (AnimatedTracking.__proto__ || Object.getPrototypeOf(AnimatedTracking)).call(this));

                    _this21._value = value;
                    _this21._parent = parent;
                    _this21._animationClass = animationClass;
                    _this21._animationConfig = animationConfig;
                    _this21._callback = callback;
                    _this21.__attach();
                    return _this21;
                }
                _createClass(AnimatedTracking, [{
                    key: '__getValue',
                    value: function __getValue()

                    {
                        return this._parent.__getValue();
                    }
                }, {
                    key: '__attach',
                    value: function __attach()

                    {
                        this._parent.__addChild(this);
                    }
                }, {
                    key: '__detach',
                    value: function __detach()

                    {
                        this._parent.__removeChild(this);
                    }
                }, {
                    key: 'update',
                    value: function update()

                    {
                        this._value.animate(new this._animationClass(_extends({},
                                this._animationConfig, {
                                    toValue: this._animationConfig.toValue.__getValue()
                                })),
                            this._callback);
                    }
                }]);
                return AnimatedTracking;
            }(Animated);



            var add = function add(
                a,
                b) {
                return new AnimatedAddition(a, b);
            };

            var multiply = function multiply(
                a,
                b) {
                return new AnimatedMultiplication(a, b);
            };

            var modulo = function modulo(
                a,
                modulus) {
                return new AnimatedModulo(a, modulus);
            };



            var maybeVectorAnim = function maybeVectorAnim(
                value,
                config,
                anim) {
                if (value instanceof AnimatedValueXY) {
                    var configX = _extends({}, config);
                    var configY = _extends({}, config);
                    for (var key in config) {
                        var _config$key =
                            config[key],
                            x = _config$key.x,
                            y = _config$key.y;
                        if (x !== undefined && y !== undefined) {
                            configX[key] = x;
                            configY[key] = y;
                        }
                    }
                    var aX = anim(value.x, configX);
                    var aY = anim(value.y, configY);


                    return parallel([aX, aY], {
                        stopTogether: false
                    });
                }
                return null;
            };

            var spring = function spring(
                value,
                config) {
                return maybeVectorAnim(value, config, spring) || {
                    start: function start(callback) {
                        var singleValue = value;
                        var singleConfig = config;
                        singleValue.stopTracking();
                        if (config.toValue instanceof Animated) {
                            singleValue.track(new AnimatedTracking(
                                singleValue,
                                config.toValue,
                                SpringAnimation,
                                singleConfig,
                                callback));

                        } else {
                            singleValue.animate(new SpringAnimation(singleConfig), callback);
                        }
                    },

                    stop: function stop() {
                        value.stopAnimation();
                    }
                };

            };

            var timing = function timing(
                value,
                config) {
                return maybeVectorAnim(value, config, timing) || {
                    start: function start(callback) {
                        var singleValue = value;
                        var singleConfig = config;
                        singleValue.stopTracking();
                        if (config.toValue instanceof Animated) {
                            singleValue.track(new AnimatedTracking(
                                singleValue,
                                config.toValue,
                                TimingAnimation,
                                singleConfig,
                                callback));

                        } else {
                            singleValue.animate(new TimingAnimation(singleConfig), callback);
                        }
                    },

                    stop: function stop() {
                        value.stopAnimation();
                    }
                };

            };

            var decay = function decay(
                value,
                config) {
                return maybeVectorAnim(value, config, decay) || {
                    start: function start(callback) {
                        var singleValue = value;
                        var singleConfig = config;
                        singleValue.stopTracking();
                        singleValue.animate(new DecayAnimation(singleConfig), callback);
                    },

                    stop: function stop() {
                        value.stopAnimation();
                    }
                };

            };

            var sequence = function sequence(
                animations) {
                var current = 0;
                return {
                    start: function start(callback) {
                        var onComplete = function onComplete(result) {
                            if (!result.finished) {
                                callback && callback(result);
                                return;
                            }

                            current++;

                            if (current === animations.length) {
                                callback && callback(result);
                                return;
                            }

                            animations[current].start(onComplete);
                        };

                        if (animations.length === 0) {
                            callback && callback({
                                finished: true
                            });
                        } else {
                            animations[current].start(onComplete);
                        }
                    },

                    stop: function stop() {
                        if (current < animations.length) {
                            animations[current].stop();
                        }
                    }
                };

            };



            var parallel = function parallel(
                animations,
                config) {
                var doneCount = 0;

                var hasEnded = {};
                var stopTogether = !(config && config.stopTogether === false);

                var result = {
                    start: function start(callback) {
                        if (doneCount === animations.length) {
                            callback && callback({
                                finished: true
                            });
                            return;
                        }

                        animations.forEach(function(animation, idx) {
                            var cb = function cb(endResult) {
                                hasEnded[idx] = true;
                                doneCount++;
                                if (doneCount === animations.length) {
                                    doneCount = 0;
                                    callback && callback(endResult);
                                    return;
                                }

                                if (!endResult.finished && stopTogether) {
                                    result.stop();
                                }
                            };

                            if (!animation) {
                                cb({
                                    finished: true
                                });
                            } else {
                                animation.start(cb);
                            }
                        });
                    },

                    stop: function stop() {
                        animations.forEach(function(animation, idx) {
                            !hasEnded[idx] && animation.stop();
                            hasEnded[idx] = true;
                        });
                    }
                };


                return result;
            };

            var delay = function delay(time) {

                return timing(new AnimatedValue(0), {
                    toValue: 0,
                    delay: time,
                    duration: 0
                });
            };

            var stagger = function stagger(
                time,
                animations) {
                return parallel(animations.map(function(animation, i) {
                    return sequence([
                        delay(time * i),
                        animation
                    ]);

                }));
            };



            var event = function event(
                argMapping,
                config) {
                return function() {
                    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                        args[_key] = arguments[_key];
                    }
                    var traverse = function traverse(recMapping, recEvt, key) {
                        if (typeof recEvt === 'number') {
                            invariant(
                                recMapping instanceof AnimatedValue,
                                'Bad mapping of type ' + typeof recMapping + ' for key ' + key +
                                ', event value must map to AnimatedValue');

                            recMapping.setValue(recEvt);
                            return;
                        }
                        invariant(
                            typeof recMapping === 'object',
                            'Bad mapping of type ' + typeof recMapping + ' for key ' + key);

                        invariant(
                            typeof recEvt === 'object',
                            'Bad event of type ' + typeof recEvt + ' for key ' + key);

                        for (var key in recMapping) {

                            if (key === "contentOffset" && !("contentOffset" in recEvt)) continue;
                            traverse(recMapping[key], recEvt[key], key);
                        }
                    };
                    argMapping.forEach(function(mapping, idx) {
                        traverse(mapping, args[idx], 'arg' + idx);
                    });
                    if (config && config.listener) {
                        config.listener.apply(null, args);
                    }
                };
            };



            module.exports = {



                Value: AnimatedValue,



                ValueXY: AnimatedValueXY,



                decay: decay,



                timing: timing,



                spring: spring,



                add: add,



                multiply: multiply,

                modulo: modulo,



                delay: delay,



                sequence: sequence,



                parallel: parallel,



                stagger: stagger,



                event: event,



                createAnimatedComponent: createAnimatedComponent,

                __PropsOnlyForTests: AnimatedProps
            };
            /* WEBPACK VAR INJECTION */
        }.call(exports, (function() {
            return this;
        }())))

        /***/
    },
    /* 339 */
    /***/
    function(module, exports, __webpack_require__) {



        var impl = __webpack_require__(340);

        module.exports = impl;

        /***/
    },
    /* 340 */
    /***/
    function(module, exports, __webpack_require__) {

        'use strict';
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor;
            };
        }();

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
            }
        }

        var _bezier = __webpack_require__(341);
        var



            Easing = function() {
            function Easing() {
                _classCallCheck(this, Easing);
            }
            _createClass(Easing, null, [{
                key: 'step0',
                value: function step0(
                    n) {
                    return n > 0 ? 1 : 0;
                }
            }, {
                key: 'step1',
                value: function step1(

                    n) {
                    return n >= 1 ? 1 : 0;
                }
            }, {
                key: 'linear',
                value: function linear(

                    t) {
                    return t;
                }
            }, {
                key: 'ease',
                value: function ease(

                    t) {
                    return _ease(t);
                }
            }, {
                key: 'quad',
                value: function quad(

                    t) {
                    return t * t;
                }
            }, {
                key: 'cubic',
                value: function cubic(

                    t) {
                    return t * t * t;
                }
            }, {
                key: 'poly',
                value: function poly(

                    n) {
                    return function(t) {
                        return Math.pow(t, n);
                    };
                }
            }, {
                key: 'sin',
                value: function sin(

                    t) {
                    return 1 - Math.cos(t * Math.PI / 2);
                }
            }, {
                key: 'circle',
                value: function circle(

                    t) {
                    return 1 - Math.sqrt(1 - t * t);
                }
            }, {
                key: 'exp',
                value: function exp(

                    t) {
                    return Math.pow(2, 10 * (t - 1));
                }
            }, {
                key: 'elastic',
                value: function elastic(

                    a, p) {
                    var tau = Math.PI * 2;


                    var s;
                    if (arguments.length < 2) {
                        p = 0.45;
                    }
                    if (arguments.length) {
                        s = p / tau * Math.asin(1 / a);
                    } else {
                        a = 1;
                        s = p / 4;
                    }
                    return function(t) {
                        return 1 + a * Math.pow(2, -10 * t) * Math.sin((t - s) * tau / p);
                    };
                }
            }, {
                key: 'back',
                value: function back(

                    s) {
                    if (s === undefined) {
                        s = 1.70158;
                    }
                    return function(t) {
                        return t * t * ((s + 1) * t - s);
                    };
                }
            }, {
                key: 'bounce',
                value: function bounce(

                    t) {
                    if (t < 1 / 2.75) {
                        return 7.5625 * t * t;
                    }

                    if (t < 2 / 2.75) {
                        t -= 1.5 / 2.75;
                        return 7.5625 * t * t + 0.75;
                    }

                    if (t < 2.5 / 2.75) {
                        t -= 2.25 / 2.75;
                        return 7.5625 * t * t + 0.9375;
                    }

                    t -= 2.625 / 2.75;
                    return 7.5625 * t * t + 0.984375;
                }
            }, {
                key: 'bezier',
                value: function bezier(


                    x1,
                    y1,
                    x2,
                    y2,
                    epsilon) {
                    if (epsilon === undefined) {


                        var duration = 500;
                        epsilon = 1000 / 60 / duration / 4;
                    }

                    return _bezier(x1, y1, x2, y2, epsilon);
                }
            }, {
                key: 'in',
                value: function _in(


                    easing) {
                    return easing;
                }
            }, {
                key: 'out',
                value: function out(


                    easing) {
                    return function(t) {
                        return 1 - easing(1 - t);
                    };
                }
            }, {
                key: 'inOut',
                value: function inOut(


                    easing) {
                    return function(t) {
                        if (t < 0.5) {
                            return easing(t * 2) / 2;
                        }
                        return 1 - easing((1 - t) * 2) / 2;
                    };
                }
            }]);
            return Easing;
        }();


        var _ease = Easing.bezier(0.42, 0, 1, 1);

        module.exports = Easing;

        /***/
    },
    /* 341 */
    /***/
    function(module, exports) {

        'use strict';

        module.exports = function(x1, y1, x2, y2, epsilon) {

            var curveX = function curveX(t) {
                var v = 1 - t;
                return 3 * v * v * t * x1 + 3 * v * t * t * x2 + t * t * t;
            };

            var curveY = function curveY(t) {
                var v = 1 - t;
                return 3 * v * v * t * y1 + 3 * v * t * t * y2 + t * t * t;
            };

            var derivativeCurveX = function derivativeCurveX(t) {
                var v = 1 - t;
                return 3 * (2 * (t - 1) * t + v * v) * x1 + 3 * (-t * t * t + 2 * v * t) * x2;
            };

            return function(t) {

                var x = t,
                    t0, t1, t2, x2, d2, i;


                for (t2 = x, i = 0; i < 8; i++) {
                    x2 = curveX(t2) - x;
                    if (Math.abs(x2) < epsilon) return curveY(t2);
                    d2 = derivativeCurveX(t2);
                    if (Math.abs(d2) < 1e-6) break;
                    t2 = t2 - x2 / d2;
                }

                t0 = 0, t1 = 1, t2 = x;

                if (t2 < t0) return curveY(t0);
                if (t2 > t1) return curveY(t1);


                while (t0 < t1) {
                    x2 = curveX(t2);
                    if (Math.abs(x2 - x) < epsilon) return curveY(t2);
                    if (x > x2) t0 = t2;
                    else
                        t1 = t2;
                    t2 = (t1 - t0) * .5 + t0;
                }


                return curveY(t2);

            };

        };

        /***/
    },
    /* 342 */
    /***/
    function(module, exports) {



        'use strict';

        module.exports = {
            createInteractionHandle: function createInteractionHandle() {},
            clearInteractionHandle: function clearInteractionHandle() {},
            runAfterInteractions: function runAfterInteractions(cb) {
                cb();
            },
            setDeadline: function setDeadline() {}
        };

        /***/
    },
    /* 343 */
    /***/
    function(module, exports, __webpack_require__) {



        'use strict';
        var _extends = Object.assign || function(target) {
            for (var i = 1; i < arguments.length; i++) {
                var source = arguments[i];
                for (var key in source) {
                    if (Object.prototype.hasOwnProperty.call(source, key)) {
                        target[key] = source[key];
                    }
                }
            }
            return target;
        };
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor;
            };
        }();

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
            }
        }

        var invariant = __webpack_require__(19);
        var normalizeColor = __webpack_require__(323);



        var linear = function linear(t) {
            return t;
        };
        var



            Interpolation = function() {
            function Interpolation() {
                _classCallCheck(this, Interpolation);
            }
            _createClass(Interpolation, null, [{
                key: 'create',
                value: function create(
                    config) {

                    if (config.outputRange && typeof config.outputRange[0] === 'string') {
                        return createInterpolationFromStringOutputRange(config);
                    }

                    var outputRange = config.outputRange;
                    checkInfiniteRange('outputRange', outputRange);

                    var inputRange = config.inputRange;
                    checkInfiniteRange('inputRange', inputRange);
                    checkValidInputRange(inputRange);

                    invariant(
                        inputRange.length === outputRange.length,
                        'inputRange (' + inputRange.length + ') and outputRange (' +
                        outputRange.length + ') must have the same length');


                    var easing = config.easing || linear;

                    var extrapolateLeft = 'extend';
                    if (config.extrapolateLeft !== undefined) {
                        extrapolateLeft = config.extrapolateLeft;
                    } else if (config.extrapolate !== undefined) {
                        extrapolateLeft = config.extrapolate;
                    }

                    var extrapolateRight = 'extend';
                    if (config.extrapolateRight !== undefined) {
                        extrapolateRight = config.extrapolateRight;
                    } else if (config.extrapolate !== undefined) {
                        extrapolateRight = config.extrapolate;
                    }

                    return function(input) {
                        invariant(
                            typeof input === 'number',
                            'Cannot interpolation an input which is not a number');


                        var range = findRange(input, inputRange);
                        return interpolate(
                            input,
                            inputRange[range],
                            inputRange[range + 1],
                            outputRange[range],
                            outputRange[range + 1],
                            easing,
                            extrapolateLeft,
                            extrapolateRight);

                    };
                }
            }]);
            return Interpolation;
        }();


        function interpolate(
            input,
            inputMin,
            inputMax,
            outputMin,
            outputMax,
            easing,
            extrapolateLeft,
            extrapolateRight) {
            var result = input;


            if (result < inputMin) {
                if (extrapolateLeft === 'identity') {
                    return result;
                } else if (extrapolateLeft === 'clamp') {
                    result = inputMin;
                } else if (extrapolateLeft === 'extend') {

                }
            }

            if (result > inputMax) {
                if (extrapolateRight === 'identity') {
                    return result;
                } else if (extrapolateRight === 'clamp') {
                    result = inputMax;
                } else if (extrapolateRight === 'extend') {

                }
            }

            if (outputMin === outputMax) {
                return outputMin;
            }

            if (inputMin === inputMax) {
                if (input <= inputMin) {
                    return outputMin;
                }
                return outputMax;
            }


            if (inputMin === -Infinity) {
                result = -result;
            } else if (inputMax === Infinity) {
                result = result - inputMin;
            } else {
                result = (result - inputMin) / (inputMax - inputMin);
            }


            result = easing(result);


            if (outputMin === -Infinity) {
                result = -result;
            } else if (outputMax === Infinity) {
                result = result + outputMin;
            } else {
                result = result * (outputMax - outputMin) + outputMin;
            }

            return result;
        }

        function colorToRgba(input) {
            var int32Color = normalizeColor(input);
            if (int32Color === null) {
                return input;
            }

            int32Color = int32Color || 0;

            var r = (int32Color & 0xff000000) >>> 24;
            var g = (int32Color & 0x00ff0000) >>> 16;
            var b = (int32Color & 0x0000ff00) >>> 8;
            var a = (int32Color & 0x000000ff) / 255;

            return 'rgba(' + r + ', ' + g + ', ' + b + ', ' + a + ')';
        }

        var stringShapeRegex = /[0-9\.-]+/g;



        function createInterpolationFromStringOutputRange(
            config) {
            var outputRange = config.outputRange;
            invariant(outputRange.length >= 2, 'Bad output range');
            outputRange = outputRange.map(colorToRgba);
            checkPattern(outputRange);



            var outputRanges = outputRange[0].match(stringShapeRegex).map(function() {
                return [];
            });
            outputRange.forEach(function(value) {



                value.match(stringShapeRegex).forEach(function(number, i) {
                    outputRanges[i].push(+number);
                });
            });



            var interpolations = outputRange[0].match(stringShapeRegex).map(function(value, i) {
                return Interpolation.create(_extends({},
                    config, {
                        outputRange: outputRanges[i]
                    }));

            });

            return function(input) {
                var i = 0;



                return outputRange[0].replace(stringShapeRegex, function() {
                    return String(interpolations[i++](input));
                });
            };
        }

        function checkPattern(arr) {
            var pattern = arr[0].replace(stringShapeRegex, '');
            for (var i = 1; i < arr.length; ++i) {
                invariant(
                    pattern === arr[i].replace(stringShapeRegex, ''),
                    'invalid pattern ' + arr[0] + ' and ' + arr[i]);

            }
        }

        function findRange(input, inputRange) {
            for (var i = 1; i < inputRange.length - 1; ++i) {
                if (inputRange[i] >= input) {
                    break;
                }
            }
            return i - 1;
        }

        function checkValidInputRange(arr) {
            invariant(arr.length >= 2, 'inputRange must have at least 2 elements');
            for (var i = 1; i < arr.length; ++i) {
                invariant(
                    arr[i] >= arr[i - 1],



                    'inputRange must be monotonically increasing ' + arr);

            }
        }

        function checkInfiniteRange(name, arr) {
            invariant(arr.length >= 2, name + ' must have at least 2 elements');
            invariant(
                arr.length !== 2 || arr[0] !== -Infinity || arr[1] !== Infinity,



                name + 'cannot be ]-infinity;+infinity[ ' + arr);

        }

        module.exports = Interpolation;

        /***/
    },
    /* 344 */
    /***/
    function(module, exports, __webpack_require__) {



        'use strict';



        var invariant = function invariant(condition, format, a, b, c, d, e, f) {
            if (false) {
                if (format === undefined) {
                    throw new Error('invariant requires an error message argument');
                }
            }

            if (!condition) {
                var error;
                if (format === undefined) {
                    error = new Error(
                        'Minified exception occurred; use the non-minified dev environment ' +
                        'for the full error message and additional helpful warnings.');

                } else {
                    var args = [a, b, c, d, e, f];
                    var argIndex = 0;
                    error = new Error(
                        format.replace(/%s/g, function() {
                            return args[argIndex++];
                        }));

                    error.name = 'Invariant Violation';
                }

                error.framesToPop = 1;
                throw error;
            }
        };

        module.exports = invariant;

        /***/
    },
    /* 345 */
    /***/
    function(module, exports) {



        'use strict';



        function tensionFromOrigamiValue(oValue) {
            return (oValue - 30) * 3.62 + 194;
        }

        function frictionFromOrigamiValue(oValue) {
            return (oValue - 8) * 3 + 25;
        }

        function fromOrigamiTensionAndFriction(
            tension,
            friction) {
            return {
                tension: tensionFromOrigamiValue(tension),
                friction: frictionFromOrigamiValue(friction)
            };

        }

        function fromBouncinessAndSpeed(
            bounciness,
            speed) {
            function normalize(value, startValue, endValue) {
                return (value - startValue) / (endValue - startValue);
            }

            function projectNormal(n, start, end) {
                return start + n * (end - start);
            }

            function linearInterpolation(t, start, end) {
                return t * end + (1 - t) * start;
            }

            function quadraticOutInterpolation(t, start, end) {
                return linearInterpolation(2 * t - t * t, start, end);
            }

            function b3Friction1(x) {
                return 0.0007 * Math.pow(x, 3) -
                    0.031 * Math.pow(x, 2) + 0.64 * x + 1.28;
            }

            function b3Friction2(x) {
                return 0.000044 * Math.pow(x, 3) -
                    0.006 * Math.pow(x, 2) + 0.36 * x + 2;
            }

            function b3Friction3(x) {
                return 0.00000045 * Math.pow(x, 3) -
                    0.000332 * Math.pow(x, 2) + 0.1078 * x + 5.84;
            }

            function b3Nobounce(tension) {
                if (tension <= 18) {
                    return b3Friction1(tension);
                } else if (tension > 18 && tension <= 44) {
                    return b3Friction2(tension);
                } else {
                    return b3Friction3(tension);
                }
            }

            var b = normalize(bounciness / 1.7, 0, 20);
            b = projectNormal(b, 0, 0.8);
            var s = normalize(speed / 1.7, 0, 20);
            var bouncyTension = projectNormal(s, 0.5, 200);
            var bouncyFriction = quadraticOutInterpolation(
                b,
                b3Nobounce(bouncyTension),
                0.01);


            return {
                tension: tensionFromOrigamiValue(bouncyTension),
                friction: frictionFromOrigamiValue(bouncyFriction)
            };

        }

        module.exports = {
            fromOrigamiTensionAndFriction: fromOrigamiTensionAndFriction,
            fromBouncinessAndSpeed: fromBouncinessAndSpeed
        };

        /***/
    },
    /* 346 */
    /***/
    function(module, exports, __webpack_require__) {

        /* WEBPACK VAR INJECTION */
        (function(global) {



            module.exports = global.Set = __webpack_require__(347);
            /* WEBPACK VAR INJECTION */
        }.call(exports, (function() {
            return this;
        }())))

        /***/
    },
    /* 347 */
    /***/
    function(module, exports, __webpack_require__) {

        __webpack_require__(236);
        __webpack_require__(256);
        __webpack_require__(282);
        __webpack_require__(348);
        module.exports = __webpack_require__(255).Set;

        /***/
    },
    /* 348 */
    /***/
    function(module, exports, __webpack_require__) {

        'use strict';
        var strong = __webpack_require__(287);


        module.exports = __webpack_require__(296)('Set', function(get) {
                return function Set() {
                    return get(this, arguments.length > 0 ? arguments[0] : undefined);
                };
            }, {

                add: function add(value) {
                    return strong.def(this, value = value === 0 ? 0 : value, value);
                }
            },
            strong);

        /***/
    },
    /* 349 */
    /***/
    function(module, exports, __webpack_require__) {

        var _extends = Object.assign || function(target) {
            for (var i = 1; i < arguments.length; i++) {
                var source = arguments[i];
                for (var key in source) {
                    if (Object.prototype.hasOwnProperty.call(source, key)) {
                        target[key] = source[key];
                    }
                }
            }
            return target;
        };



        var React = __webpack_require__(10);
        var View = __webpack_require__(27);
        var PropTypes = React.PropTypes;
        var Animated = __webpack_require__(337);
        var StyleSheet = __webpack_require__(39);
        var Dimensions = __webpack_require__(52);
        var deviceSize = Dimensions.get('window');
        var PanResponder = __webpack_require__(195);
        var NativeMethodsMixin = __webpack_require__(54);
        var VIEWPAGER_REF = 'viewpager';



        var ViewPager = React.createClass({
            displayName: 'ViewPager',
            propTypes: {



                initialPage: PropTypes.number,



                onPageScroll: PropTypes.func,



                onPageSelected: PropTypes.func,



                keyboardDismissMode: PropTypes.oneOf([
                    'none',
                    'on-drag'
                ])
            },


            mixins: [NativeMethodsMixin],
            getDefaultProps: function getDefaultProps() {
                return {
                    initialPage: 0
                };

            },
            getInitialState: function getInitialState() {
                return {
                    selectedPage: this.props.initialPage,
                    pageWidth: deviceSize.width,
                    pageCount: this.props.children.length,
                    offsetLeft: new Animated.Value(0)
                };

            },
            componentWillMount: function componentWillMount() {
                this._panResponder = PanResponder.create({
                    onStartShouldSetResponder: function onStartShouldSetResponder() {
                        return true;
                    },
                    onMoveShouldSetPanResponder: this._shouldSetPanResponder,
                    onPanResponderGrant: function onPanResponderGrant() {},
                    onPanResponderMove: this._panResponderMove,
                    onPanResponderTerminationRequest: function onPanResponderTerminationRequest() {
                        return true;
                    },
                    onPanResponderRelease: this._panResponderRelease,
                    onPanResponderTerminate: function onPanResponderTerminate() {}
                });

            },
            componentDidMount: function componentDidMount() {
                this.setPage(this.state.selectedPage);
            },
            getInnerViewNode: function getInnerViewNode() {
                return this.refs[VIEWPAGER_REF].childNodes[0];
            },
            _childrenWithOverridenStyle: function _childrenWithOverridenStyle() {
                return React.Children.map(this.props.children, function(child) {
                    var style = StyleSheet.fix([child.props.style, {
                        width: deviceSize.width
                    }]);

                    return React.cloneElement(child, _extends({}, child.props, {
                        style: style,
                        collapsable: false
                    }));
                });
            },
            render: function render() {
                var children = this._childrenWithOverridenStyle();
                var _state =



                    this.state,
                    offsetLeft = _state.offsetLeft,
                    pageWidth = _state.pageWidth,
                    pageCount = _state.pageCount;
                var width = pageWidth * pageCount;
                var count = pageCount - 1;

                var translateX = offsetLeft.interpolate({
                    inputRange: [0, count],
                    outputRange: [0, -(pageWidth * count)],
                    extrapolate: 'clamp'
                });


                return (
                    (this && this.createElement || React.createElement)(View, _extends({
                                ref: VIEWPAGER_REF,
                                style: this.props.style
                            },
                            this._panResponder.panHandlers),

                        (this && this.createElement || React.createElement)(Animated.View, {
                                style: {
                                    width: width,
                                    position: 'absolute',
                                    top: 0,
                                    left: translateX,
                                    bottom: 0,
                                    flexDirection: 'row'
                                }
                            },



                            children)));



            },
            _onPageScroll: function _onPageScroll(event) {
                if (this.props.onPageScroll) {
                    this.props.onPageScroll(event);
                }
                if (this.props.keyboardDismissMode === 'on-drag') {
                    dismissKeyboard();
                }
            },
            _shouldSetPanResponder: function _shouldSetPanResponder() {
                var _this = this;
                if (this._scrolling) {
                    this.state.offsetLeft.stopAnimation(function() {
                        _this._scrolling = false;
                    });
                    return false;
                }

                return true;
            },
            _panResponderMove: function _panResponderMove(ev, _ref) {
                var dx = _ref.dx;
                var val = this.state.selectedPage + dx / this.state.pageWidth * -1;
                this.state.offsetLeft.setValue(val);
            },
            _panResponderRelease: function _panResponderRelease(ev, _ref2) {
                var dx = _ref2.dx;
                var _state2 =



                    this.state,
                    selectedPage = _state2.selectedPage,
                    pageWidth = _state2.pageWidth;
                var range = Math.abs(dx) / pageWidth;
                var threshold = 1 / 5;

                if (range > threshold) {
                    if (dx > 0) {
                        selectedPage -= 1;
                    } else {
                        selectedPage += 1;
                    }
                }
                this.setPage(selectedPage);
            },
            setPage: function setPage(index) {
                var _this2 = this;
                if (index < 0) {
                    index = 0;
                } else if (index >= this.state.pageCount) {
                    index = this.state.pageCount - 1;
                }

                this._scrolling = true;

                Animated.spring(this.state.offsetLeft, {
                    toValue: index,
                    bounciness: 0,
                    restSpeedThreshold: 1
                }).
                start(function() {

                    _this2._onPageScroll({
                        nativeEvent: {
                            position: index,
                            offset: 0
                        }
                    });



                    _this2._scrolling = false;

                    _this2.setState({
                            selectedPage: index
                        },
                        function() {
                            _this2.props.onPageSelected && _this2.props.onPageSelected({
                                nativeEvent: {
                                    position: index
                                }
                            });


                        });
                });
            }
        });


        module.exports = ViewPager;

        /***/
    },
    /* 350 */
    /***/
    function(module, exports, __webpack_require__) {

        /* WEBPACK VAR INJECTION */
        (function(global) {
            var _extends = Object.assign || function(target) {
                for (var i = 1; i < arguments.length; i++) {
                    var source = arguments[i];
                    for (var key in source) {
                        if (Object.prototype.hasOwnProperty.call(source, key)) {
                            target[key] = source[key];
                        }
                    }
                }
                return target;
            };
            var _createClass = function() {
                function defineProperties(target, props) {
                    for (var i = 0; i < props.length; i++) {
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || false;
                        descriptor.configurable = true;
                        if ("value" in descriptor) descriptor.writable = true;
                        Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }
                return function(Constructor, protoProps, staticProps) {
                    if (protoProps) defineProperties(Constructor.prototype, protoProps);
                    if (staticProps) defineProperties(Constructor, staticProps);
                    return Constructor;
                };
            }();

            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                    throw new TypeError("Cannot call a class as a function");
                }
            }

            function _possibleConstructorReturn(self, call) {
                if (!self) {
                    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                }
                return call && (typeof call === "object" || typeof call === "function") ? call : self;
            }

            function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, {
                    constructor: {
                        value: subClass,
                        enumerable: false,
                        writable: true,
                        configurable: true
                    }
                });
                if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
            }



            var React = __webpack_require__(10);
            var ReactDOM = __webpack_require__(10);
            var StyleSheet = __webpack_require__(39);
            var View = __webpack_require__(27);
            var
                Component = React.Component,
                PropTypes = React.PropTypes;
            var fetch = __webpack_require__(351);
            var WebViewState = {
                IDLE: 'IDLE',
                LOADING: 'LOADING',
                ERROR: 'ERROR'
            };



            function contentToURL(content) {
                var url;
                var blob = new Blob([content], {
                    type: 'text/html'
                });
                var URL = global.URL || global.webkitURL;
                if (!URL) {
                    this._error(new Error('当前浏览器不支持 WebView'));
                }
                url = URL.createObjectURL(blob);
                return url;
            }


            var defaultProps = {
                automaticallyAdjustContentInsets: true,
                decelerationRate: 0.998,
                contentInset: {
                    top: 0,
                    left: 0,
                    bottom: 0,
                    right: 0
                },
                mediaPlaybackRequiresUserAction: true,
                javaScriptEnabled: true,
                bounces: true,
                scrollEnabled: true
            };
            var



                WebView = function(_Component) {
                _inherits(WebView, _Component);

                function WebView(props) {
                    _classCallCheck(this, WebView);
                    var _this = _possibleConstructorReturn(this, (WebView.__proto__ || Object.getPrototypeOf(WebView)).call(this,
                        props));
                    _this.state = {
                        viewState: WebViewState.IDLE,
                        startInLoadingState: true,
                        src: '',
                        sandbox: ''
                    };
                    return _this;

                }
                _createClass(WebView, [{
                    key: 'componentWillMount',
                    value: function componentWillMount()

                    {
                        if (this.props.startInLoadingState) {
                            this.setState({
                                viewState: WebViewState.LOADING
                            });
                        }
                        this._updateState(this.props);
                    }
                }, {
                    key: 'componentDidMount',
                    value: function componentDidMount() {
                        this.bindEventForIframe();
                    }
                }, {
                    key: 'componentWillReceiveProps',
                    value: function componentWillReceiveProps(
                        nextProps) {
                        this._updateState(nextProps);
                    }
                }, {
                    key: 'componentDidUpdate',
                    value: function componentDidUpdate() {
                        this.bindEventForIframe();
                    }
                }, {
                    key: '_updateState',
                    value: function _updateState(
                        props) {
                        var _this2 = this;
                        if (props.javaScriptEnabled === false) {

                            var sandbox = ['allow-forms', 'allow-modals', 'allow-orientation-lock', 'allow-pointer-lock', 'allow-popups',
                                'allow-popups-to-escape-sandbox', 'allow-same-origin', 'allow-top-navigation'
                            ].join(' ');
                            this.setState({
                                sandbox: sandbox
                            });
                        }
                        var source = props.source;
                        if (source && source.uri && (!source.method || source.method.toUpperCase() === 'GET') && !source.headers) {
                            this.setState({
                                src: source.uri
                            });
                        } else if (source && source.html) {
                            this.setState({
                                src: contentToURL(source.html)
                            });
                        } else if (source.method && source.method.toUpperCase() !== 'GET' || source.headers) {
                            fetch(source.uri, {
                                method: source.method || 'GET',
                                headers: source.headers || {},
                                body: source.body
                            }).
                            then(function(res) {
                                return res.text();
                            }).then(function(text) {
                                _this2.setState({
                                    src: contentToURL(text)
                                });
                            }).catch(function() {
                                _this2._error();
                            });
                        }
                    }
                }, {
                    key: '_error',
                    value: function _error() {
                        this.props.onLoadStart && this.props.onLoadStart();
                        this.props.onError && this.props.onError();
                        this.props.onLoadEnd && this.props.onLoadEnd();
                    }
                }, {
                    key: 'bindEventForIframe',
                    value: function bindEventForIframe() {
                        var _this3 = this;
                        var iframe = ReactDOM.findDOMNode(this.iframe);
                        if (!iframe) {
                            return;
                        }
                        this.props.onLoadStart && this.props.onLoadStart();
                        iframe.onload = function(event) {
                            _this3.injectContentBeforeLoaded();
                            _this3.props.onLoad && _this3.props.onLoad(event);
                            _this3.props.onLoadEnd && _this3.props.onLoadEnd(event);
                            _this3.setState({
                                viewState: WebViewState.IDLE
                            });

                        };
                        iframe.onerror = function(event) {
                            _this3.props.onError && _this3.props.onError(event);
                            _this3.props.onLoadEnd && _this3.props.onLoadEnd(event);
                            _this3.setState({
                                viewState: WebViewState.ERROR
                            });

                        };
                    }
                }, {
                    key: 'injectContentBeforeLoaded',
                    value: function injectContentBeforeLoaded() {
                        var iframe = ReactDOM.findDOMNode(this.iframe);
                        var props = this.props;
                        if (props.source.baseUrl) {
                            var base = document.createElement('base');
                            base.setAttribute('href', props.source.baseUrl);
                            try {
                                iframe.contentWindow.document.head.appendChild(base);
                            } catch (e) {}
                        }
                        if (props.injectedJavaScript) {
                            var script = document.createElement('script');
                            script.innerHTML = props.injectedJavaScript;
                            try {
                                iframe.contentWindow.document.body.appendChild(script);
                            } catch (e) {}
                        }
                    }
                }, {
                    key: 'reload',
                    value: function reload()

                    {
                        var iframe = ReactDOM.findDOMNode(this.iframe);
                        try {
                            iframe.contentWindow.location.refresh();
                        } catch (e) {
                            var src = iframe.src;
                            iframe.src = '';
                            iframe.src = src;
                        }
                    }
                }, {
                    key: 'render',
                    value: function render() {
                        var _this4 = this;
                        var otherView;
                        if (this.state.viewState === WebViewState.LOADING) {
                            otherView = this.props.renderLoading && this.props.renderLoading();
                        } else if (this.state.viewState === WebViewState.ERROR) {
                            otherView = this.props.renderError && this.props.renderError();
                        }
                        var iframeProps = {
                            src: this.state.src,
                            style: _extends({}, styles.webView, this.props.style)
                        };

                        if (this.state.sandbox) {
                            iframeProps.sandbox = this.state.sandbox;
                        }

                        return (
                            (this && this.createElement || React.createElement)(View, {
                                    style: styles.container
                                },


                                this.state.src ?

                                (this && this.createElement || React.createElement)(View, {
                                        style: [styles.container,
                                            this.state.viewState !== WebViewState.IDLE && {
                                                display: 'none'
                                            }
                                        ]
                                    },


                                    (this && this.createElement || React.createElement)('iframe', _extends({},
                                        iframeProps, {
                                            ref: function ref(_ref) {
                                                _this4.iframe = _ref;
                                            }
                                        }))) :



                                null,

                                otherView));


                    }
                }]);
                return WebView;
            }(Component);



            var styles = StyleSheet.create({
                container: {
                    flex: 1
                },

                errorContainer: {
                    flex: 1,
                    justifyContent: 'center',
                    alignItems: 'center'
                },

                errorText: {
                    fontSize: 14,
                    textAlign: 'center',
                    marginBottom: 2
                },

                errorTextTitle: {
                    fontSize: 15,
                    fontWeight: '500',
                    marginBottom: 10
                },

                hidden: {
                    height: 0,
                    flex: 0
                },

                loadingView: {
                    flex: 1,
                    justifyContent: 'center',
                    alignItems: 'center',
                    height: 100
                },

                webView: {
                    flex: 1,
                    backgroundColor: '#ffffff',
                    border: 0
                }
            });



            WebView.defaultProps = defaultProps;
            WebView.propTypes = _extends({},
                View.propTypes, {
                    html: function html() {
                        return Error('`html` props has deprecated, Use the `source` prop instead.');
                    },

                    url: function url() {
                        return Error('`url` props has deprecated, Use the `source` prop instead.');
                    },



                    source: PropTypes.oneOfType([
                        PropTypes.shape({



                            uri: PropTypes.string,



                            method: PropTypes.string,



                            headers: PropTypes.object,



                            body: PropTypes.string
                        }),

                        PropTypes.shape({



                            html: PropTypes.string,



                            baseUrl: PropTypes.string
                        }),



                        PropTypes.number
                    ]),



                    renderError: PropTypes.func,



                    renderLoading: PropTypes.func,



                    onLoad: PropTypes.func,



                    onLoadEnd: PropTypes.func,



                    onLoadStart: PropTypes.func,



                    onError: PropTypes.func,

                    bounces: PropTypes.bool,



                    decelerationRate: 0.998,



                    scrollEnabled: PropTypes.bool,



                    automaticallyAdjustContentInsets: PropTypes.bool,



                    contentInset: PropTypes.object,

                    onNavigationStateChange: PropTypes.func,



                    startInLoadingState: PropTypes.bool,



                    style: View.propTypes.style,



                    javaScriptEnabled: PropTypes.bool,



                    domStorageEnabled: PropTypes.bool,



                    injectedJavaScript: PropTypes.string,



                    userAgent: PropTypes.string,



                    scalesPageToFit: PropTypes.bool,



                    onShouldStartLoadWithRequest: PropTypes.func,



                    allowsInlineMediaPlayback: PropTypes.bool,



                    mediaPlaybackRequiresUserAction: PropTypes.bool
                });


            module.exports = WebView;
            /* WEBPACK VAR INJECTION */
        }.call(exports, (function() {
            return this;
        }())))

        /***/
    },
    /* 351 */
    /***/
    function(module, exports, __webpack_require__) {

        /* WEBPACK VAR INJECTION */
        (function(global) {


            'use strict';

            var _ReactPromise = __webpack_require__(2);
            var _ReactPromise2 = _interopRequireDefault(_ReactPromise);

            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {
                    default: obj
                };
            }



            (function(self) {
                'use strict';

                var support = {
                    searchParams: 'URLSearchParams' in self,
                    iterable: 'Symbol' in self && 'iterator' in Symbol,
                    blob: 'FileReader' in self && 'Blob' in self && function() {
                        try {
                            new Blob();
                            return true;
                        } catch (e) {
                            return false;
                        }
                    }(),
                    formData: 'FormData' in self,
                    arrayBuffer: 'ArrayBuffer' in self
                };


                function normalizeName(name) {
                    if (typeof name !== 'string') {
                        name = String(name);
                    }
                    if (/[^a-z0-9\-#$%&'*+.\^_`|~]/i.test(name)) {
                        throw new TypeError('Invalid character in header field name');
                    }
                    return name.toLowerCase();
                }

                function normalizeValue(value) {
                    if (typeof value !== 'string') {
                        value = String(value);
                    }
                    return value;
                }


                function iteratorFor(items) {
                    var iterator = {
                        next: function next() {
                            var value = items.shift();
                            return {
                                done: value === undefined,
                                value: value
                            };
                        }
                    };


                    if (support.iterable) {
                        iterator[typeof Symbol === 'function' ? Symbol.iterator : '@@iterator'] = function() {
                            return iterator;
                        };
                    }

                    return iterator;
                }

                function Headers(headers) {
                    this.map = {};

                    if (headers instanceof Headers) {
                        headers.forEach(function(value, name) {
                            this.append(name, value);
                        }, this);

                    } else if (headers) {
                        Object.getOwnPropertyNames(headers).forEach(function(name) {
                            this.append(name, headers[name]);
                        }, this);
                    }
                }

                Headers.prototype.append = function(name, value) {
                    name = normalizeName(name);
                    value = normalizeValue(value);
                    var list = this.map[name];
                    if (!list) {
                        list = [];
                        this.map[name] = list;
                    }
                    list.push(value);
                };

                Headers.prototype['delete'] = function(name) {
                    delete this.map[normalizeName(name)];
                };

                Headers.prototype.get = function(name) {
                    var values = this.map[normalizeName(name)];
                    return values ? values[0] : null;
                };

                Headers.prototype.getAll = function(name) {
                    return this.map[normalizeName(name)] || [];
                };

                Headers.prototype.has = function(name) {
                    return this.map.hasOwnProperty(normalizeName(name));
                };

                Headers.prototype.set = function(name, value) {
                    this.map[normalizeName(name)] = [normalizeValue(value)];
                };

                Headers.prototype.forEach = function(callback, thisArg) {
                    Object.getOwnPropertyNames(this.map).forEach(function(name) {
                        this.map[name].forEach(function(value) {
                            callback.call(thisArg, value, name, this);
                        }, this);
                    }, this);
                };

                Headers.prototype.keys = function() {
                    var items = [];
                    this.forEach(function(value, name) {
                        items.push(name);
                    });
                    return iteratorFor(items);
                };

                Headers.prototype.values = function() {
                    var items = [];
                    this.forEach(function(value) {
                        items.push(value);
                    });
                    return iteratorFor(items);
                };

                Headers.prototype.entries = function() {
                    var items = [];
                    this.forEach(function(value, name) {
                        items.push([name, value]);
                    });
                    return iteratorFor(items);
                };

                if (support.iterable) {
                    Headers.prototype[typeof Symbol === 'function' ? Symbol.iterator : '@@iterator'] = Headers.prototype.entries;
                }

                function consumed(body) {
                    if (body.bodyUsed) {
                        return _ReactPromise2.default.reject(new TypeError('Already read'));
                    }
                    body.bodyUsed = true;
                }

                function fileReaderReady(reader) {
                    return new _ReactPromise2.default(function(resolve, reject) {
                        reader.onload = function() {
                            resolve(reader.result);
                        };
                        reader.onerror = function() {
                            reject(reader.error);
                        };
                    });
                }

                function readBlobAsArrayBuffer(blob) {
                    var reader = new FileReader();
                    reader.readAsArrayBuffer(blob);
                    return fileReaderReady(reader);
                }

                function readBlobAsText(blob) {
                    var reader = new FileReader();
                    reader.readAsText(blob);
                    return fileReaderReady(reader);
                }

                function Body() {
                    this.bodyUsed = false;

                    this._initBody = function(body) {
                        this._bodyInit = body;
                        if (typeof body === 'string') {
                            this._bodyText = body;
                        } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
                            this._bodyBlob = body;
                        } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {
                            this._bodyFormData = body;
                        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
                            this._bodyText = body.toString();
                        } else if (!body) {
                            this._bodyText = '';
                        } else if (support.arrayBuffer && ArrayBuffer.prototype.isPrototypeOf(body)) {


                        } else {
                            throw new Error('unsupported BodyInit type');
                        }

                        if (!this.headers.get('content-type')) {
                            if (typeof body === 'string') {
                                this.headers.set('content-type', 'text/plain;charset=UTF-8');
                            } else if (this._bodyBlob && this._bodyBlob.type) {
                                this.headers.set('content-type', this._bodyBlob.type);
                            } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
                                this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');
                            }
                        }
                    };

                    if (support.blob) {
                        this.blob = function() {
                            var rejected = consumed(this);
                            if (rejected) {
                                return rejected;
                            }

                            if (this._bodyBlob) {
                                return _ReactPromise2.default.resolve(this._bodyBlob);
                            } else if (this._bodyFormData) {
                                throw new Error('could not read FormData body as blob');
                            } else {
                                return _ReactPromise2.default.resolve(new Blob([this._bodyText]));
                            }
                        };

                        this.arrayBuffer = function() {
                            return this.blob().then(readBlobAsArrayBuffer);
                        };

                        this.text = function() {
                            var rejected = consumed(this);
                            if (rejected) {
                                return rejected;
                            }

                            if (this._bodyBlob) {
                                return readBlobAsText(this._bodyBlob);
                            } else if (this._bodyFormData) {
                                throw new Error('could not read FormData body as text');
                            } else {
                                return _ReactPromise2.default.resolve(this._bodyText);
                            }
                        };
                    } else {
                        this.text = function() {
                            var rejected = consumed(this);
                            return rejected ? rejected : _ReactPromise2.default.resolve(this._bodyText);
                        };
                    }

                    if (support.formData) {
                        this.formData = function() {
                            return this.text().then(decode);
                        };
                    }

                    this.json = function() {
                        return this.text().then(JSON.parse);
                    };

                    return this;
                }


                var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT'];

                function normalizeMethod(method) {
                    var upcased = method.toUpperCase();
                    return methods.indexOf(upcased) > -1 ? upcased : method;
                }

                function Request(input, options) {
                    options = options || {};
                    var body = options.body;
                    if (Request.prototype.isPrototypeOf(input)) {
                        if (input.bodyUsed) {
                            throw new TypeError('Already read');
                        }
                        this.url = input.url;
                        this.credentials = input.credentials;
                        if (!options.headers) {
                            this.headers = new Headers(input.headers);
                        }
                        this.method = input.method;
                        this.mode = input.mode;
                        if (!body) {
                            body = input._bodyInit;
                            input.bodyUsed = true;
                        }
                    } else {
                        this.url = input;
                    }

                    this.credentials = options.credentials || this.credentials || 'omit';
                    if (options.headers || !this.headers) {
                        this.headers = new Headers(options.headers);
                    }
                    this.method = normalizeMethod(options.method || this.method || 'GET');
                    this.mode = options.mode || this.mode || null;
                    this.referrer = null;

                    if ((this.method === 'GET' || this.method === 'HEAD') && body) {
                        throw new TypeError('Body not allowed for GET or HEAD requests');
                    }
                    this._initBody(body);
                }

                Request.prototype.clone = function() {
                    return new Request(this);
                };

                function decode(body) {
                    var form = new FormData();
                    body.trim().split('&').forEach(function(bytes) {
                        if (bytes) {
                            var split = bytes.split('=');
                            var name = split.shift().replace(/\+/g, ' ');
                            var value = split.join('=').replace(/\+/g, ' ');
                            form.append(decodeURIComponent(name), decodeURIComponent(value));
                        }
                    });
                    return form;
                }

                function headers(xhr) {
                    var head = new Headers();
                    var pairs = (xhr.getAllResponseHeaders() || '').trim().split('\n');
                    pairs.forEach(function(header) {
                        var split = header.trim().split(':');
                        var key = split.shift().trim();
                        var value = split.join(':').trim();
                        head.append(key, value);
                    });
                    return head;
                }

                Body.call(Request.prototype);

                function Response(bodyInit, options) {
                    if (!options) {
                        options = {};
                    }

                    this.type = 'default';
                    this.status = options.status;
                    this.ok = this.status >= 200 && this.status < 300;
                    this.statusText = options.statusText;
                    this.headers = options.headers instanceof Headers ? options.headers : new Headers(options.headers);
                    this.url = options.url || '';
                    this._initBody(bodyInit);
                }

                Body.call(Response.prototype);

                Response.prototype.clone = function() {
                    return new Response(this._bodyInit, {
                        status: this.status,
                        statusText: this.statusText,
                        headers: new Headers(this.headers),
                        url: this.url
                    });

                };

                Response.error = function() {
                    var response = new Response(null, {
                        status: 0,
                        statusText: ''
                    });
                    response.type = 'error';
                    return response;
                };

                var redirectStatuses = [301, 302, 303, 307, 308];

                Response.redirect = function(url, status) {
                    if (redirectStatuses.indexOf(status) === -1) {
                        throw new RangeError('Invalid status code');
                    }

                    return new Response(null, {
                        status: status,
                        headers: {
                            location: url
                        }
                    });
                };

                function fetch(input, init) {
                    return new _ReactPromise2.default(function(resolve, reject) {
                        var request;
                        if (Request.prototype.isPrototypeOf(input) && !init) {
                            request = input;
                        } else {
                            request = new Request(input, init);
                        }

                        var xhr = new XMLHttpRequest();

                        function responseURL() {
                            if ('responseURL' in xhr) {
                                return xhr.responseURL;
                            }


                            if (/^X-Request-URL:/mi.test(xhr.getAllResponseHeaders())) {
                                return xhr.getResponseHeader('X-Request-URL');
                            }

                            return;
                        }

                        xhr.onload = function() {
                            var options = {
                                status: xhr.status,
                                statusText: xhr.statusText,
                                headers: headers(xhr),
                                url: responseURL()
                            };

                            var body = 'response' in xhr ? xhr.response : xhr.responseText;
                            resolve(new Response(body, options));
                        };

                        xhr.onerror = function() {
                            reject(new TypeError('Network request failed'));
                        };

                        xhr.ontimeout = function() {
                            reject(new TypeError('Network request failed'));
                        };

                        xhr.open(request.method, request.url, true);

                        if (request.credentials === 'include') {
                            xhr.withCredentials = true;
                        }

                        if ('responseType' in xhr && support.blob) {
                            xhr.responseType = 'blob';
                        }

                        request.headers.forEach(function(value, name) {
                            xhr.setRequestHeader(name, value);
                        });

                        xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit);
                    });
                }

                if (!self.Headers || !self.Headers.prototype.forEach) {
                    self.Headers = Headers;
                    self.Request = Request;
                    self.Response = Response;
                }

                self.fetch = self.fetch || fetch;

                self.fetch.polyfill = {
                    fetch: fetch,
                    Headers: Headers,
                    Request: Request,
                    Response: Response
                };

            })(global);

            module.exports = global.fetch;
            /* WEBPACK VAR INJECTION */
        }.call(exports, (function() {
            return this;
        }())))

        /***/
    },
    /* 352 */
    /***/
    function(module, exports, __webpack_require__) {

        var _extends = Object.assign || function(target) {
            for (var i = 1; i < arguments.length; i++) {
                var source = arguments[i];
                for (var key in source) {
                    if (Object.prototype.hasOwnProperty.call(source, key)) {
                        target[key] = source[key];
                    }
                }
            }
            return target;
        };
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor;
            };
        }();



        var _react = __webpack_require__(10);
        var _react2 = _interopRequireDefault(_react);
        var _View = __webpack_require__(27);
        var _View2 = _interopRequireDefault(_View);
        var _Text = __webpack_require__(67);
        var _Text2 = _interopRequireDefault(_Text);
        var _TouchableWithoutFeedback = __webpack_require__(187);
        var _TouchableWithoutFeedback2 = _interopRequireDefault(_TouchableWithoutFeedback);
        var _TouchableHighlight = __webpack_require__(185);
        var _TouchableHighlight2 = _interopRequireDefault(_TouchableHighlight);
        var _StyleSheet = __webpack_require__(39);
        var _StyleSheet2 = _interopRequireDefault(_StyleSheet);
        var _modalControl = __webpack_require__(84);
        var _modalControl2 = _interopRequireDefault(_modalControl);
        var _Animated = __webpack_require__(337);
        var _Animated2 = _interopRequireDefault(_Animated);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
            }
        }

        function _possibleConstructorReturn(self, call) {
            if (!self) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            }
            return call && (typeof call === "object" || typeof call === "function") ? call : self;
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
        }



        var styles = _StyleSheet2.default.create({
            mask: {
                flex: 1,
                position: 'relative',
                backgroundColor: 'rgba(0,0,0,0.3)'
            },

            actionSheetLayout: {
                position: 'absolute',
                left: 6,
                right: 6
            },


            actionSheetAction: {
                flexDirection: 'column',
                borderRadius: 4,
                overflow: 'hidden',
                backgroundColor: '#fff',
                marginTop: 8
            },

            actionSheetMenu: {
                flexDirection: 'column',
                borderRadius: 4,
                overflow: 'hidden',
                backgroundColor: '#fff'
            },

            actionSheetButton: {
                height: 38,
                flex: 1,
                justifyContent: 'center'
            },

            actionSheetButtonText: {
                color: '#212121',
                textAlign: 'center'
            },

            actionSheetButtonBorder: {
                borderBottomWidth: 1,
                borderStyle: 'solid',
                borderBottomColor: '#ccc'
            }
        });
        var



            ActionSheetView = function(_Component) {
            _inherits(ActionSheetView, _Component);

            function ActionSheetView(props) {
                _classCallCheck(this, ActionSheetView);
                var _this = _possibleConstructorReturn(this, (ActionSheetView.__proto__ || Object.getPrototypeOf(ActionSheetView)).call(this,
                    props));
                _this.state = {
                    distance: new _Animated2.default.Value(-200)
                };
                return _this;

            }
            _createClass(ActionSheetView, [{
                key: '_onClose',
                value: function _onClose(

                    index) {
                    var _this2 = this;
                    _Animated2.default.timing(
                        this.state.distance, {
                            toValue: -800,
                            duration: 300
                        }).

                    start(function() {
                        if (typeof index === 'number') {
                            _this2.props.callback(index);
                        }
                        _this2.props.onClose();
                    });

                }
            }, {
                key: 'componentDidMount',
                value: function componentDidMount()

                {
                    _Animated2.default.timing(
                        this.state.distance, {
                            toValue: 6,
                            duration: 300
                        }).

                    start();
                }
            }, {
                key: 'render',
                value: function render()



                {
                    var _this3 = this;
                    var _props =
                        this.props,
                        options = _props.options,
                        cancelButtonIndex = _props.cancelButtonIndex,
                        destructiveButtonIndex = _props.destructiveButtonIndex,
                        tintColor = _props.tintColor;
                    var menu = [],
                        actionMenu = {};
                    options.forEach(function(value, key) {
                        var item = {
                            text: value,
                            index: key
                        };

                        if (tintColor) {
                            item.style = {
                                color: tintColor
                            };
                        }
                        if (key === destructiveButtonIndex) {
                            item.style = {
                                color: 'red'
                            };

                        }
                        if (key === cancelButtonIndex) {
                            actionMenu = item;
                        } else {
                            menu.push(item);
                        }
                    });

                    var menuLength = menu.length;

                    return (
                        (this && this.createElement || _react2.default.createElement)(_TouchableWithoutFeedback2.default, {
                                onPress: this._onClose.bind(this)
                            },

                            (this && this.createElement || _react2.default.createElement)(_View2.default, {
                                    style: styles.mask,
                                    className: 'rn-modal-wrapper'
                                },
                                (this && this.createElement || _react2.default.createElement)(_Animated2.default.View, {
                                        style: [styles.actionSheetLayout, {
                                            bottom: this.state.distance
                                        }]
                                    },

                                    (this && this.createElement || _react2.default.createElement)(_View2.default, {
                                            style: [styles.actionSheetMenu]
                                        },


                                        menu.map(function(cell, index) {
                                            var _style = index < menuLength - 1 ? styles.actionSheetButtonBorder : {};
                                            return (
                                                (_this3 && _this3.createElement || _react2.default.createElement)(_TouchableHighlight2.default, {
                                                        style: [styles.actionSheetButton, _style],
                                                        underlayColor: '#f9f9f9',
                                                        onPress: _this3._onClose.bind(_this3, cell.index),
                                                        key: 'menu' + index
                                                    },

                                                    (_this3 && _this3.createElement || _react2.default.createElement)(_Text2.default, {
                                                        style: [styles.actionSheetButtonText, cell.style]
                                                    }, cell.text)));


                                        })),


                                    (this && this.createElement || _react2.default.createElement)(_View2.default, {
                                            style: [styles.actionSheetAction]
                                        },

                                        (this && this.createElement || _react2.default.createElement)(_TouchableHighlight2.default, {
                                                style: [styles.actionSheetButton],
                                                underlayColor: '#f9f9f9',
                                                onPress: this._onClose.bind(this, actionMenu.index),
                                                key: 'actionMenu'
                                            },

                                            (this && this.createElement || _react2.default.createElement)(_Text2.default, {
                                                style: [styles.actionSheetButtonText]
                                            }, actionMenu.text)))))));



                }
            }]);
            return ActionSheetView;
        }(_react.Component);



        var ActionSheet = {};



        ActionSheet.showActionSheetWithOptions = function(config, callback) {
            var gid = 'upper-' + _modalControl2.default.getGid();
            _modalControl2.default.mount(
                (this && this.createElement || _react2.default.createElement)(ActionSheetView, _extends({
                        tintColor: '#007AFF'
                    },
                    config || {}, {
                        key: gid,
                        callback: callback,
                        onClose: function onClose(event, cb) {
                            _modalControl2.default.destory(gid);
                        }
                    })));

        };



        ActionSheet.showShareActionSheetWithOptions = function(options, failureCallback, successCallback) {
            console.log('暂时不支持');
        };

        module.exports = ActionSheet;

        /***/
    },
    /* 353 */
    /***/
    function(module, exports) {



        var AppState = {
            addEventListener: function addEventListener(argument) {},
            removeEventListener: function removeEventListener(argument) {},
            currentState: 'active'
        };

        module.exports = AppState;

        /***/
    },
    /* 354 */
    /***/
    function(module, exports) {

        /* WEBPACK VAR INJECTION */
        (function(global) {
            var _createClass = function() {
                function defineProperties(target, props) {
                    for (var i = 0; i < props.length; i++) {
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || false;
                        descriptor.configurable = true;
                        if ("value" in descriptor) descriptor.writable = true;
                        Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }
                return function(Constructor, protoProps, staticProps) {
                    if (protoProps) defineProperties(Constructor.prototype, protoProps);
                    if (staticProps) defineProperties(Constructor, staticProps);
                    return Constructor;
                };
            }();
            var _extends = Object.assign || function(target) {
                for (var i = 1; i < arguments.length; i++) {
                    var source = arguments[i];
                    for (var key in source) {
                        if (Object.prototype.hasOwnProperty.call(source, key)) {
                            target[key] = source[key];
                        }
                    }
                }
                return target;
            };

            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                    throw new TypeError("Cannot call a class as a function");
                }
            }



            var mergeLocalStorageItem = function mergeLocalStorageItem(key, value) {
                var oldValue = global.localStorage.getItem(key);
                var oldObject = JSON.parse(oldValue);
                var newObject = JSON.parse(value);
                var nextValue = JSON.stringify(_extends({}, oldObject, newObject));
                global.localStorage.setItem(key, nextValue);
            };
            var



                AsyncStorage = function() {
                function AsyncStorage() {
                    _classCallCheck(this, AsyncStorage);
                }
                _createClass(AsyncStorage, null, [{
                    key: "clear",
                    value: function clear()



                    {
                        return new Promise(function(resolve, reject) {
                            try {
                                global.localStorage.clear();
                                resolve(null);
                            } catch (err) {
                                reject(err);
                            }
                        });
                    }
                }, {
                    key: "getAllKeys",
                    value: function getAllKeys()



                    {
                        return new Promise(function(resolve, reject) {
                            try {
                                var numberOfKeys = global.localStorage.length;
                                var keys = [];
                                for (var i = 0; i < numberOfKeys; i += 1) {
                                    var key = global.localStorage.key(i);
                                    keys.push(key);
                                }
                                resolve(keys);
                            } catch (err) {
                                reject(err);
                            }
                        });
                    }
                }, {
                    key: "getItem",
                    value: function getItem(



                        key) {
                        return new Promise(function(resolve, reject) {
                            try {
                                var value = global.localStorage.getItem(key);
                                resolve(value);
                            } catch (err) {
                                reject(err);
                            }
                        });
                    }
                }, {
                    key: "mergeItem",
                    value: function mergeItem(



                        key, value) {
                        return new Promise(function(resolve, reject) {
                            try {
                                mergeLocalStorageItem(key, value);
                                resolve(null);
                            } catch (err) {
                                reject(err);
                            }
                        });
                    }
                }, {
                    key: "multiGet",
                    value: function multiGet(



                        keys) {
                        var promises = keys.map(function(key) {
                            return AsyncStorage.getItem(key);
                        });

                        return Promise.all(promises).then(
                            function(result) {
                                return Promise.resolve(result.map(function(value, i) {
                                    return [keys[i], value];
                                }));
                            },
                            function(error) {
                                return Promise.reject(error);
                            });

                    }
                }, {
                    key: "multiMerge",
                    value: function multiMerge(



                        keyValuePairs) {
                        var promises = keyValuePairs.map(function(item) {
                            return AsyncStorage.mergeItem(item[0], item[1]);
                        });

                        return Promise.all(promises).then(
                            function() {
                                return Promise.resolve(null);
                            },
                            function(error) {
                                return Promise.reject(error);
                            });

                    }
                }, {
                    key: "multiRemove",
                    value: function multiRemove(



                        keys) {
                        var promises = keys.map(function(key) {
                            return AsyncStorage.removeItem(key);
                        });

                        return Promise.all(promises).then(
                            function() {
                                return Promise.resolve(null);
                            },
                            function(error) {
                                return Promise.reject(error);
                            });

                    }
                }, {
                    key: "multiSet",
                    value: function multiSet(



                        keyValuePairs) {
                        var promises = keyValuePairs.map(function(item) {
                            return AsyncStorage.setItem(item[0], item[1]);
                        });

                        return Promise.all(promises).then(
                            function() {
                                return Promise.resolve(null);
                            },
                            function(error) {
                                return Promise.reject(error);
                            });

                    }
                }, {
                    key: "removeItem",
                    value: function removeItem(



                        key) {
                        return new Promise(function(resolve, reject) {
                            try {
                                global.localStorage.removeItem(key);
                                resolve(null);
                            } catch (err) {
                                reject(err);
                            }
                        });
                    }
                }, {
                    key: "setItem",
                    value: function setItem(



                        key, value) {
                        return new Promise(function(resolve, reject) {
                            try {
                                global.localStorage.setItem(key, value);
                                resolve(null);
                            } catch (err) {
                                reject(err);
                            }
                        });
                    }
                }, {
                    key: "flushGetRequests",
                    value: function flushGetRequests()



                    {

                    }
                }]);
                return AsyncStorage;
            }();



            module.exports = AsyncStorage;
            /* WEBPACK VAR INJECTION */
        }.call(exports, (function() {
            return this;
        }())))

        /***/
    },
    /* 355 */
    /***/
    function(module, exports, __webpack_require__) {



        var ImagePicker = __webpack_require__(356);

        var e = {
            message: "暂不支持"
        };


        module.exports = {



            getPhotoGroups: function getPhotoGroups(successCallback, failCallback) {
                failCallback && failCallback({
                    message: '暂不支持'
                });

            },
            getPhotosFromGroup: function getPhotosFromGroup(albumId, getPhotosParamChecker, successCallback, failCallback) {
                failCallback && failCallback({
                    message: '暂不支持'
                });

            },



            takePhotoAndSave: function takePhotoAndSave(successCallback, failCallback) {
                ImagePicker.openCameraDialog({}, function(uri) {
                    var image = new Image();
                    image.src = uri;
                    image.onload = function() {
                        var photo = {
                            uri: uri,
                            width: image.width,
                            height: image.height
                        };

                        successCallback && successCallback(photo);
                    };
                }, failCallback);
            },
            savePhoto: function savePhoto(uri, successCallback, failCallback) {
                failCallback && failCallback({
                    message: '暂不支持'
                });

            },
            deletePhotoInMemory: function deletePhotoInMemory(uri, successCallback, failCallback) {
                failCallback && failCallback({
                    message: '暂不支持'
                });

            }
        };

        /***/
    },
    /* 356 */
    /***/
    function(module, exports, __webpack_require__) {



        var React = __webpack_require__(6);
        var ImageStore = __webpack_require__(357);

        var ImagePicker = {
            _input: null,
            _openSelectOrDialog: function _openSelectOrDialog(config, successCallback, cancelCallback) {
                var _this = this;
                if (!this._input) {
                    this._input = document.createElement('input');
                    this._input.setAttribute('type', 'file');
                    this._input.setAttribute('accept', 'image/*');
                    this._input.addEventListener('change', function(event) {
                        readBlobAsDataURL(event.target.files[0], function(data) {
                            ImageStore.addImageFromBase64(data, function(uri) {
                                successCallback && successCallback(uri);
                                ImageStore.removeImageForTag(uri);
                            }, cancelCallback);
                        });
                        _this._input = null;
                    });
                }
                this._input.click();
            },



            canRecordVideos: function canRecordVideos(callback) {
                callback && callback(false);
            },



            canUseCamera: function canUseCamera(callback) {
                callback && callback(true);
            },



            openCameraDialog: function openCameraDialog(config, successCallback, cancelCallback) {
                var that = this;
                QunarAPI.checkJsApi({
                    jsApiList: ['chooseImage'],
                    success: function success(res) {
                        if (res.chooseImage || res.checkResult && res.checkResult.chooseImage) {
                            QunarAPI.chooseImage({
                                sourceType: ['camera'],
                                success: function success(res) {
                                    successCallback && successCallback(res.localIds[0]);
                                },
                                fail: function fail(error) {
                                    error.message = error.errMsg || error.errmsg;
                                    cancelCallback && cancelCallback(error);
                                }
                            });

                        } else {
                            that._openSelectOrDialog(config, successCallback, cancelCallback);
                        }
                    }
                });

            },



            openSelectDialog: function openSelectDialog(config, successCallback, cancelCallback) {
                var that = this;
                QunarAPI.checkJsApi({
                    jsApiList: ['chooseImage'],
                    success: function success(res) {
                        if (res.chooseImage || res.checkResult && res.checkResult.chooseImage) {
                            QunarAPI.chooseImage({
                                sourceType: ['album'],
                                success: function success(res) {
                                    successCallback && successCallback(res.localIds);
                                },
                                fail: function fail(error) {
                                    error.message = error.errMsg || error.errmsg;
                                    cancelCallback && cancelCallback(error);
                                }
                            });

                        } else {
                            that._openSelectOrDialog(config, successCallback, cancelCallback);
                        }
                    }
                });

            }
        };


        function readBlobAsDataURL(blob, callback) {
            var reader = new FileReader();
            reader.onload = function(e) {
                callback(e.target.result);
                reader = null;
            };
            reader.readAsDataURL(blob);
        }


        module.exports = ImagePicker;

        /***/
    },
    /* 357 */
    /***/
    function(module, exports) {

        /* WEBPACK VAR INJECTION */
        (function(global) {



            var ImageStore = {
                _store: {},



                hasImageForTag: function hasImageForTag(uri, callback) {
                    callback && callback(this._store[uri] ? 1 : 0);
                },



                removeImageForTag: function removeImageForTag(uri) {
                    delete this._store[uri];
                },



                addImageFromBase64: function addImageFromBase64(base64ImageData, success, failure) {
                    try {
                        var imageBlob = dataURLtoBlob(base64ImageData);
                        if (imageBlob === false) return failure && failure('不支持');
                        var URL = global.URL || global.webkitURL;
                        var imgURL = URL.createObjectURL(imageBlob);
                        this._store[imgURL] = base64ImageData;
                        success && success(imgURL);
                    } catch (e) {
                        failure && failure(e);
                    }
                },



                getBase64ForTag: function getBase64ForTag(uri, success, failure) {
                    if (this._store[uri]) {
                        success && success(this._store[uri]);
                    } else {
                        failure && failure({
                            message: '没有相关数据'
                        });
                    }
                }
            };



            function dataURLtoBlob(dataurl) {
                var arr = dataurl.split(','),
                    mime = void 0,
                    data = void 0;
                if (arr.length > 1) {
                    mime = arr[0].match(/:(.*?);/)[1];
                    data = arr[1];
                } else {
                    mime = 'image/png';
                    data = arr[0];
                }
                var bstr = atob(data),
                    n = bstr.length,
                    u8arr = new Uint8Array(n);
                while (n--) {
                    u8arr[n] = bstr.charCodeAt(n);
                }
                var img = false;
                try {
                    img = new Blob([u8arr], {
                        type: mime
                    });
                } catch (e) {
                    global.BlobBuilder = global.BlobBuilder ||
                        global.WebKitBlobBuilder ||
                        global.MozBlobBuilder ||
                        global.MSBlobBuilder;
                    if (e.name == 'TypeError' && global.BlobBuilder) {
                        var bb = new BlobBuilder();
                        bb.append(u8arr.buffer);
                        img = bb.getBlob(mime);
                    } else if (e.name == "InvalidStateError") {

                        img = new Blob([u8arr.buffer], {
                            type: mime
                        });
                    }
                }
                return img;
            }

            module.exports = ImageStore;
            /* WEBPACK VAR INJECTION */
        }.call(exports, (function() {
            return this;
        }())))

        /***/
    },
    /* 358 */
    /***/
    function(module, exports, __webpack_require__) {



        var ReactPromise = __webpack_require__(2);



        var Clipboard = {
            __value: '',



            getString: function getString() {
                return new ReactPromise(function(resolve, reject) {
                    resolve(Clipboard.__value);
                });
            },



            setString: function setString(text) {
                if (document.queryCommandSupported && document.queryCommandSupported("copy")) {
                    var textarea = document.createElement("textarea");
                    textarea.textContent = text;
                    textarea.style.position = "fixed";
                    document.body.appendChild(textarea);
                    textarea.select();
                    try {
                        Clipboard.__value = text;
                        return document.execCommand("copy");
                    } catch (ex) {
                        __webpack_require__(359).show('复制失败');
                        console.warn("Copy to clipboard failed.", ex);
                        return false;
                    } finally {
                        document.body.removeChild(textarea);
                    }
                } else {
                    __webpack_require__(359).show('复制失败');
                    return false;
                }
            }
        };


        module.exports = Clipboard;

        /***/
    },
    /* 359 */
    /***/
    function(module, exports, __webpack_require__) {



        'use strict';
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor;
            };
        }();


        var _react = __webpack_require__(10);
        var _react2 = _interopRequireDefault(_react);
        var _View = __webpack_require__(27);
        var _View2 = _interopRequireDefault(_View);
        var _StyleSheet = __webpack_require__(39);
        var _StyleSheet2 = _interopRequireDefault(_StyleSheet);
        var _Text = __webpack_require__(67);
        var _Text2 = _interopRequireDefault(_Text);
        var _modalControl = __webpack_require__(84);
        var _modalControl2 = _interopRequireDefault(_modalControl);
        var _Dimensions = __webpack_require__(52);
        var _Dimensions2 = _interopRequireDefault(_Dimensions);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
            }
        }

        function _possibleConstructorReturn(self, call) {
            if (!self) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            }
            return call && (typeof call === "object" || typeof call === "function") ? call : self;
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
        }
        var height = _Dimensions2.default.get('window').height;
        var



            ToastView = function(_Component) {
            _inherits(ToastView, _Component);

            function ToastView(props) {
                _classCallCheck(this, ToastView);
                return _possibleConstructorReturn(this, (ToastView.__proto__ || Object.getPrototypeOf(ToastView)).call(this,
                    props));
            }
            _createClass(ToastView, [{
                key: 'render',
                value: function render()

                {
                    var props = this.props;
                    this.timer && clearTimeout(this.timer);
                    this.timer = setTimeout(function() {
                        props.onClose && props.onClose();
                    }, props.duration || 2000);
                    return (
                        (this && this.createElement || _react2.default.createElement)(_View2.default, {
                                style: styles.toolTipPannel
                            },
                            (this && this.createElement || _react2.default.createElement)(_View2.default, {
                                    style: styles.toolTip
                                },
                                (this && this.createElement || _react2.default.createElement)(_Text2.default, {
                                        style: [styles.content]
                                    },
                                    props.message))));



                }
            }]);
            return ToastView;
        }(_react.Component);



        var styles = _StyleSheet2.default.create({
            toolTipPannel: {
                position: 'absolute',
                top: 0,
                left: 0,
                right: 0,
                bottom: 0,
                justifyContent: 'center',
                alignItems: 'center'
            },

            toolTip: {
                padding: 10,
                borderRadius: 3,
                backgroundColor: '#666'
            },

            content: {
                color: '#fff',
                lineHeight: 18,
                fontSize: 16
            }
        });



        var Toast = {};
        Toast.show = function(message, duration, offSet) {

            var gid = 'upper-' + _modalControl2.default.getGid();
            _modalControl2.default.mount((this && this.createElement || _react2.default.createElement)(ToastView, {
                key: gid,
                duration: duration,
                offSet: offSet,
                message: message,
                onClose: function onClose() {
                    _modalControl2.default.destory(gid);
                }
            }));

        };

        Toast.SHORT = 400;
        Toast.LONG = 1000;
        Toast.TOP = 0;
        Toast.MIDDLE = height / 2;
        Toast.BOTTOM = height;

        module.exports = Toast;

        /***/
    },
    /* 360 */
    /***/
    function(module, exports) {



        var errorMessage = '该浏览器不支持定位';

        var Geolocation = navigator.geolocation ? navigator.geolocation : {
            getCurrentPosition: function getCurrentPosition(onSuccess, onError) {
                console.warn(errorMessage);
                onError(errorMessage);
            },
            watchPosition: function watchPosition(onSuccess, onError) {
                console.warn(errorMessage);
                onError(errorMessage);
            },
            clearWatch: function clearWatch() {
                console.warn(errorMessage);
            }
        };


        Geolocation.stopObserving = function() {};

        module.exports = Geolocation;

        /***/
    },
    /* 361 */
    /***/
    function(module, exports, __webpack_require__) {



        var ImageStore = __webpack_require__(357);

        var ImageEditor = {



            cropImage: function cropImage(uri, cropData, success, failure) {
                var canvas = document.createElement('canvas');
                canvas.setAttribute('width', cropData.size.width);
                canvas.setAttribute('height', cropData.size.height);

                var ctx = canvas.getContext('2d');
                var img = new Image();
                img.crossOrigin = 'Anonymous';
                img.src = uri;
                img.onload = function() {
                    ctx.drawImage(img, -cropData.offset.x, -cropData.offset.y, cropData.size.width, cropData.size.height);
                    var base64Data = canvas.toDataURL();

                    ImageStore.addImageFromBase64(base64Data, function(uri) {
                        success && success(uri);
                    }, function(error) {
                        failure && failure(error);
                    });
                    canvas = null;
                };

            }
        };



        module.exports = ImageEditor;

        /***/
    },
    /* 362 */
    /***/
    function(module, exports) {



        'use strict';


        function configureNext() {
            console.log('尚不支持');
        }
        var Presets = {
            easeInEaseOut: undefined,
            linear: undefined,
            spring: undefined
        };


        module.exports = {
            configureNext: configureNext,
            create: function create() {
                console.log('尚不支持');
            },
            Types: function Types() {
                console.log('尚不支持');
            },
            Properties: function Properties() {
                console.log('尚不支持');
            },
            configChecker: function configChecker() {
                console.log('尚不支持');
            },
            Presets: Presets,
            easeInEaseOut: configureNext.bind(),
            linear: configureNext.bind(),
            spring: configureNext.bind()
        };

        /***/
    },
    /* 363 */
    /***/
    function(module, exports, __webpack_require__) {

        /* WEBPACK VAR INJECTION */
        (function(global) {


            var Promise = __webpack_require__(2),
                urlReg = /^(http[s]?:)?\/\//g;



            var Linking = module.exports = {
                __initialURL: document.referrer || null,



                getInitialURL: function getInitialURL() {
                    return new Promise(function(rs) {
                        rs(Linking.__initialURL);
                    });
                },



                openURL: function openURL(url) {
                    return new Promise(function(rs, rj) {
                        try {
                            global.open(url);
                            rs();
                        } catch (e) {
                            rj(e);
                        }
                    });
                },



                canOpenURL: function canOpenURL(url) {
                    return new Promise(function(rs) {
                        rs(true);
                    });
                },



                addEventListener: function addEventListener(type, handler) {

                },



                removeEventListener: function removeEventListener(type, handler) {

                }
            };
            /* WEBPACK VAR INJECTION */
        }.call(exports, (function() {
            return this;
        }())))

        /***/
    },
    /* 364 */
    /***/
    function(module, exports) {

        /* WEBPACK VAR INJECTION */
        (function(global) {



            var CALLBACKS = {
                isConnected: {},
                status: {}
            };

            var NetInfo;

            function createInterface(callbacks) {
                return {



                    addEventListener: function addEventListener(evt, callback) {
                        if (!callbacks[evt]) {
                            callbacks[evt] = [];
                        }
                        callbacks[evt].push(callback);
                    },



                    removeEventListener: function removeEventListener(evt, callback) {
                        if (!callbacks[evt]) {
                            return;
                        }
                        var index = callbacks[evt].indexOf(callback);
                        if (index !== -1) {
                            callbacks[evt].splice(index, 1);
                        }
                    },



                    fetch: function fetch() {
                        return new Promise(NetInfo._getNetworkType);
                    },
                    _getNetworkType: function _getNetworkType(rs, rj) {
                        rs('unknown');
                    },



                    isConnectionExpensive: function isConnectionExpensive(callback) {
                        NetInfo.fetch().then(function(networkType) {

                            callback(networkType !== 'wifi');
                        });
                    }
                };

            }

            NetInfo = createInterface(CALLBACKS.status);



            NetInfo.isConnected = createInterface(CALLBACKS.isConnected);


            NetInfo.isConnected.fetch = function() {
                return new Promise(function(resolve) {
                    resolve(global.navigator.onLine);
                });
            };


            function handleChange(status) {
                if (CALLBACKS.status.change) {
                    CALLBACKS.status.change.forEach(function(callback) {
                        callback(status);
                    });
                }
                if (CALLBACKS.isConnected.change) {
                    CALLBACKS.isConnected.change.forEach(function(callback) {
                        callback(status === 'online');
                    });
                }
            }

            if (global.addEventListener) {
                global.addEventListener('online', function() {
                    handleChange('online');
                }, false);


                global.addEventListener('offline', function() {
                    handleChange('offline');
                }, false);
            }

            module.exports = NetInfo;
            /* WEBPACK VAR INJECTION */
        }.call(exports, (function() {
            return this;
        }())))

        /***/
    },
    /* 365 */
    /***/
    function(module, exports) {



        var Vibration = module.exports = {



            vibrate: function vibrate(ms) {
                try {
                    return window.navigator.vibrate(ms || 1000);
                } catch (e) {
                    return false;
                }
            },



            cancel: function cancel() {
                try {
                    navigator.vibrate(0);
                } catch (e) {

                }
            }
        };

        /***/
    },
    /* 366 */
    /***/
    function(module, exports) {



        'use strict';



        var assets = [];

        function registerAsset(asset) {


            return assets.push(asset);
        }

        function getAssetByID(assetId) {
            return assets[assetId - 1];
        }

        module.exports = {
            registerAsset: registerAsset,
            getAssetByID: getAssetByID
        };

        /***/
    },
    /* 367 */
    /***/
    function(module, exports, __webpack_require__) {



        'use strict';

        var Platform = __webpack_require__(311);

        var normalizeColor = __webpack_require__(323);


        function processColor(color) {
            if (color === undefined || color === null) {
                return color;
            }

            var int32Color = normalizeColor(color);
            if (int32Color === null) {
                return undefined;
            }


            int32Color = (int32Color << 24 | int32Color >>> 8) >>> 0;

            if (Platform.OS === 'android') {



                int32Color = int32Color | 0x0;
            }
            return int32Color;
        }

        module.exports = processColor;

        /***/
    },
    /* 368 */
    /***/
    function(module, exports) {



        module.exports = {
            addEventListener: function addEventListener() {
                return true;
            },
            removeEventListener: function removeEventListener() {
                return true;
            },
            exitApp: function exitApp() {
                return true;
            }
        };

        /***/
    }
    /******/
]);